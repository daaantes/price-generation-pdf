/*! For license information please see app.6e9fb6d4d8f65433528a.bundle.js.LICENSE.txt */
"use strict";(self.webpackChunkprice_generation_pdf=self.webpackChunkprice_generation_pdf||[]).push([[524],{6908:(t,e,n)=>{var r=n(901),i=Uint8Array,a=Uint16Array,o=Int32Array,s=new i([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),c=new i([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),h=new i([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),u=function(t,e){for(var n=new a(31),r=0;r<31;++r)n[r]=e+=1<<t[r-1];var i=new o(n[30]);for(r=1;r<30;++r)for(var s=n[r];s<n[r+1];++s)i[s]=s-n[r]<<5|r;return{b:n,r:i}},l=u(s,2),f=l.b,d=l.r;f[28]=258,d[258]=28;for(var p=u(c,0),g=p.b,m=p.r,v=new a(32768),b=0;b<32768;++b){var y=(43690&b)>>1|(21845&b)<<1;y=(61680&(y=(52428&y)>>2|(13107&y)<<2))>>4|(3855&y)<<4,v[b]=((65280&y)>>8|(255&y)<<8)>>1}var w=function(t,e,n){for(var r=t.length,i=0,o=new a(e);i<r;++i)t[i]&&++o[t[i]-1];var s,c=new a(e);for(i=1;i<e;++i)c[i]=c[i-1]+o[i-1]<<1;if(n){s=new a(1<<e);var h=15-e;for(i=0;i<r;++i)if(t[i])for(var u=i<<4|t[i],l=e-t[i],f=c[t[i]-1]++<<l,d=f|(1<<l)-1;f<=d;++f)s[v[f]>>h]=u}else for(s=new a(r),i=0;i<r;++i)t[i]&&(s[i]=v[c[t[i]-1]++]>>15-t[i]);return s},N=new i(288);for(b=0;b<144;++b)N[b]=8;for(b=144;b<256;++b)N[b]=9;for(b=256;b<280;++b)N[b]=7;for(b=280;b<288;++b)N[b]=8;var L=new i(32);for(b=0;b<32;++b)L[b]=5;var A=w(N,9,0),x=w(N,9,1),S=w(L,5,0),_=w(L,5,1),P=function(t){for(var e=t[0],n=1;n<t.length;++n)t[n]>e&&(e=t[n]);return e},k=function(t,e,n){var r=e/8|0;return(t[r]|t[r+1]<<8)>>(7&e)&n},I=function(t,e){var n=e/8|0;return(t[n]|t[n+1]<<8|t[n+2]<<16)>>(7&e)},F=function(t){return(t+7)/8|0},C=function(t,e,n){return(null==e||e<0)&&(e=0),(null==n||n>t.length)&&(n=t.length),new i(t.subarray(e,n))},j=["unexpected EOF","invalid block type","invalid length/literal","invalid distance","stream finished","no stream handler",,"no callback","invalid UTF-8 data","extra field too long","date not in range 1980-2099","filename too long","stream finishing","invalid zip data"],B=function(t,e,n){var r=new Error(e||j[t]);if(r.code=t,Error.captureStackTrace&&Error.captureStackTrace(r,B),!n)throw r;return r},E=function(t,e,n){n<<=7&e;var r=e/8|0;t[r]|=n,t[r+1]|=n>>8},O=function(t,e,n){n<<=7&e;var r=e/8|0;t[r]|=n,t[r+1]|=n>>8,t[r+2]|=n>>16},M=function(t,e){for(var n=[],r=0;r<t.length;++r)t[r]&&n.push({s:r,f:t[r]});var o=n.length,s=n.slice();if(!o)return{t:H,l:0};if(1==o){var c=new i(n[0].s+1);return c[n[0].s]=1,{t:c,l:1}}n.sort((function(t,e){return t.f-e.f})),n.push({s:-1,f:25001});var h=n[0],u=n[1],l=0,f=1,d=2;for(n[0]={s:-1,f:h.f+u.f,l:h,r:u};f!=o-1;)h=n[n[l].f<n[d].f?l++:d++],u=n[l!=f&&n[l].f<n[d].f?l++:d++],n[f++]={s:-1,f:h.f+u.f,l:h,r:u};var p=s[0].s;for(r=1;r<o;++r)s[r].s>p&&(p=s[r].s);var g=new a(p+1),m=q(n[f-1],g,0);if(m>e){r=0;var v=0,b=m-e,y=1<<b;for(s.sort((function(t,e){return g[e.s]-g[t.s]||t.f-e.f}));r<o;++r){var w=s[r].s;if(!(g[w]>e))break;v+=y-(1<<m-g[w]),g[w]=e}for(v>>=b;v>0;){var N=s[r].s;g[N]<e?v-=1<<e-g[N]++-1:++r}for(;r>=0&&v;--r){var L=s[r].s;g[L]==e&&(--g[L],++v)}m=e}return{t:new i(g),l:m}},q=function(t,e,n){return-1==t.s?Math.max(q(t.l,e,n+1),q(t.r,e,n+1)):e[t.s]=n},R=function(t){for(var e=t.length;e&&!t[--e];);for(var n=new a(++e),r=0,i=t[0],o=1,s=function(t){n[r++]=t},c=1;c<=e;++c)if(t[c]==i&&c!=e)++o;else{if(!i&&o>2){for(;o>138;o-=138)s(32754);o>2&&(s(o>10?o-11<<5|28690:o-3<<5|12305),o=0)}else if(o>3){for(s(i),--o;o>6;o-=6)s(8304);o>2&&(s(o-3<<5|8208),o=0)}for(;o--;)s(i);o=1,i=t[c]}return{c:n.subarray(0,r),n:e}},D=function(t,e){for(var n=0,r=0;r<e.length;++r)n+=t[r]*e[r];return n},T=function(t,e,n){var r=n.length,i=F(e+2);t[i]=255&r,t[i+1]=r>>8,t[i+2]=255^t[i],t[i+3]=255^t[i+1];for(var a=0;a<r;++a)t[i+a+4]=n[a];return 8*(i+4+r)},z=function(t,e,n,r,i,o,u,l,f,d,p){E(e,p++,n),++i[256];for(var g=M(i,15),m=g.t,v=g.l,b=M(o,15),y=b.t,x=b.l,_=R(m),P=_.c,k=_.n,I=R(y),F=I.c,C=I.n,j=new a(19),B=0;B<P.length;++B)++j[31&P[B]];for(B=0;B<F.length;++B)++j[31&F[B]];for(var q=M(j,7),z=q.t,U=q.l,H=19;H>4&&!z[h[H-1]];--H);var W,V,G,Y,X=d+5<<3,J=D(i,N)+D(o,L)+u,K=D(i,m)+D(o,y)+u+14+3*H+D(j,z)+2*j[16]+3*j[17]+7*j[18];if(f>=0&&X<=J&&X<=K)return T(e,p,t.subarray(f,f+d));if(E(e,p,1+(K<J)),p+=2,K<J){W=w(m,v,0),V=m,G=w(y,x,0),Y=y;var Z=w(z,U,0);for(E(e,p,k-257),E(e,p+5,C-1),E(e,p+10,H-4),p+=14,B=0;B<H;++B)E(e,p+3*B,z[h[B]]);p+=3*H;for(var $=[P,F],Q=0;Q<2;++Q){var tt=$[Q];for(B=0;B<tt.length;++B){var et=31&tt[B];E(e,p,Z[et]),p+=z[et],et>15&&(E(e,p,tt[B]>>5&127),p+=tt[B]>>12)}}}else W=A,V=N,G=S,Y=L;for(B=0;B<l;++B){var nt=r[B];if(nt>255){O(e,p,W[257+(et=nt>>18&31)]),p+=V[et+257],et>7&&(E(e,p,nt>>23&31),p+=s[et]);var rt=31&nt;O(e,p,G[rt]),p+=Y[rt],rt>3&&(O(e,p,nt>>5&8191),p+=c[rt])}else O(e,p,W[nt]),p+=V[nt]}return O(e,p,W[256]),p+V[256]},U=new o([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]),H=new i(0),W=function(){var t=1,e=0;return{p:function(n){for(var r=t,i=e,a=0|n.length,o=0;o!=a;){for(var s=Math.min(o+2655,a);o<s;++o)i+=r+=n[o];r=(65535&r)+15*(r>>16),i=(65535&i)+15*(i>>16)}t=r,e=i},d:function(){return(255&(t%=65521))<<24|(65280&t)<<8|(255&(e%=65521))<<8|e>>8}}},V=function(t,e,n,r,h){if(!h&&(h={l:1},e.dictionary)){var u=e.dictionary.subarray(-32768),l=new i(u.length+t.length);l.set(u),l.set(t,u.length),t=l,h.w=u.length}return function(t,e,n,r,h,u){var l=u.z||t.length,f=new i(r+l+5*(1+Math.ceil(l/7e3))+h),p=f.subarray(r,f.length-h),g=u.l,v=7&(u.r||0);if(e){v&&(p[0]=u.r>>3);for(var b=U[e-1],y=b>>13,w=8191&b,N=(1<<n)-1,L=u.p||new a(32768),A=u.h||new a(N+1),x=Math.ceil(n/3),S=2*x,_=function(e){return(t[e]^t[e+1]<<x^t[e+2]<<S)&N},P=new o(25e3),k=new a(288),I=new a(32),j=0,B=0,E=u.i||0,O=0,M=u.w||0,q=0;E+2<l;++E){var R=_(E),D=32767&E,H=A[R];if(L[D]=H,A[R]=D,M<=E){var W=l-E;if((j>7e3||O>24576)&&(W>423||!g)){v=z(t,p,0,P,k,I,B,O,q,E-q,v),O=j=B=0,q=E;for(var V=0;V<286;++V)k[V]=0;for(V=0;V<30;++V)I[V]=0}var G=2,Y=0,X=w,J=D-H&32767;if(W>2&&R==_(E-J))for(var K=Math.min(y,W)-1,Z=Math.min(32767,E),$=Math.min(258,W);J<=Z&&--X&&D!=H;){if(t[E+G]==t[E+G-J]){for(var Q=0;Q<$&&t[E+Q]==t[E+Q-J];++Q);if(Q>G){if(G=Q,Y=J,Q>K)break;var tt=Math.min(J,Q-2),et=0;for(V=0;V<tt;++V){var nt=E-J+V&32767,rt=nt-L[nt]&32767;rt>et&&(et=rt,H=nt)}}}J+=(D=H)-(H=L[D])&32767}if(Y){P[O++]=268435456|d[G]<<18|m[Y];var it=31&d[G],at=31&m[Y];B+=s[it]+c[at],++k[257+it],++I[at],M=E+G,++j}else P[O++]=t[E],++k[t[E]]}}for(E=Math.max(E,M);E<l;++E)P[O++]=t[E],++k[t[E]];v=z(t,p,g,P,k,I,B,O,q,E-q,v),g||(u.r=7&v|p[v/8|0]<<3,v-=7,u.h=A,u.p=L,u.i=E,u.w=M)}else{for(E=u.w||0;E<l+g;E+=65535){var ot=E+65535;ot>=l&&(p[v/8|0]=g,ot=l),v=T(p,v+1,t.subarray(E,ot))}u.i=l}return C(f,0,r+F(v)+h)}(t,null==e.level?6:e.level,null==e.mem?h.l?Math.ceil(1.5*Math.max(8,Math.min(13,Math.log(t.length)))):20:12+e.mem,n,r,h)},G=function(t,e,n){for(;n;++e)t[e]=n,n>>>=8};function Y(t,e){e||(e={});var n=W();n.p(t);var r=V(t,e,e.dictionary?6:2,4);return function(t,e){var n=e.level,r=0==n?0:n<6?1:9==n?3:2;if(t[0]=120,t[1]=r<<6|(e.dictionary&&32),t[1]|=31-(t[0]<<8|t[1])%31,e.dictionary){var i=W();i.p(e.dictionary),G(t,2,i.d())}}(r,e),G(r,r.length-4,n.d()),r}function X(t,e){return function(t,e,n,r){var a=t.length,o=r?r.length:0;if(!a||e.f&&!e.l)return n||new i(0);var u=!n,l=u||2!=e.i,d=e.i;u&&(n=new i(3*a));var p=function(t){var e=n.length;if(t>e){var r=new i(Math.max(2*e,t));r.set(n),n=r}},m=e.f||0,v=e.p||0,b=e.b||0,y=e.l,N=e.d,L=e.m,A=e.n,S=8*a;do{if(!y){m=k(t,v,1);var j=k(t,v+1,3);if(v+=3,!j){var E=t[(V=F(v)+4)-4]|t[V-3]<<8,O=V+E;if(O>a){d&&B(0);break}l&&p(b+E),n.set(t.subarray(V,O),b),e.b=b+=E,e.p=v=8*O,e.f=m;continue}if(1==j)y=x,N=_,L=9,A=5;else if(2==j){var M=k(t,v,31)+257,q=k(t,v+10,15)+4,R=M+k(t,v+5,31)+1;v+=14;for(var D=new i(R),T=new i(19),z=0;z<q;++z)T[h[z]]=k(t,v+3*z,7);v+=3*q;var U=P(T),H=(1<<U)-1,W=w(T,U,1);for(z=0;z<R;){var V,G=W[k(t,v,H)];if(v+=15&G,(V=G>>4)<16)D[z++]=V;else{var Y=0,X=0;for(16==V?(X=3+k(t,v,3),v+=2,Y=D[z-1]):17==V?(X=3+k(t,v,7),v+=3):18==V&&(X=11+k(t,v,127),v+=7);X--;)D[z++]=Y}}var J=D.subarray(0,M),K=D.subarray(M);L=P(J),A=P(K),y=w(J,L,1),N=w(K,A,1)}else B(1);if(v>S){d&&B(0);break}}l&&p(b+131072);for(var Z=(1<<L)-1,$=(1<<A)-1,Q=v;;Q=v){var tt=(Y=y[I(t,v)&Z])>>4;if((v+=15&Y)>S){d&&B(0);break}if(Y||B(2),tt<256)n[b++]=tt;else{if(256==tt){Q=v,y=null;break}var et=tt-254;if(tt>264){var nt=s[z=tt-257];et=k(t,v,(1<<nt)-1)+f[z],v+=nt}var rt=N[I(t,v)&$],it=rt>>4;if(rt||B(3),v+=15&rt,K=g[it],it>3&&(nt=c[it],K+=I(t,v)&(1<<nt)-1,v+=nt),v>S){d&&B(0);break}l&&p(b+131072);var at=b+et;if(b<K){var ot=o-K,st=Math.min(K,at);for(ot+b<0&&B(3);b<st;++b)n[b]=r[ot+b]}for(;b<at;++b)n[b]=n[b-K]}}e.l=y,e.p=Q,e.b=b,e.f=m,y&&(m=1,e.m=L,e.d=N,e.n=A)}while(!m);return b!=n.length&&u?C(n,0,b):n.subarray(0,b)}(t.subarray(function(t,e){return(8!=(15&t[0])||t[0]>>4>7||(t[0]<<8|t[1])%31)&&B(6,"invalid zlib data"),(t[1]>>5&1)==+!e&&B(6,"invalid zlib data: "+(32&t[1]?"need":"unexpected")+" dictionary"),2+(t[1]>>3&4)}(t,e&&e.dictionary),-4),{i:2},e&&e.out,e&&e.dictionary)}var J="undefined"!=typeof TextDecoder&&new TextDecoder;try{J.decode(H,{stream:!0})}catch(me){}"function"==typeof queueMicrotask?queueMicrotask:"function"==typeof setTimeout&&setTimeout;var K=function(){return"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:this}();function Z(){K.console&&"function"==typeof K.console.log&&K.console.log.apply(K.console,arguments)}var $={log:Z,warn:function(t){K.console&&("function"==typeof K.console.warn?K.console.warn.apply(K.console,arguments):Z.call(null,arguments))},error:function(t){K.console&&("function"==typeof K.console.error?K.console.error.apply(K.console,arguments):Z(t))}};function Q(t,e,n){var r=new XMLHttpRequest;r.open("GET",t),r.responseType="blob",r.onload=function(){it(r.response,e,n)},r.onerror=function(){$.error("could not download file")},r.send()}function tt(t){var e=new XMLHttpRequest;e.open("HEAD",t,!1);try{e.send()}catch(t){}return e.status>=200&&e.status<=299}function et(t){try{t.dispatchEvent(new MouseEvent("click"))}catch(n){var e=document.createEvent("MouseEvents");e.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),t.dispatchEvent(e)}}var nt,rt,it=K.saveAs||("object"!==("undefined"==typeof window?"undefined":(0,r.A)(window))||window!==K?function(){}:"undefined"!=typeof HTMLAnchorElement&&"download"in HTMLAnchorElement.prototype?function(t,e,n){var r=K.URL||K.webkitURL,i=document.createElement("a");e=e||t.name||"download",i.download=e,i.rel="noopener","string"==typeof t?(i.href=t,i.origin!==location.origin?tt(i.href)?Q(t,e,n):et(i,i.target="_blank"):et(i)):(i.href=r.createObjectURL(t),setTimeout((function(){r.revokeObjectURL(i.href)}),4e4),setTimeout((function(){et(i)}),0))}:"msSaveOrOpenBlob"in navigator?function(t,e,n){if(e=e||t.name||"download","string"==typeof t)if(tt(t))Q(t,e,n);else{var i=document.createElement("a");i.href=t,i.target="_blank",setTimeout((function(){et(i)}))}else navigator.msSaveOrOpenBlob(function(t,e){return void 0===e?e={autoBom:!1}:"object"!==(0,r.A)(e)&&($.warn("Deprecated: Expected third argument to be a object"),e={autoBom:!e}),e.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t}(t,n),e)}:function(t,e,n,i){if((i=i||open("","_blank"))&&(i.document.title=i.document.body.innerText="downloading..."),"string"==typeof t)return Q(t,e,n);var a="application/octet-stream"===t.type,o=/constructor/i.test(K.HTMLElement)||K.safari,s=/CriOS\/[\d]+/.test(navigator.userAgent);if((s||a&&o)&&"object"===("undefined"==typeof FileReader?"undefined":(0,r.A)(FileReader))){var c=new FileReader;c.onloadend=function(){var t=c.result;t=s?t:t.replace(/^data:[^;]*;/,"data:attachment/file;"),i?i.location.href=t:location=t,i=null},c.readAsDataURL(t)}else{var h=K.URL||K.webkitURL,u=h.createObjectURL(t);i?i.location=u:location.href=u,i=null,setTimeout((function(){h.revokeObjectURL(u)}),4e4)}});function at(t){var e;t=t||"",this.ok=!1,"#"==t.charAt(0)&&(t=t.substr(1,6)),t={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"00ffff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000000",blanchedalmond:"ffebcd",blue:"0000ff",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"00ffff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dodgerblue:"1e90ff",feldspar:"d19275",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"ff00ff",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgrey:"d3d3d3",lightgreen:"90ee90",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslateblue:"8470ff",lightslategray:"778899",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"00ff00",limegreen:"32cd32",linen:"faf0e6",magenta:"ff00ff",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370d8",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"d87093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",red:"ff0000",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",violetred:"d02090",wheat:"f5deb3",white:"ffffff",whitesmoke:"f5f5f5",yellow:"ffff00",yellowgreen:"9acd32"}[t=(t=t.replace(/ /g,"")).toLowerCase()]||t;for(var n=[{re:/^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,example:["rgb(123, 234, 45)","rgb(255,234,245)"],process:function(t){return[parseInt(t[1]),parseInt(t[2]),parseInt(t[3])]}},{re:/^(\w{2})(\w{2})(\w{2})$/,example:["#00ff00","336699"],process:function(t){return[parseInt(t[1],16),parseInt(t[2],16),parseInt(t[3],16)]}},{re:/^(\w{1})(\w{1})(\w{1})$/,example:["#fb0","f0f"],process:function(t){return[parseInt(t[1]+t[1],16),parseInt(t[2]+t[2],16),parseInt(t[3]+t[3],16)]}}],r=0;r<n.length;r++){var i=n[r].re,a=n[r].process,o=i.exec(t);o&&(e=a(o),this.r=e[0],this.g=e[1],this.b=e[2],this.ok=!0)}this.r=this.r<0||isNaN(this.r)?0:this.r>255?255:this.r,this.g=this.g<0||isNaN(this.g)?0:this.g>255?255:this.g,this.b=this.b<0||isNaN(this.b)?0:this.b>255?255:this.b,this.toRGB=function(){return"rgb("+this.r+", "+this.g+", "+this.b+")"},this.toHex=function(){var t=this.r.toString(16),e=this.g.toString(16),n=this.b.toString(16);return 1==t.length&&(t="0"+t),1==e.length&&(e="0"+e),1==n.length&&(n="0"+n),"#"+t+e+n}}function ot(t,e){var n=t[0],r=t[1],i=t[2],a=t[3];n=ct(n,r,i,a,e[0],7,-680876936),a=ct(a,n,r,i,e[1],12,-389564586),i=ct(i,a,n,r,e[2],17,606105819),r=ct(r,i,a,n,e[3],22,-1044525330),n=ct(n,r,i,a,e[4],7,-176418897),a=ct(a,n,r,i,e[5],12,1200080426),i=ct(i,a,n,r,e[6],17,-1473231341),r=ct(r,i,a,n,e[7],22,-45705983),n=ct(n,r,i,a,e[8],7,1770035416),a=ct(a,n,r,i,e[9],12,-1958414417),i=ct(i,a,n,r,e[10],17,-42063),r=ct(r,i,a,n,e[11],22,-1990404162),n=ct(n,r,i,a,e[12],7,1804603682),a=ct(a,n,r,i,e[13],12,-40341101),i=ct(i,a,n,r,e[14],17,-1502002290),n=ht(n,r=ct(r,i,a,n,e[15],22,1236535329),i,a,e[1],5,-165796510),a=ht(a,n,r,i,e[6],9,-1069501632),i=ht(i,a,n,r,e[11],14,643717713),r=ht(r,i,a,n,e[0],20,-373897302),n=ht(n,r,i,a,e[5],5,-701558691),a=ht(a,n,r,i,e[10],9,38016083),i=ht(i,a,n,r,e[15],14,-660478335),r=ht(r,i,a,n,e[4],20,-405537848),n=ht(n,r,i,a,e[9],5,568446438),a=ht(a,n,r,i,e[14],9,-1019803690),i=ht(i,a,n,r,e[3],14,-187363961),r=ht(r,i,a,n,e[8],20,1163531501),n=ht(n,r,i,a,e[13],5,-1444681467),a=ht(a,n,r,i,e[2],9,-51403784),i=ht(i,a,n,r,e[7],14,1735328473),n=ut(n,r=ht(r,i,a,n,e[12],20,-1926607734),i,a,e[5],4,-378558),a=ut(a,n,r,i,e[8],11,-2022574463),i=ut(i,a,n,r,e[11],16,1839030562),r=ut(r,i,a,n,e[14],23,-35309556),n=ut(n,r,i,a,e[1],4,-1530992060),a=ut(a,n,r,i,e[4],11,1272893353),i=ut(i,a,n,r,e[7],16,-155497632),r=ut(r,i,a,n,e[10],23,-1094730640),n=ut(n,r,i,a,e[13],4,681279174),a=ut(a,n,r,i,e[0],11,-358537222),i=ut(i,a,n,r,e[3],16,-722521979),r=ut(r,i,a,n,e[6],23,76029189),n=ut(n,r,i,a,e[9],4,-640364487),a=ut(a,n,r,i,e[12],11,-421815835),i=ut(i,a,n,r,e[15],16,530742520),n=lt(n,r=ut(r,i,a,n,e[2],23,-995338651),i,a,e[0],6,-198630844),a=lt(a,n,r,i,e[7],10,1126891415),i=lt(i,a,n,r,e[14],15,-1416354905),r=lt(r,i,a,n,e[5],21,-57434055),n=lt(n,r,i,a,e[12],6,1700485571),a=lt(a,n,r,i,e[3],10,-1894986606),i=lt(i,a,n,r,e[10],15,-1051523),r=lt(r,i,a,n,e[1],21,-2054922799),n=lt(n,r,i,a,e[8],6,1873313359),a=lt(a,n,r,i,e[15],10,-30611744),i=lt(i,a,n,r,e[6],15,-1560198380),r=lt(r,i,a,n,e[13],21,1309151649),n=lt(n,r,i,a,e[4],6,-145523070),a=lt(a,n,r,i,e[11],10,-1120210379),i=lt(i,a,n,r,e[2],15,718787259),r=lt(r,i,a,n,e[9],21,-343485551),t[0]=yt(n,t[0]),t[1]=yt(r,t[1]),t[2]=yt(i,t[2]),t[3]=yt(a,t[3])}function st(t,e,n,r,i,a){return e=yt(yt(e,t),yt(r,a)),yt(e<<i|e>>>32-i,n)}function ct(t,e,n,r,i,a,o){return st(e&n|~e&r,t,e,i,a,o)}function ht(t,e,n,r,i,a,o){return st(e&r|n&~r,t,e,i,a,o)}function ut(t,e,n,r,i,a,o){return st(e^n^r,t,e,i,a,o)}function lt(t,e,n,r,i,a,o){return st(n^(e|~r),t,e,i,a,o)}function ft(t){var e,n=t.length,r=[1732584193,-271733879,-1732584194,271733878];for(e=64;e<=t.length;e+=64)ot(r,dt(t.substring(e-64,e)));t=t.substring(e-64);var i=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(e=0;e<t.length;e++)i[e>>2]|=t.charCodeAt(e)<<(e%4<<3);if(i[e>>2]|=128<<(e%4<<3),e>55)for(ot(r,i),e=0;e<16;e++)i[e]=0;return i[14]=8*n,ot(r,i),r}function dt(t){var e,n=[];for(e=0;e<64;e+=4)n[e>>2]=t.charCodeAt(e)+(t.charCodeAt(e+1)<<8)+(t.charCodeAt(e+2)<<16)+(t.charCodeAt(e+3)<<24);return n}nt=K.atob.bind(K),rt=K.btoa.bind(K);var pt="0123456789abcdef".split("");function gt(t){for(var e="",n=0;n<4;n++)e+=pt[t>>8*n+4&15]+pt[t>>8*n&15];return e}function mt(t){return String.fromCharCode(255&t,(65280&t)>>8,(16711680&t)>>16,(4278190080&t)>>24)}function vt(t){return ft(t).map(mt).join("")}var bt="5d41402abc4b2a76b9719d911017c592"!=function(t){for(var e=0;e<t.length;e++)t[e]=gt(t[e]);return t.join("")}(ft("hello"));function yt(t,e){if(bt){var n=(65535&t)+(65535&e);return(t>>16)+(e>>16)+(n>>16)<<16|65535&n}return t+e&4294967295}function wt(t,e){var n,r,i,a;if(t!==n){for(var o=(i=t,a=1+(256/t.length|0),new Array(a+1).join(i)),s=[],c=0;c<256;c++)s[c]=c;var h=0;for(c=0;c<256;c++){var u=s[c];h=(h+u+o.charCodeAt(c))%256,s[c]=s[h],s[h]=u}n=t,r=s}else s=r;var l=e.length,f=0,d=0,p="";for(c=0;c<l;c++)d=(d+(u=s[f=(f+1)%256]))%256,s[f]=s[d],s[d]=u,o=s[(s[f]+s[d])%256],p+=String.fromCharCode(e.charCodeAt(c)^o);return p}var Nt={print:4,modify:8,copy:16,"annot-forms":32};function Lt(t,e,n,r){this.v=1,this.r=2;var i=192;t.forEach((function(t){if(void 0!==Nt.perm)throw new Error("Invalid permission: "+t);i+=Nt[t]})),this.padding="(¿N^NuAd\0NVÿú\b..\0¶Ðh>/\f©þdSiz";var a=(e+this.padding).substr(0,32),o=(n+this.padding).substr(0,32);this.O=this.processOwnerPassword(a,o),this.P=-(1+(255^i)),this.encryptionKey=vt(a+this.O+this.lsbFirstWord(this.P)+this.hexToBytes(r)).substr(0,5),this.U=wt(this.encryptionKey,this.padding)}function At(t){if(/[^\u0000-\u00ff]/.test(t))throw new Error("Invalid PDF Name Object: "+t+", Only accept ASCII characters.");for(var e="",n=t.length,r=0;r<n;r++){var i=t.charCodeAt(r);e+=i<33||35===i||37===i||40===i||41===i||47===i||60===i||62===i||91===i||93===i||123===i||125===i||i>126?"#"+("0"+i.toString(16)).slice(-2):t[r]}return e}function xt(t){if("object"!==(0,r.A)(t))throw new Error("Invalid Context passed to initialize PubSub (jsPDF-module)");var e={};this.subscribe=function(t,n,r){if(r=r||!1,"string"!=typeof t||"function"!=typeof n||"boolean"!=typeof r)throw new Error("Invalid arguments passed to PubSub.subscribe (jsPDF-module)");e.hasOwnProperty(t)||(e[t]={});var i=Math.random().toString(35);return e[t][i]=[n,!!r],i},this.unsubscribe=function(t){for(var n in e)if(e[n][t])return delete e[n][t],0===Object.keys(e[n]).length&&delete e[n],!0;return!1},this.publish=function(n){if(e.hasOwnProperty(n)){var r=Array.prototype.slice.call(arguments,1),i=[];for(var a in e[n]){var o=e[n][a];try{o[0].apply(t,r)}catch(n){K.console&&$.error("jsPDF PubSub Error",n.message,n)}o[1]&&i.push(a)}i.length&&i.forEach(this.unsubscribe)}},this.getTopics=function(){return e}}function St(t){if(!(this instanceof St))return new St(t);var e="opacity,stroke-opacity".split(",");for(var n in t)t.hasOwnProperty(n)&&e.indexOf(n)>=0&&(this[n]=t[n]);this.id="",this.objectNumber=-1}function _t(t,e){this.gState=t,this.matrix=e,this.id="",this.objectNumber=-1}function Pt(t,e,n,r,i){if(!(this instanceof Pt))return new Pt(t,e,n,r,i);this.type="axial"===t?2:3,this.coords=e,this.colors=n,_t.call(this,r,i)}function kt(t,e,n,r,i){if(!(this instanceof kt))return new kt(t,e,n,r,i);this.boundingBox=t,this.xStep=e,this.yStep=n,this.stream="",this.cloneIndex=0,_t.call(this,r,i)}function It(t){var e,n="string"==typeof arguments[0]?arguments[0]:"p",i=arguments[1],a=arguments[2],o=arguments[3],s=[],c=1,h=16,u="S",l=null;"object"===(0,r.A)(t=t||{})&&(n=t.orientation,i=t.unit||i,a=t.format||a,o=t.compress||t.compressPdf||o,null!==(l=t.encryption||null)&&(l.userPassword=l.userPassword||"",l.ownerPassword=l.ownerPassword||"",l.userPermissions=l.userPermissions||[]),c="number"==typeof t.userUnit?Math.abs(t.userUnit):1,void 0!==t.precision&&(e=t.precision),void 0!==t.floatPrecision&&(h=t.floatPrecision),u=t.defaultPathOperation||"S"),s=t.filters||(!0===o?["FlateEncode"]:s),i=i||"mm",n=(""+(n||"P")).toLowerCase();var f=t.putOnlyUsedFonts||!1,d={},p={internal:{},__private__:{}};p.__private__.PubSub=xt;var g="1.3",m=p.__private__.getPdfVersion=function(){return g};p.__private__.setPdfVersion=function(t){g=t};var v={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};p.__private__.getPageFormats=function(){return v};var b=p.__private__.getPageFormat=function(t){return v[t]};a=a||"a4";var y="compat",w="advanced",N=y;function L(){this.saveGraphicsState(),tt(new Wt(bt,0,0,-bt,0,Ln()*bt).toString()+" cm"),this.setFontSize(this.getFontSize()/bt),u="n",N=w}function A(){this.restoreGraphicsState(),u="S",N=y}var x=p.__private__.combineFontStyleAndFontWeight=function(t,e){if("bold"==t&&"normal"==e||"bold"==t&&400==e||"normal"==t&&"italic"==e||"bold"==t&&"italic"==e)throw new Error("Invalid Combination of fontweight and fontstyle");return e&&(t=400==e||"normal"===e?"italic"===t?"italic":"normal":700!=e&&"bold"!==e||"normal"!==t?(700==e?"bold":e)+""+t:"bold"),t};p.advancedAPI=function(t){var e=N===y;return e&&L.call(this),"function"!=typeof t||(t(this),e&&A.call(this)),this},p.compatAPI=function(t){var e=N===w;return e&&A.call(this),"function"!=typeof t||(t(this),e&&L.call(this)),this},p.isAdvancedAPI=function(){return N===w};var S,_=function(t){if(N!==w)throw new Error(t+" is only available in 'advanced' API mode. You need to call advancedAPI() first.")},P=p.roundToPrecision=p.__private__.roundToPrecision=function(t,n){var r=e||n;if(isNaN(t)||isNaN(r))throw new Error("Invalid argument passed to jsPDF.roundToPrecision");return t.toFixed(r).replace(/0+$/,"")};S=p.hpf=p.__private__.hpf="number"==typeof h?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return P(t,h)}:"smart"===h?function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return P(t,t>-1&&t<1?16:5)}:function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.hpf");return P(t,16)};var k=p.f2=p.__private__.f2=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f2");return P(t,2)},I=p.__private__.f3=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.f3");return P(t,3)},F=p.scale=p.__private__.scale=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.scale");return N===y?t*bt:N===w?t:void 0},C=function(t){return F(function(t){return N===y?Ln()-t:N===w?t:void 0}(t))};p.__private__.setPrecision=p.setPrecision=function(t){"number"==typeof parseInt(t,10)&&(e=parseInt(t,10))};var j,B="00000000000000000000000000000000",E=p.__private__.getFileId=function(){return B},O=p.__private__.setFileId=function(t){return B=void 0!==t&&/^[a-fA-F0-9]{32}$/.test(t)?t.toUpperCase():B.split("").map((function(){return"ABCDEF0123456789".charAt(Math.floor(16*Math.random()))})).join(""),null!==l&&(Ce=new Lt(l.userPermissions,l.userPassword,l.ownerPassword,B)),B};p.setFileId=function(t){return O(t),this},p.getFileId=function(){return E()};var M=p.__private__.convertDateToPDFDate=function(t){var e=t.getTimezoneOffset(),n=e<0?"+":"-",r=Math.floor(Math.abs(e/60)),i=Math.abs(e%60),a=[n,z(r),"'",z(i),"'"].join("");return["D:",t.getFullYear(),z(t.getMonth()+1),z(t.getDate()),z(t.getHours()),z(t.getMinutes()),z(t.getSeconds()),a].join("")},q=p.__private__.convertPDFDateToDate=function(t){var e=parseInt(t.substr(2,4),10),n=parseInt(t.substr(6,2),10)-1,r=parseInt(t.substr(8,2),10),i=parseInt(t.substr(10,2),10),a=parseInt(t.substr(12,2),10),o=parseInt(t.substr(14,2),10);return new Date(e,n,r,i,a,o,0)},R=p.__private__.setCreationDate=function(t){var e;if(void 0===t&&(t=new Date),t instanceof Date)e=M(t);else{if(!/^D:(20[0-2][0-9]|203[0-7]|19[7-9][0-9])(0[0-9]|1[0-2])([0-2][0-9]|3[0-1])(0[0-9]|1[0-9]|2[0-3])(0[0-9]|[1-5][0-9])(0[0-9]|[1-5][0-9])(\+0[0-9]|\+1[0-4]|-0[0-9]|-1[0-1])'(0[0-9]|[1-5][0-9])'?$/.test(t))throw new Error("Invalid argument passed to jsPDF.setCreationDate");e=t}return j=e},D=p.__private__.getCreationDate=function(t){var e=j;return"jsDate"===t&&(e=q(j)),e};p.setCreationDate=function(t){return R(t),this},p.getCreationDate=function(t){return D(t)};var T,z=p.__private__.padd2=function(t){return("0"+parseInt(t)).slice(-2)},U=p.__private__.padd2Hex=function(t){return("00"+(t=t.toString())).substr(t.length)},H=0,W=[],V=[],G=0,Y=[],X=[],J=!1,Z=V;p.__private__.setCustomOutputDestination=function(t){J=!0,Z=t};var Q=function(t){J||(Z=t)};p.__private__.resetCustomOutputDestination=function(){J=!1,Z=V};var tt=p.__private__.out=function(t){return t=t.toString(),G+=t.length+1,Z.push(t),Z},et=p.__private__.write=function(t){return tt(1===arguments.length?t.toString():Array.prototype.join.call(arguments," "))},nt=p.__private__.getArrayBuffer=function(t){for(var e=t.length,n=new ArrayBuffer(e),r=new Uint8Array(n);e--;)r[e]=t.charCodeAt(e);return n},ot=[["Helvetica","helvetica","normal","WinAnsiEncoding"],["Helvetica-Bold","helvetica","bold","WinAnsiEncoding"],["Helvetica-Oblique","helvetica","italic","WinAnsiEncoding"],["Helvetica-BoldOblique","helvetica","bolditalic","WinAnsiEncoding"],["Courier","courier","normal","WinAnsiEncoding"],["Courier-Bold","courier","bold","WinAnsiEncoding"],["Courier-Oblique","courier","italic","WinAnsiEncoding"],["Courier-BoldOblique","courier","bolditalic","WinAnsiEncoding"],["Times-Roman","times","normal","WinAnsiEncoding"],["Times-Bold","times","bold","WinAnsiEncoding"],["Times-Italic","times","italic","WinAnsiEncoding"],["Times-BoldItalic","times","bolditalic","WinAnsiEncoding"],["ZapfDingbats","zapfdingbats","normal",null],["Symbol","symbol","normal",null]];p.__private__.getStandardFonts=function(){return ot};var st=t.fontSize||16;p.__private__.setFontSize=p.setFontSize=function(t){return st=N===w?t/bt:t,this};var ct,ht=p.__private__.getFontSize=p.getFontSize=function(){return N===y?st:st*bt},ut=t.R2L||!1;p.__private__.setR2L=p.setR2L=function(t){return ut=t,this},p.__private__.getR2L=p.getR2L=function(){return ut};var lt,ft=p.__private__.setZoomMode=function(t){if(/^(?:\d+\.\d*|\d*\.\d+|\d+)%$/.test(t))ct=t;else if(isNaN(t)){if(-1===[void 0,null,"fullwidth","fullheight","fullpage","original"].indexOf(t))throw new Error('zoom must be Integer (e.g. 2), a percentage Value (e.g. 300%) or fullwidth, fullheight, fullpage, original. "'+t+'" is not recognized.');ct=t}else ct=parseInt(t,10)};p.__private__.getZoomMode=function(){return ct};var dt,pt=p.__private__.setPageMode=function(t){if(-1==[void 0,null,"UseNone","UseOutlines","UseThumbs","FullScreen"].indexOf(t))throw new Error('Page mode must be one of UseNone, UseOutlines, UseThumbs, or FullScreen. "'+t+'" is not recognized.');lt=t};p.__private__.getPageMode=function(){return lt};var gt=p.__private__.setLayoutMode=function(t){if(-1==[void 0,null,"continuous","single","twoleft","tworight","two"].indexOf(t))throw new Error('Layout mode must be one of continuous, single, twoleft, tworight. "'+t+'" is not recognized.');dt=t};p.__private__.getLayoutMode=function(){return dt},p.__private__.setDisplayMode=p.setDisplayMode=function(t,e,n){return ft(t),gt(e),pt(n),this};var mt={title:"",subject:"",author:"",keywords:"",creator:""};p.__private__.getDocumentProperty=function(t){if(-1===Object.keys(mt).indexOf(t))throw new Error("Invalid argument passed to jsPDF.getDocumentProperty");return mt[t]},p.__private__.getDocumentProperties=function(){return mt},p.__private__.setDocumentProperties=p.setProperties=p.setDocumentProperties=function(t){for(var e in mt)mt.hasOwnProperty(e)&&t[e]&&(mt[e]=t[e]);return this},p.__private__.setDocumentProperty=function(t,e){if(-1===Object.keys(mt).indexOf(t))throw new Error("Invalid arguments passed to jsPDF.setDocumentProperty");return mt[t]=e};var vt,bt,yt,wt,Nt,_t={},Ft={},Ct=[],jt={},Bt={},Et={},Ot={},Mt=null,qt=0,Rt=[],Dt=new xt(p),Tt=t.hotfixes||[],zt={},Ut={},Ht=[],Wt=function t(e,n,r,i,a,o){if(!(this instanceof t))return new t(e,n,r,i,a,o);isNaN(e)&&(e=1),isNaN(n)&&(n=0),isNaN(r)&&(r=0),isNaN(i)&&(i=1),isNaN(a)&&(a=0),isNaN(o)&&(o=0),this._matrix=[e,n,r,i,a,o]};Object.defineProperty(Wt.prototype,"sx",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Wt.prototype,"shy",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Wt.prototype,"shx",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Wt.prototype,"sy",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Wt.prototype,"tx",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Wt.prototype,"ty",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Wt.prototype,"a",{get:function(){return this._matrix[0]},set:function(t){this._matrix[0]=t}}),Object.defineProperty(Wt.prototype,"b",{get:function(){return this._matrix[1]},set:function(t){this._matrix[1]=t}}),Object.defineProperty(Wt.prototype,"c",{get:function(){return this._matrix[2]},set:function(t){this._matrix[2]=t}}),Object.defineProperty(Wt.prototype,"d",{get:function(){return this._matrix[3]},set:function(t){this._matrix[3]=t}}),Object.defineProperty(Wt.prototype,"e",{get:function(){return this._matrix[4]},set:function(t){this._matrix[4]=t}}),Object.defineProperty(Wt.prototype,"f",{get:function(){return this._matrix[5]},set:function(t){this._matrix[5]=t}}),Object.defineProperty(Wt.prototype,"rotation",{get:function(){return Math.atan2(this.shx,this.sx)}}),Object.defineProperty(Wt.prototype,"scaleX",{get:function(){return this.decompose().scale.sx}}),Object.defineProperty(Wt.prototype,"scaleY",{get:function(){return this.decompose().scale.sy}}),Object.defineProperty(Wt.prototype,"isIdentity",{get:function(){return 1===this.sx&&0===this.shy&&0===this.shx&&1===this.sy&&0===this.tx&&0===this.ty}}),Wt.prototype.join=function(t){return[this.sx,this.shy,this.shx,this.sy,this.tx,this.ty].map(S).join(t)},Wt.prototype.multiply=function(t){var e=t.sx*this.sx+t.shy*this.shx,n=t.sx*this.shy+t.shy*this.sy,r=t.shx*this.sx+t.sy*this.shx,i=t.shx*this.shy+t.sy*this.sy,a=t.tx*this.sx+t.ty*this.shx+this.tx,o=t.tx*this.shy+t.ty*this.sy+this.ty;return new Wt(e,n,r,i,a,o)},Wt.prototype.decompose=function(){var t=this.sx,e=this.shy,n=this.shx,r=this.sy,i=this.tx,a=this.ty,o=Math.sqrt(t*t+e*e),s=(t/=o)*n+(e/=o)*r;n-=t*s,r-=e*s;var c=Math.sqrt(n*n+r*r);return s/=c,t*(r/=c)<e*(n/=c)&&(t=-t,e=-e,s=-s,o=-o),{scale:new Wt(o,0,0,c,0,0),translate:new Wt(1,0,0,1,i,a),rotate:new Wt(t,e,-e,t,0,0),skew:new Wt(1,0,s,1,0,0)}},Wt.prototype.toString=function(t){return this.join(" ")},Wt.prototype.inversed=function(){var t=this.sx,e=this.shy,n=this.shx,r=this.sy,i=this.tx,a=this.ty,o=1/(t*r-e*n),s=r*o,c=-e*o,h=-n*o,u=t*o;return new Wt(s,c,h,u,-s*i-h*a,-c*i-u*a)},Wt.prototype.applyToPoint=function(t){var e=t.x*this.sx+t.y*this.shx+this.tx,n=t.x*this.shy+t.y*this.sy+this.ty;return new gn(e,n)},Wt.prototype.applyToRectangle=function(t){var e=this.applyToPoint(t),n=this.applyToPoint(new gn(t.x+t.w,t.y+t.h));return new mn(e.x,e.y,n.x-e.x,n.y-e.y)},Wt.prototype.clone=function(){var t=this.sx,e=this.shy,n=this.shx,r=this.sy,i=this.tx,a=this.ty;return new Wt(t,e,n,r,i,a)},p.Matrix=Wt;var Vt=p.matrixMult=function(t,e){return e.multiply(t)},Gt=new Wt(1,0,0,1,0,0);p.unitMatrix=p.identityMatrix=Gt;var Yt=function(t,e){if(!Bt[t]){var n=(e instanceof Pt?"Sh":"P")+(Object.keys(jt).length+1).toString(10);e.id=n,Bt[t]=n,jt[n]=e,Dt.publish("addPattern",e)}};p.ShadingPattern=Pt,p.TilingPattern=kt,p.addShadingPattern=function(t,e){return _("addShadingPattern()"),Yt(t,e),this},p.beginTilingPattern=function(t){_("beginTilingPattern()"),bn(t.boundingBox[0],t.boundingBox[1],t.boundingBox[2]-t.boundingBox[0],t.boundingBox[3]-t.boundingBox[1],t.matrix)},p.endTilingPattern=function(t,e){_("endTilingPattern()"),e.stream=X[T].join("\n"),Yt(t,e),Dt.publish("endTilingPattern",e),Ht.pop().restore()};var Xt,Jt=p.__private__.newObject=function(){var t=Kt();return Zt(t,!0),t},Kt=p.__private__.newObjectDeferred=function(){return H++,W[H]=function(){return G},H},Zt=function(t,e){return e="boolean"==typeof e&&e,W[t]=G,e&&tt(t+" 0 obj"),t},$t=p.__private__.newAdditionalObject=function(){var t={objId:Kt(),content:""};return Y.push(t),t},Qt=Kt(),te=Kt(),ee=p.__private__.decodeColorString=function(t){var e=t.split(" ");if(2!==e.length||"g"!==e[1]&&"G"!==e[1])5!==e.length||"k"!==e[4]&&"K"!==e[4]||(e=[(1-e[0])*(1-e[3]),(1-e[1])*(1-e[3]),(1-e[2])*(1-e[3]),"r"]);else{var n=parseFloat(e[0]);e=[n,n,n,"r"]}for(var r="#",i=0;i<3;i++)r+=("0"+Math.floor(255*parseFloat(e[i])).toString(16)).slice(-2);return r},ne=p.__private__.encodeColorString=function(t){var e;"string"==typeof t&&(t={ch1:t});var n=t.ch1,i=t.ch2,a=t.ch3,o=t.ch4,s="draw"===t.pdfColorType?["G","RG","K"]:["g","rg","k"];if("string"==typeof n&&"#"!==n.charAt(0)){var c=new at(n);if(c.ok)n=c.toHex();else if(!/^\d*\.?\d*$/.test(n))throw new Error('Invalid color "'+n+'" passed to jsPDF.encodeColorString.')}if("string"==typeof n&&/^#[0-9A-Fa-f]{3}$/.test(n)&&(n="#"+n[1]+n[1]+n[2]+n[2]+n[3]+n[3]),"string"==typeof n&&/^#[0-9A-Fa-f]{6}$/.test(n)){var h=parseInt(n.substr(1),16);n=h>>16&255,i=h>>8&255,a=255&h}if(void 0===i||void 0===o&&n===i&&i===a)e="string"==typeof n?n+" "+s[0]:2===t.precision?k(n/255)+" "+s[0]:I(n/255)+" "+s[0];else if(void 0===o||"object"===(0,r.A)(o)){if(o&&!isNaN(o.a)&&0===o.a)return["1.","1.","1.",s[1]].join(" ");e="string"==typeof n?[n,i,a,s[1]].join(" "):2===t.precision?[k(n/255),k(i/255),k(a/255),s[1]].join(" "):[I(n/255),I(i/255),I(a/255),s[1]].join(" ")}else e="string"==typeof n?[n,i,a,o,s[2]].join(" "):2===t.precision?[k(n),k(i),k(a),k(o),s[2]].join(" "):[I(n),I(i),I(a),I(o),s[2]].join(" ");return e},re=p.__private__.getFilters=function(){return s},ie=p.__private__.putStream=function(t){var e=(t=t||{}).data||"",n=t.filters||re(),r=t.alreadyAppliedFilters||[],i=t.addLength1||!1,a=e.length,o=t.objectId,s=function(t){return t};if(null!==l&&void 0===o)throw new Error("ObjectId must be passed to putStream for file encryption");null!==l&&(s=Ce.encryptor(o,0));var c={};!0===n&&(n=["FlateEncode"]);var h=t.additionalKeyValues||[],u=(c=void 0!==It.API.processDataByFilters?It.API.processDataByFilters(e,n):{data:e,reverseChain:[]}).reverseChain+(Array.isArray(r)?r.join(" "):r.toString());if(0!==c.data.length&&(h.push({key:"Length",value:c.data.length}),!0===i&&h.push({key:"Length1",value:a})),0!=u.length)if(u.split("/").length-1==1)h.push({key:"Filter",value:u});else{h.push({key:"Filter",value:"["+u+"]"});for(var f=0;f<h.length;f+=1)if("DecodeParms"===h[f].key){for(var d=[],p=0;p<c.reverseChain.split("/").length-1;p+=1)d.push("null");d.push(h[f].value),h[f].value="["+d.join(" ")+"]"}}tt("<<");for(var g=0;g<h.length;g++)tt("/"+h[g].key+" "+h[g].value);tt(">>"),0!==c.data.length&&(tt("stream"),tt(s(c.data)),tt("endstream"))},ae=p.__private__.putPage=function(t){var e=t.number,n=t.data,r=t.objId,i=t.contentsObjId;Zt(r,!0),tt("<</Type /Page"),tt("/Parent "+t.rootDictionaryObjId+" 0 R"),tt("/Resources "+t.resourceDictionaryObjId+" 0 R"),tt("/MediaBox ["+parseFloat(S(t.mediaBox.bottomLeftX))+" "+parseFloat(S(t.mediaBox.bottomLeftY))+" "+S(t.mediaBox.topRightX)+" "+S(t.mediaBox.topRightY)+"]"),null!==t.cropBox&&tt("/CropBox ["+S(t.cropBox.bottomLeftX)+" "+S(t.cropBox.bottomLeftY)+" "+S(t.cropBox.topRightX)+" "+S(t.cropBox.topRightY)+"]"),null!==t.bleedBox&&tt("/BleedBox ["+S(t.bleedBox.bottomLeftX)+" "+S(t.bleedBox.bottomLeftY)+" "+S(t.bleedBox.topRightX)+" "+S(t.bleedBox.topRightY)+"]"),null!==t.trimBox&&tt("/TrimBox ["+S(t.trimBox.bottomLeftX)+" "+S(t.trimBox.bottomLeftY)+" "+S(t.trimBox.topRightX)+" "+S(t.trimBox.topRightY)+"]"),null!==t.artBox&&tt("/ArtBox ["+S(t.artBox.bottomLeftX)+" "+S(t.artBox.bottomLeftY)+" "+S(t.artBox.topRightX)+" "+S(t.artBox.topRightY)+"]"),"number"==typeof t.userUnit&&1!==t.userUnit&&tt("/UserUnit "+t.userUnit),Dt.publish("putPage",{objId:r,pageContext:Rt[e],pageNumber:e,page:n}),tt("/Contents "+i+" 0 R"),tt(">>"),tt("endobj");var a=n.join("\n");return N===w&&(a+="\nQ"),Zt(i,!0),ie({data:a,filters:re(),objectId:i}),tt("endobj"),r},oe=p.__private__.putPages=function(){var t,e,n=[];for(t=1;t<=qt;t++)Rt[t].objId=Kt(),Rt[t].contentsObjId=Kt();for(t=1;t<=qt;t++)n.push(ae({number:t,data:X[t],objId:Rt[t].objId,contentsObjId:Rt[t].contentsObjId,mediaBox:Rt[t].mediaBox,cropBox:Rt[t].cropBox,bleedBox:Rt[t].bleedBox,trimBox:Rt[t].trimBox,artBox:Rt[t].artBox,userUnit:Rt[t].userUnit,rootDictionaryObjId:Qt,resourceDictionaryObjId:te}));Zt(Qt,!0),tt("<</Type /Pages");var r="/Kids [";for(e=0;e<qt;e++)r+=n[e]+" 0 R ";tt(r+"]"),tt("/Count "+qt),tt(">>"),tt("endobj"),Dt.publish("postPutPages")},se=function(t){Dt.publish("putFont",{font:t,out:tt,newObject:Jt,putStream:ie}),!0!==t.isAlreadyPutted&&(t.objectNumber=Jt(),tt("<<"),tt("/Type /Font"),tt("/BaseFont /"+At(t.postScriptName)),tt("/Subtype /Type1"),"string"==typeof t.encoding&&tt("/Encoding /"+t.encoding),tt("/FirstChar 32"),tt("/LastChar 255"),tt(">>"),tt("endobj"))},ce=function(t){t.objectNumber=Jt();var e=[];e.push({key:"Type",value:"/XObject"}),e.push({key:"Subtype",value:"/Form"}),e.push({key:"BBox",value:"["+[S(t.x),S(t.y),S(t.x+t.width),S(t.y+t.height)].join(" ")+"]"}),e.push({key:"Matrix",value:"["+t.matrix.toString()+"]"});var n=t.pages[1].join("\n");ie({data:n,additionalKeyValues:e,objectId:t.objectNumber}),tt("endobj")},he=function(t,e){e||(e=21);var n=Jt(),r=function(t,e){var n,r=[],i=1/(e-1);for(n=0;n<1;n+=i)r.push(n);if(r.push(1),0!=t[0].offset){var a={offset:0,color:t[0].color};t.unshift(a)}if(1!=t[t.length-1].offset){var o={offset:1,color:t[t.length-1].color};t.push(o)}for(var s="",c=0,h=0;h<r.length;h++){for(n=r[h];n>t[c+1].offset;)c++;var u=t[c].offset,l=(n-u)/(t[c+1].offset-u),f=t[c].color,d=t[c+1].color;s+=U(Math.round((1-l)*f[0]+l*d[0]).toString(16))+U(Math.round((1-l)*f[1]+l*d[1]).toString(16))+U(Math.round((1-l)*f[2]+l*d[2]).toString(16))}return s.trim()}(t.colors,e),i=[];i.push({key:"FunctionType",value:"0"}),i.push({key:"Domain",value:"[0.0 1.0]"}),i.push({key:"Size",value:"["+e+"]"}),i.push({key:"BitsPerSample",value:"8"}),i.push({key:"Range",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),i.push({key:"Decode",value:"[0.0 1.0 0.0 1.0 0.0 1.0]"}),ie({data:r,additionalKeyValues:i,alreadyAppliedFilters:["/ASCIIHexDecode"],objectId:n}),tt("endobj"),t.objectNumber=Jt(),tt("<< /ShadingType "+t.type),tt("/ColorSpace /DeviceRGB");var a="/Coords ["+S(parseFloat(t.coords[0]))+" "+S(parseFloat(t.coords[1]))+" ";2===t.type?a+=S(parseFloat(t.coords[2]))+" "+S(parseFloat(t.coords[3])):a+=S(parseFloat(t.coords[2]))+" "+S(parseFloat(t.coords[3]))+" "+S(parseFloat(t.coords[4]))+" "+S(parseFloat(t.coords[5])),tt(a+="]"),t.matrix&&tt("/Matrix ["+t.matrix.toString()+"]"),tt("/Function "+n+" 0 R"),tt("/Extend [true true]"),tt(">>"),tt("endobj")},ue=function(t,e){var n=Kt(),r=Jt();e.push({resourcesOid:n,objectOid:r}),t.objectNumber=r;var i=[];i.push({key:"Type",value:"/Pattern"}),i.push({key:"PatternType",value:"1"}),i.push({key:"PaintType",value:"1"}),i.push({key:"TilingType",value:"1"}),i.push({key:"BBox",value:"["+t.boundingBox.map(S).join(" ")+"]"}),i.push({key:"XStep",value:S(t.xStep)}),i.push({key:"YStep",value:S(t.yStep)}),i.push({key:"Resources",value:n+" 0 R"}),t.matrix&&i.push({key:"Matrix",value:"["+t.matrix.toString()+"]"}),ie({data:t.stream,additionalKeyValues:i,objectId:t.objectNumber}),tt("endobj")},le=function(t){for(var e in t.objectNumber=Jt(),tt("<<"),t)switch(e){case"opacity":tt("/ca "+k(t[e]));break;case"stroke-opacity":tt("/CA "+k(t[e]))}tt(">>"),tt("endobj")},fe=function(t){Zt(t.resourcesOid,!0),tt("<<"),tt("/ProcSet [/PDF /Text /ImageB /ImageC /ImageI]"),function(){for(var t in tt("/Font <<"),_t)_t.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&tt("/"+t+" "+_t[t].objectNumber+" 0 R");tt(">>")}(),function(){if(Object.keys(jt).length>0){for(var t in tt("/Shading <<"),jt)jt.hasOwnProperty(t)&&jt[t]instanceof Pt&&jt[t].objectNumber>=0&&tt("/"+t+" "+jt[t].objectNumber+" 0 R");Dt.publish("putShadingPatternDict"),tt(">>")}}(),function(t){if(Object.keys(jt).length>0){for(var e in tt("/Pattern <<"),jt)jt.hasOwnProperty(e)&&jt[e]instanceof p.TilingPattern&&jt[e].objectNumber>=0&&jt[e].objectNumber<t&&tt("/"+e+" "+jt[e].objectNumber+" 0 R");Dt.publish("putTilingPatternDict"),tt(">>")}}(t.objectOid),function(){if(Object.keys(Et).length>0){var t;for(t in tt("/ExtGState <<"),Et)Et.hasOwnProperty(t)&&Et[t].objectNumber>=0&&tt("/"+t+" "+Et[t].objectNumber+" 0 R");Dt.publish("putGStateDict"),tt(">>")}}(),function(){for(var t in tt("/XObject <<"),zt)zt.hasOwnProperty(t)&&zt[t].objectNumber>=0&&tt("/"+t+" "+zt[t].objectNumber+" 0 R");Dt.publish("putXobjectDict"),tt(">>")}(),tt(">>"),tt("endobj")},de=function(t){Ft[t.fontName]=Ft[t.fontName]||{},Ft[t.fontName][t.fontStyle]=t.id},pe=function(t,e,n,r,i){var a={id:"F"+(Object.keys(_t).length+1).toString(10),postScriptName:t,fontName:e,fontStyle:n,encoding:r,isStandardFont:i||!1,metadata:{}};return Dt.publish("addFont",{font:a,instance:this}),_t[a.id]=a,de(a),a.id},ge=p.__private__.pdfEscape=p.pdfEscape=function(t,e){return function(t,e){var n,r,i,a,o,s,c,h,u;if(i=(e=e||{}).sourceEncoding||"Unicode",o=e.outputEncoding,(e.autoencode||o)&&_t[vt].metadata&&_t[vt].metadata[i]&&_t[vt].metadata[i].encoding&&(a=_t[vt].metadata[i].encoding,!o&&_t[vt].encoding&&(o=_t[vt].encoding),!o&&a.codePages&&(o=a.codePages[0]),"string"==typeof o&&(o=a[o]),o)){for(c=!1,s=[],n=0,r=t.length;n<r;n++)(h=o[t.charCodeAt(n)])?s.push(String.fromCharCode(h)):s.push(t[n]),s[n].charCodeAt(0)>>8&&(c=!0);t=s.join("")}for(n=t.length;void 0===c&&0!==n;)t.charCodeAt(n-1)>>8&&(c=!0),n--;if(!c)return t;for(s=e.noBOM?[]:[254,255],n=0,r=t.length;n<r;n++){if((u=(h=t.charCodeAt(n))>>8)>>8)throw new Error("Character at position "+n+" of string '"+t+"' exceeds 16bits. Cannot be encoded into UCS-2 BE");s.push(u),s.push(h-(u<<8))}return String.fromCharCode.apply(void 0,s)}(t,e).replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},me=p.__private__.beginPage=function(t){X[++qt]=[],Rt[qt]={objId:0,contentsObjId:0,userUnit:Number(c),artBox:null,bleedBox:null,cropBox:null,trimBox:null,mediaBox:{bottomLeftX:0,bottomLeftY:0,topRightX:Number(t[0]),topRightY:Number(t[1])}},ye(qt),Q(X[T])},ve=function(t,e){var r,i,o;switch(n=e||n,"string"==typeof t&&(r=b(t.toLowerCase()),Array.isArray(r)&&(i=r[0],o=r[1])),Array.isArray(t)&&(i=t[0]*bt,o=t[1]*bt),isNaN(i)&&(i=a[0],o=a[1]),(i>14400||o>14400)&&($.warn("A page in a PDF can not be wider or taller than 14400 userUnit. jsPDF limits the width/height to 14400"),i=Math.min(14400,i),o=Math.min(14400,o)),a=[i,o],n.substr(0,1)){case"l":o>i&&(a=[o,i]);break;case"p":i>o&&(a=[o,i])}me(a),Ze(Je),tt(on),0!==fn&&tt(fn+" J"),0!==dn&&tt(dn+" j"),Dt.publish("addPage",{pageNumber:qt})},be=function(t){t>0&&t<=qt&&(X.splice(t,1),Rt.splice(t,1),qt--,T>qt&&(T=qt),this.setPage(T))},ye=function(t){t>0&&t<=qt&&(T=t)},we=p.__private__.getNumberOfPages=p.getNumberOfPages=function(){return X.length-1},Ne=function(t,e,n){var r,i=void 0;return n=n||{},t=void 0!==t?t:_t[vt].fontName,e=void 0!==e?e:_t[vt].fontStyle,r=t.toLowerCase(),void 0!==Ft[r]&&void 0!==Ft[r][e]?i=Ft[r][e]:void 0!==Ft[t]&&void 0!==Ft[t][e]?i=Ft[t][e]:!1===n.disableWarning&&$.warn("Unable to look up font label for font '"+t+"', '"+e+"'. Refer to getFontList() for available fonts."),i||n.noFallback||null==(i=Ft.times[e])&&(i=Ft.times.normal),i},Le=p.__private__.putInfo=function(){var t=Jt(),e=function(t){return t};for(var n in null!==l&&(e=Ce.encryptor(t,0)),tt("<<"),tt("/Producer ("+ge(e("jsPDF "+It.version))+")"),mt)mt.hasOwnProperty(n)&&mt[n]&&tt("/"+n.substr(0,1).toUpperCase()+n.substr(1)+" ("+ge(e(mt[n]))+")");tt("/CreationDate ("+ge(e(j))+")"),tt(">>"),tt("endobj")},Ae=p.__private__.putCatalog=function(t){var e=(t=t||{}).rootDictionaryObjId||Qt;switch(Jt(),tt("<<"),tt("/Type /Catalog"),tt("/Pages "+e+" 0 R"),ct||(ct="fullwidth"),ct){case"fullwidth":tt("/OpenAction [3 0 R /FitH null]");break;case"fullheight":tt("/OpenAction [3 0 R /FitV null]");break;case"fullpage":tt("/OpenAction [3 0 R /Fit]");break;case"original":tt("/OpenAction [3 0 R /XYZ null null 1]");break;default:var n=""+ct;"%"===n.substr(n.length-1)&&(ct=parseInt(ct)/100),"number"==typeof ct&&tt("/OpenAction [3 0 R /XYZ null null "+k(ct)+"]")}switch(dt||(dt="continuous"),dt){case"continuous":tt("/PageLayout /OneColumn");break;case"single":tt("/PageLayout /SinglePage");break;case"two":case"twoleft":tt("/PageLayout /TwoColumnLeft");break;case"tworight":tt("/PageLayout /TwoColumnRight")}lt&&tt("/PageMode /"+lt),Dt.publish("putCatalog"),tt(">>"),tt("endobj")},xe=p.__private__.putTrailer=function(){tt("trailer"),tt("<<"),tt("/Size "+(H+1)),tt("/Root "+H+" 0 R"),tt("/Info "+(H-1)+" 0 R"),null!==l&&tt("/Encrypt "+Ce.oid+" 0 R"),tt("/ID [ <"+B+"> <"+B+"> ]"),tt(">>")},Se=p.__private__.putHeader=function(){tt("%PDF-"+g),tt("%ºß¬à")},_e=p.__private__.putXRef=function(){var t="0000000000";tt("xref"),tt("0 "+(H+1)),tt("0000000000 65535 f ");for(var e=1;e<=H;e++)"function"==typeof W[e]?tt((t+W[e]()).slice(-10)+" 00000 n "):void 0!==W[e]?tt((t+W[e]).slice(-10)+" 00000 n "):tt("0000000000 00000 n ")},Pe=p.__private__.buildDocument=function(){H=0,G=0,V=[],W=[],Y=[],Qt=Kt(),te=Kt(),Q(V),Dt.publish("buildDocument"),Se(),oe(),function(){Dt.publish("putAdditionalObjects");for(var t=0;t<Y.length;t++){var e=Y[t];Zt(e.objId,!0),tt(e.content),tt("endobj")}Dt.publish("postPutAdditionalObjects")}(),function(){var t=[];(function(){for(var t in _t)_t.hasOwnProperty(t)&&(!1===f||!0===f&&d.hasOwnProperty(t))&&se(_t[t])})(),function(){var t;for(t in Et)Et.hasOwnProperty(t)&&le(Et[t])}(),function(){for(var t in zt)zt.hasOwnProperty(t)&&ce(zt[t])}(),function(t){var e;for(e in jt)jt.hasOwnProperty(e)&&(jt[e]instanceof Pt?he(jt[e]):jt[e]instanceof kt&&ue(jt[e],t))}(t),Dt.publish("putResources"),t.forEach(fe),fe({resourcesOid:te,objectOid:Number.MAX_SAFE_INTEGER}),Dt.publish("postPutResources")}(),null!==l&&(Ce.oid=Jt(),tt("<<"),tt("/Filter /Standard"),tt("/V "+Ce.v),tt("/R "+Ce.r),tt("/U <"+Ce.toHexString(Ce.U)+">"),tt("/O <"+Ce.toHexString(Ce.O)+">"),tt("/P "+Ce.P),tt(">>"),tt("endobj")),Le(),Ae();var t=G;return _e(),xe(),tt("startxref"),tt(""+t),tt("%%EOF"),Q(X[T]),V.join("\n")},ke=p.__private__.getBlob=function(t){return new Blob([nt(t)],{type:"application/pdf"})},Ie=p.output=p.__private__.output=(Xt=function(t,e){switch("string"==typeof(e=e||{})?e={filename:e}:e.filename=e.filename||"generated.pdf",t){case void 0:return Pe();case"save":p.save(e.filename);break;case"arraybuffer":return nt(Pe());case"blob":return ke(Pe());case"bloburi":case"bloburl":if(void 0!==K.URL&&"function"==typeof K.URL.createObjectURL)return K.URL&&K.URL.createObjectURL(ke(Pe()))||void 0;$.warn("bloburl is not supported by your system, because URL.createObjectURL is not supported by your browser.");break;case"datauristring":case"dataurlstring":var n="",r=Pe();try{n=rt(r)}catch(t){n=rt(unescape(encodeURIComponent(r)))}return"data:application/pdf;filename="+e.filename+";base64,"+n;case"pdfobjectnewwindow":if("[object Window]"===Object.prototype.toString.call(K)){var i="https://cdnjs.cloudflare.com/ajax/libs/pdfobject/2.1.1/pdfobject.min.js",a=' integrity="sha512-4ze/a9/4jqu+tX9dfOqJYSvyYd5M6qum/3HpCLr+/Jqf0whc37VUbkpNGHR7/8pSnCFw47T1fmIpwBV7UySh3g==" crossorigin="anonymous"';e.pdfObjectUrl&&(i=e.pdfObjectUrl,a="");var o='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><script src="'+i+'"'+a+'><\/script><script >PDFObject.embed("'+this.output("dataurlstring")+'", '+JSON.stringify(e)+");<\/script></body></html>",s=K.open();return null!==s&&s.document.write(o),s}throw new Error("The option pdfobjectnewwindow just works in a browser-environment.");case"pdfjsnewwindow":if("[object Window]"===Object.prototype.toString.call(K)){var c='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe id="pdfViewer" src="'+(e.pdfJsUrl||"examples/PDF.js/web/viewer.html")+"?file=&downloadName="+e.filename+'" width="500px" height="400px" /></body></html>',h=K.open();if(null!==h){h.document.write(c);var u=this;h.document.documentElement.querySelector("#pdfViewer").onload=function(){h.document.title=e.filename,h.document.documentElement.querySelector("#pdfViewer").contentWindow.PDFViewerApplication.open(u.output("bloburl"))}}return h}throw new Error("The option pdfjsnewwindow just works in a browser-environment.");case"dataurlnewwindow":if("[object Window]"!==Object.prototype.toString.call(K))throw new Error("The option dataurlnewwindow just works in a browser-environment.");var l='<html><style>html, body { padding: 0; margin: 0; } iframe { width: 100%; height: 100%; border: 0;}  </style><body><iframe src="'+this.output("datauristring",e)+'"></iframe></body></html>',f=K.open();if(null!==f&&(f.document.write(l),f.document.title=e.filename),f||"undefined"==typeof safari)return f;break;case"datauri":case"dataurl":return K.document.location.href=this.output("datauristring",e);default:return null}},Xt.foo=function(){try{return Xt.apply(this,arguments)}catch(n){var t=n.stack||"";~t.indexOf(" at ")&&(t=t.split(" at ")[1]);var e="Error in function "+t.split("\n")[0].split("<")[0]+": "+n.message;if(!K.console)throw new Error(e);K.console.error(e,n),K.alert&&alert(e)}},Xt.foo.bar=Xt,Xt.foo),Fe=function(t){return!0===Array.isArray(Tt)&&Tt.indexOf(t)>-1};switch(i){case"pt":bt=1;break;case"mm":bt=72/25.4;break;case"cm":bt=72/2.54;break;case"in":bt=72;break;case"px":bt=1==Fe("px_scaling")?.75:96/72;break;case"pc":case"em":bt=12;break;case"ex":bt=6;break;default:if("number"!=typeof i)throw new Error("Invalid unit: "+i);bt=i}var Ce=null;R(),O();var je=p.__private__.getPageInfo=p.getPageInfo=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfo");return{objId:Rt[t].objId,pageNumber:t,pageContext:Rt[t]}},Be=p.__private__.getPageInfoByObjId=function(t){if(isNaN(t)||t%1!=0)throw new Error("Invalid argument passed to jsPDF.getPageInfoByObjId");for(var e in Rt)if(Rt[e].objId===t)break;return je(e)},Ee=p.__private__.getCurrentPageInfo=p.getCurrentPageInfo=function(){return{objId:Rt[T].objId,pageNumber:T,pageContext:Rt[T]}};p.addPage=function(){return ve.apply(this,arguments),this},p.setPage=function(){return ye.apply(this,arguments),Q.call(this,X[T]),this},p.insertPage=function(t){return this.addPage(),this.movePage(T,t),this},p.movePage=function(t,e){var n,r;if(t>e){n=X[t],r=Rt[t];for(var i=t;i>e;i--)X[i]=X[i-1],Rt[i]=Rt[i-1];X[e]=n,Rt[e]=r,this.setPage(e)}else if(t<e){n=X[t],r=Rt[t];for(var a=t;a<e;a++)X[a]=X[a+1],Rt[a]=Rt[a+1];X[e]=n,Rt[e]=r,this.setPage(e)}return this},p.deletePage=function(){return be.apply(this,arguments),this},p.__private__.text=p.text=function(t,e,n,i,a){var o,s,c,h,u,l,f,p,g,m=(i=i||{}).scope||this;if("number"==typeof t&&"number"==typeof e&&("string"==typeof n||Array.isArray(n))){var v=n;n=e,e=t,t=v}if(arguments[3]instanceof Wt==0?(c=arguments[4],h=arguments[5],"object"===(0,r.A)(f=arguments[3])&&null!==f||("string"==typeof c&&(h=c,c=null),"string"==typeof f&&(h=f,f=null),"number"==typeof f&&(c=f,f=null),i={flags:f,angle:c,align:h})):(_("The transform parameter of text() with a Matrix value"),g=a),isNaN(e)||isNaN(n)||null==t)throw new Error("Invalid arguments passed to jsPDF.text");if(0===t.length)return m;var b,y="",L="number"==typeof i.lineHeightFactor?i.lineHeightFactor:Xe,A=m.internal.scaleFactor;function x(t){return t=t.split("\t").join(Array(i.TabLen||9).join(" ")),ge(t,f)}function P(t){for(var e,n=t.concat(),r=[],i=n.length;i--;)"string"==typeof(e=n.shift())?r.push(e):Array.isArray(t)&&(1===e.length||void 0===e[1]&&void 0===e[2])?r.push(e[0]):r.push([e[0],e[1],e[2]]);return r}function k(t,e){var n;if("string"==typeof t)n=e(t)[0];else if(Array.isArray(t)){for(var r,i,a=t.concat(),o=[],s=a.length;s--;)"string"==typeof(r=a.shift())?o.push(e(r)[0]):Array.isArray(r)&&"string"==typeof r[0]&&(i=e(r[0],r[1],r[2]),o.push([i[0],i[1],i[2]]));n=o}return n}var I=!1,C=!0;if("string"==typeof t)I=!0;else if(Array.isArray(t)){var j=t.concat();s=[];for(var B,E=j.length;E--;)("string"!=typeof(B=j.shift())||Array.isArray(B)&&"string"!=typeof B[0])&&(C=!1);I=C}if(!1===I)throw new Error('Type of text must be string or Array. "'+t+'" is not recognized.');"string"==typeof t&&(t=t.match(/[\r?\n]/)?t.split(/\r\n|\r|\n/g):[t]);var O=st/m.internal.scaleFactor,M=O*(L-1);switch(i.baseline){case"bottom":n-=M;break;case"top":n+=O-M;break;case"hanging":n+=O-2*M;break;case"middle":n+=O/2-M}if((l=i.maxWidth||0)>0&&("string"==typeof t?t=m.splitTextToSize(t,l):"[object Array]"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(m.splitTextToSize(e,l))}),[]))),o={text:t,x:e,y:n,options:i,mutex:{pdfEscape:ge,activeFontKey:vt,fonts:_t,activeFontSize:st}},Dt.publish("preProcessText",o),t=o.text,c=(i=o.options).angle,g instanceof Wt==0&&c&&"number"==typeof c){c*=Math.PI/180,0===i.rotationDirection&&(c=-c),N===w&&(c=-c);var q=Math.cos(c),R=Math.sin(c);g=new Wt(q,R,-R,q,0,0)}else c&&c instanceof Wt&&(g=c);N!==w||g||(g=Gt),void 0!==(u=i.charSpace||un)&&(y+=S(F(u))+" Tc\n",this.setCharSpace(this.getCharSpace()||0)),void 0!==(p=i.horizontalScale)&&(y+=S(100*p)+" Tz\n"),i.lang;var D=-1,T=void 0!==i.renderingMode?i.renderingMode:i.stroke,z=m.internal.getCurrentPageInfo().pageContext;switch(T){case 0:case!1:case"fill":D=0;break;case 1:case!0:case"stroke":D=1;break;case 2:case"fillThenStroke":D=2;break;case 3:case"invisible":D=3;break;case 4:case"fillAndAddForClipping":D=4;break;case 5:case"strokeAndAddPathForClipping":D=5;break;case 6:case"fillThenStrokeAndAddToPathForClipping":D=6;break;case 7:case"addToPathForClipping":D=7}var U=void 0!==z.usedRenderingMode?z.usedRenderingMode:-1;-1!==D?y+=D+" Tr\n":-1!==U&&(y+="0 Tr\n"),-1!==D&&(z.usedRenderingMode=D),h=i.align||"left";var H,W=st*L,V=m.internal.pageSize.getWidth(),G=_t[vt];u=i.charSpace||un,l=i.maxWidth||0,f=Object.assign({autoencode:!0,noBOM:!0},i.flags);var Y=[],X=function(t){return m.getStringUnitWidth(t,{font:G,charSpace:u,fontSize:st,doKerning:!1})*st/A};if("[object Array]"===Object.prototype.toString.call(t)){var J;s=P(t),"left"!==h&&(H=s.map(X));var K,Z=0;if("right"===h){e-=H[0],t=[],E=s.length;for(var $=0;$<E;$++)0===$?(K=en(e),J=nn(n)):(K=F(Z-H[$]),J=-W),t.push([s[$],K,J]),Z=H[$]}else if("center"===h){e-=H[0]/2,t=[],E=s.length;for(var Q=0;Q<E;Q++)0===Q?(K=en(e),J=nn(n)):(K=F((Z-H[Q])/2),J=-W),t.push([s[Q],K,J]),Z=H[Q]}else if("left"===h){t=[],E=s.length;for(var et=0;et<E;et++)t.push(s[et])}else if("justify"===h&&"Identity-H"===G.encoding){t=[],E=s.length,l=0!==l?l:V;for(var nt=0,rt=0;rt<E;rt++)if(J=0===rt?nn(n):-W,K=0===rt?en(e):nt,rt<E-1){var it=F((l-H[rt])/(s[rt].split(" ").length-1)),at=s[rt].split(" ");t.push([at[0]+" ",K,J]),nt=0;for(var ot=1;ot<at.length;ot++){var ct=(X(at[ot-1]+" "+at[ot])-X(at[ot]))*A+it;ot==at.length-1?t.push([at[ot],ct,0]):t.push([at[ot]+" ",ct,0]),nt-=ct}}else t.push([s[rt],K,J]);t.push(["",nt,0])}else{if("justify"!==h)throw new Error('Unrecognized alignment option, use "left", "center", "right" or "justify".');for(t=[],E=s.length,l=0!==l?l:V,rt=0;rt<E;rt++)J=0===rt?nn(n):-W,K=0===rt?en(e):0,rt<E-1?Y.push(S(F((l-H[rt])/(s[rt].split(" ").length-1)))):Y.push(0),t.push([s[rt],K,J])}}!0===("boolean"==typeof i.R2L?i.R2L:ut)&&(t=k(t,(function(t,e,n){return[t.split("").reverse().join(""),e,n]}))),o={text:t,x:e,y:n,options:i,mutex:{pdfEscape:ge,activeFontKey:vt,fonts:_t,activeFontSize:st}},Dt.publish("postProcessText",o),t=o.text,b=o.mutex.isHex||!1;var ht=_t[vt].encoding;"WinAnsiEncoding"!==ht&&"StandardEncoding"!==ht||(t=k(t,(function(t,e,n){return[x(t),e,n]}))),s=P(t),t=[];for(var lt,ft,dt,pt=Array.isArray(s[0])?1:0,gt="",mt=function(t,e,n){var r="";return n instanceof Wt?(n="number"==typeof i.angle?Vt(n,new Wt(1,0,0,1,t,e)):Vt(new Wt(1,0,0,1,t,e),n),N===w&&(n=Vt(new Wt(1,0,0,-1,0,0),n)),r=n.join(" ")+" Tm\n"):r=S(t)+" "+S(e)+" Td\n",r},bt=0;bt<s.length;bt++){switch(gt="",pt){case 1:dt=(b?"<":"(")+s[bt][0]+(b?">":")"),lt=parseFloat(s[bt][1]),ft=parseFloat(s[bt][2]);break;case 0:dt=(b?"<":"(")+s[bt]+(b?">":")"),lt=en(e),ft=nn(n)}void 0!==Y&&void 0!==Y[bt]&&(gt=Y[bt]+" Tw\n"),0===bt?t.push(gt+mt(lt,ft,g)+dt):0===pt?t.push(gt+dt):1===pt&&t.push(gt+mt(lt,ft,g)+dt)}t=0===pt?t.join(" Tj\nT* "):t.join(" Tj\n"),t+=" Tj\n";var yt="BT\n/";return yt+=vt+" "+st+" Tf\n",yt+=S(st*L)+" TL\n",yt+=cn+"\n",yt+=y,yt+=t,tt(yt+="ET"),d[vt]=!0,m};var Oe=p.__private__.clip=p.clip=function(t){return tt("evenodd"===t?"W*":"W"),this};p.clipEvenOdd=function(){return Oe("evenodd")},p.__private__.discardPath=p.discardPath=function(){return tt("n"),this};var Me=p.__private__.isValidStyle=function(t){var e=!1;return-1!==[void 0,null,"S","D","F","DF","FD","f","f*","B","B*","n"].indexOf(t)&&(e=!0),e};p.__private__.setDefaultPathOperation=p.setDefaultPathOperation=function(t){return Me(t)&&(u=t),this};var qe=p.__private__.getStyle=p.getStyle=function(t){var e=u;switch(t){case"D":case"S":e="S";break;case"F":e="f";break;case"FD":case"DF":e="B";break;case"f":case"f*":case"B":case"B*":e=t}return e},Re=p.close=function(){return tt("h"),this};p.stroke=function(){return tt("S"),this},p.fill=function(t){return De("f",t),this},p.fillEvenOdd=function(t){return De("f*",t),this},p.fillStroke=function(t){return De("B",t),this},p.fillStrokeEvenOdd=function(t){return De("B*",t),this};var De=function(t,e){"object"===(0,r.A)(e)?Ue(e,t):tt(t)},Te=function(t){null===t||N===w&&void 0===t||(t=qe(t),tt(t))};function ze(t,e,n,r,i){var a=new kt(e||this.boundingBox,n||this.xStep,r||this.yStep,this.gState,i||this.matrix);a.stream=this.stream;var o=t+"$$"+this.cloneIndex+++"$$";return Yt(o,a),a}var Ue=function(t,e){var n=Bt[t.key],r=jt[n];if(r instanceof Pt)tt("q"),tt(He(e)),r.gState&&p.setGState(r.gState),tt(t.matrix.toString()+" cm"),tt("/"+n+" sh"),tt("Q");else if(r instanceof kt){var i=new Wt(1,0,0,-1,0,Ln());t.matrix&&(i=i.multiply(t.matrix||Gt),n=ze.call(r,t.key,t.boundingBox,t.xStep,t.yStep,i).id),tt("q"),tt("/Pattern cs"),tt("/"+n+" scn"),r.gState&&p.setGState(r.gState),tt(e),tt("Q")}},He=function(t){switch(t){case"f":case"F":case"n":return"W n";case"f*":return"W* n";case"B":case"S":return"W S";case"B*":return"W* S"}},We=p.moveTo=function(t,e){return tt(S(F(t))+" "+S(C(e))+" m"),this},Ve=p.lineTo=function(t,e){return tt(S(F(t))+" "+S(C(e))+" l"),this},Ge=p.curveTo=function(t,e,n,r,i,a){return tt([S(F(t)),S(C(e)),S(F(n)),S(C(r)),S(F(i)),S(C(a)),"c"].join(" ")),this};p.__private__.line=p.line=function(t,e,n,r,i){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||!Me(i))throw new Error("Invalid arguments passed to jsPDF.line");return N===y?this.lines([[n-t,r-e]],t,e,[1,1],i||"S"):this.lines([[n-t,r-e]],t,e,[1,1]).stroke()},p.__private__.lines=p.lines=function(t,e,n,r,i,a){var o,s,c,h,u,l,f,d,p,g,m,v;if("number"==typeof t&&(v=n,n=e,e=t,t=v),r=r||[1,1],a=a||!1,isNaN(e)||isNaN(n)||!Array.isArray(t)||!Array.isArray(r)||!Me(i)||"boolean"!=typeof a)throw new Error("Invalid arguments passed to jsPDF.lines");for(We(e,n),o=r[0],s=r[1],h=t.length,g=e,m=n,c=0;c<h;c++)2===(u=t[c]).length?(g=u[0]*o+g,m=u[1]*s+m,Ve(g,m)):(l=u[0]*o+g,f=u[1]*s+m,d=u[2]*o+g,p=u[3]*s+m,g=u[4]*o+g,m=u[5]*s+m,Ge(l,f,d,p,g,m));return a&&Re(),Te(i),this},p.path=function(t){for(var e=0;e<t.length;e++){var n=t[e],r=n.c;switch(n.op){case"m":We(r[0],r[1]);break;case"l":Ve(r[0],r[1]);break;case"c":Ge.apply(this,r);break;case"h":Re()}}return this},p.__private__.rect=p.rect=function(t,e,n,r,i){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||!Me(i))throw new Error("Invalid arguments passed to jsPDF.rect");return N===y&&(r=-r),tt([S(F(t)),S(C(e)),S(F(n)),S(F(r)),"re"].join(" ")),Te(i),this},p.__private__.triangle=p.triangle=function(t,e,n,r,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||isNaN(i)||isNaN(a)||!Me(o))throw new Error("Invalid arguments passed to jsPDF.triangle");return this.lines([[n-t,r-e],[i-n,a-r],[t-i,e-a]],t,e,[1,1],o,!0),this},p.__private__.roundedRect=p.roundedRect=function(t,e,n,r,i,a,o){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||isNaN(i)||isNaN(a)||!Me(o))throw new Error("Invalid arguments passed to jsPDF.roundedRect");var s=4/3*(Math.SQRT2-1);return i=Math.min(i,.5*n),a=Math.min(a,.5*r),this.lines([[n-2*i,0],[i*s,0,i,a-a*s,i,a],[0,r-2*a],[0,a*s,-i*s,a,-i,a],[2*i-n,0],[-i*s,0,-i,-a*s,-i,-a],[0,2*a-r],[0,-a*s,i*s,-a,i,-a]],t+i,e,[1,1],o,!0),this},p.__private__.ellipse=p.ellipse=function(t,e,n,r,i){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||!Me(i))throw new Error("Invalid arguments passed to jsPDF.ellipse");var a=4/3*(Math.SQRT2-1)*n,o=4/3*(Math.SQRT2-1)*r;return We(t+n,e),Ge(t+n,e-o,t+a,e-r,t,e-r),Ge(t-a,e-r,t-n,e-o,t-n,e),Ge(t-n,e+o,t-a,e+r,t,e+r),Ge(t+a,e+r,t+n,e+o,t+n,e),Te(i),this},p.__private__.circle=p.circle=function(t,e,n,r){if(isNaN(t)||isNaN(e)||isNaN(n)||!Me(r))throw new Error("Invalid arguments passed to jsPDF.circle");return this.ellipse(t,e,n,n,r)},p.setFont=function(t,e,n){return n&&(e=x(e,n)),vt=Ne(t,e,{disableWarning:!1}),this};var Ye=p.__private__.getFont=p.getFont=function(){return _t[Ne.apply(p,arguments)]};p.__private__.getFontList=p.getFontList=function(){var t,e,n={};for(t in Ft)if(Ft.hasOwnProperty(t))for(e in n[t]=[],Ft[t])Ft[t].hasOwnProperty(e)&&n[t].push(e);return n},p.addFont=function(t,e,n,r,i){var a=["StandardEncoding","MacRomanEncoding","Identity-H","WinAnsiEncoding"];return arguments[3]&&-1!==a.indexOf(arguments[3])?i=arguments[3]:arguments[3]&&-1==a.indexOf(arguments[3])&&(n=x(n,r)),pe.call(this,t,e,n,i=i||"Identity-H")};var Xe,Je=t.lineWidth||.200025,Ke=p.__private__.getLineWidth=p.getLineWidth=function(){return Je},Ze=p.__private__.setLineWidth=p.setLineWidth=function(t){return Je=t,tt(S(F(t))+" w"),this};p.__private__.setLineDash=It.API.setLineDash=It.API.setLineDashPattern=function(t,e){if(t=t||[],e=e||0,isNaN(e)||!Array.isArray(t))throw new Error("Invalid arguments passed to jsPDF.setLineDash");return t=t.map((function(t){return S(F(t))})).join(" "),e=S(F(e)),tt("["+t+"] "+e+" d"),this};var $e=p.__private__.getLineHeight=p.getLineHeight=function(){return st*Xe};p.__private__.getLineHeight=p.getLineHeight=function(){return st*Xe};var Qe=p.__private__.setLineHeightFactor=p.setLineHeightFactor=function(t){return"number"==typeof(t=t||1.15)&&(Xe=t),this},tn=p.__private__.getLineHeightFactor=p.getLineHeightFactor=function(){return Xe};Qe(t.lineHeight);var en=p.__private__.getHorizontalCoordinate=function(t){return F(t)},nn=p.__private__.getVerticalCoordinate=function(t){return N===w?t:Rt[T].mediaBox.topRightY-Rt[T].mediaBox.bottomLeftY-F(t)},rn=p.__private__.getHorizontalCoordinateString=p.getHorizontalCoordinateString=function(t){return S(en(t))},an=p.__private__.getVerticalCoordinateString=p.getVerticalCoordinateString=function(t){return S(nn(t))},on=t.strokeColor||"0 G";p.__private__.getStrokeColor=p.getDrawColor=function(){return ee(on)},p.__private__.setStrokeColor=p.setDrawColor=function(t,e,n,r){return on=ne({ch1:t,ch2:e,ch3:n,ch4:r,pdfColorType:"draw",precision:2}),tt(on),this};var sn=t.fillColor||"0 g";p.__private__.getFillColor=p.getFillColor=function(){return ee(sn)},p.__private__.setFillColor=p.setFillColor=function(t,e,n,r){return sn=ne({ch1:t,ch2:e,ch3:n,ch4:r,pdfColorType:"fill",precision:2}),tt(sn),this};var cn=t.textColor||"0 g",hn=p.__private__.getTextColor=p.getTextColor=function(){return ee(cn)};p.__private__.setTextColor=p.setTextColor=function(t,e,n,r){return cn=ne({ch1:t,ch2:e,ch3:n,ch4:r,pdfColorType:"text",precision:3}),this};var un=t.charSpace,ln=p.__private__.getCharSpace=p.getCharSpace=function(){return parseFloat(un||0)};p.__private__.setCharSpace=p.setCharSpace=function(t){if(isNaN(t))throw new Error("Invalid argument passed to jsPDF.setCharSpace");return un=t,this};var fn=0;p.CapJoinStyles={0:0,butt:0,but:0,miter:0,1:1,round:1,rounded:1,circle:1,2:2,projecting:2,project:2,square:2,bevel:2},p.__private__.setLineCap=p.setLineCap=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line cap style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return fn=e,tt(e+" J"),this};var dn=0;p.__private__.setLineJoin=p.setLineJoin=function(t){var e=p.CapJoinStyles[t];if(void 0===e)throw new Error("Line join style of '"+t+"' is not recognized. See or extend .CapJoinStyles property for valid styles");return dn=e,tt(e+" j"),this},p.__private__.setLineMiterLimit=p.__private__.setMiterLimit=p.setLineMiterLimit=p.setMiterLimit=function(t){if(t=t||0,isNaN(t))throw new Error("Invalid argument passed to jsPDF.setLineMiterLimit");return tt(S(F(t))+" M"),this},p.GState=St,p.setGState=function(t){(t="string"==typeof t?Et[Ot[t]]:pn(null,t)).equals(Mt)||(tt("/"+t.id+" gs"),Mt=t)};var pn=function(t,e){if(!t||!Ot[t]){var n=!1;for(var r in Et)if(Et.hasOwnProperty(r)&&Et[r].equals(e)){n=!0;break}if(n)e=Et[r];else{var i="GS"+(Object.keys(Et).length+1).toString(10);Et[i]=e,e.id=i}return t&&(Ot[t]=e.id),Dt.publish("addGState",e),e}};p.addGState=function(t,e){return pn(t,e),this},p.saveGraphicsState=function(){return tt("q"),Ct.push({key:vt,size:st,color:cn}),this},p.restoreGraphicsState=function(){tt("Q");var t=Ct.pop();return vt=t.key,st=t.size,cn=t.color,Mt=null,this},p.setCurrentTransformationMatrix=function(t){return tt(t.toString()+" cm"),this},p.comment=function(t){return tt("#"+t),this};var gn=function(t,e){var n=t||0;Object.defineProperty(this,"x",{enumerable:!0,get:function(){return n},set:function(t){isNaN(t)||(n=parseFloat(t))}});var r=e||0;Object.defineProperty(this,"y",{enumerable:!0,get:function(){return r},set:function(t){isNaN(t)||(r=parseFloat(t))}});var i="pt";return Object.defineProperty(this,"type",{enumerable:!0,get:function(){return i},set:function(t){i=t.toString()}}),this},mn=function(t,e,n,r){gn.call(this,t,e),this.type="rect";var i=n||0;Object.defineProperty(this,"w",{enumerable:!0,get:function(){return i},set:function(t){isNaN(t)||(i=parseFloat(t))}});var a=r||0;return Object.defineProperty(this,"h",{enumerable:!0,get:function(){return a},set:function(t){isNaN(t)||(a=parseFloat(t))}}),this},vn=function(){this.page=qt,this.currentPage=T,this.pages=X.slice(0),this.pagesContext=Rt.slice(0),this.x=yt,this.y=wt,this.matrix=Nt,this.width=wn(T),this.height=Ln(T),this.outputDestination=Z,this.id="",this.objectNumber=-1};vn.prototype.restore=function(){qt=this.page,T=this.currentPage,Rt=this.pagesContext,X=this.pages,yt=this.x,wt=this.y,Nt=this.matrix,Nn(T,this.width),An(T,this.height),Z=this.outputDestination};var bn=function(t,e,n,r,i){Ht.push(new vn),qt=T=0,X=[],yt=t,wt=e,Nt=i,me([n,r])};for(var yn in p.beginFormObject=function(t,e,n,r,i){return bn(t,e,n,r,i),this},p.endFormObject=function(t){return function(t){if(Ut[t])Ht.pop().restore();else{var e=new vn,n="Xo"+(Object.keys(zt).length+1).toString(10);e.id=n,Ut[t]=n,zt[n]=e,Dt.publish("addFormObject",e),Ht.pop().restore()}}(t),this},p.doFormObject=function(t,e){var n=zt[Ut[t]];return tt("q"),tt(e.toString()+" cm"),tt("/"+n.id+" Do"),tt("Q"),this},p.getFormObject=function(t){var e=zt[Ut[t]];return{x:e.x,y:e.y,width:e.width,height:e.height,matrix:e.matrix}},p.save=function(t,e){return t=t||"generated.pdf",(e=e||{}).returnPromise=e.returnPromise||!1,!1===e.returnPromise?(it(ke(Pe()),t),"function"==typeof it.unload&&K.setTimeout&&setTimeout(it.unload,911),this):new Promise((function(e,n){try{var r=it(ke(Pe()),t);"function"==typeof it.unload&&K.setTimeout&&setTimeout(it.unload,911),e(r)}catch(t){n(t.message)}}))},It.API)It.API.hasOwnProperty(yn)&&("events"===yn&&It.API.events.length?function(t,e){var n,r,i;for(i=e.length-1;-1!==i;i--)n=e[i][0],r=e[i][1],t.subscribe.apply(t,[n].concat("function"==typeof r?[r]:r))}(Dt,It.API.events):p[yn]=It.API[yn]);var wn=p.getPageWidth=function(t){return(Rt[t=t||T].mediaBox.topRightX-Rt[t].mediaBox.bottomLeftX)/bt},Nn=p.setPageWidth=function(t,e){Rt[t].mediaBox.topRightX=e*bt+Rt[t].mediaBox.bottomLeftX},Ln=p.getPageHeight=function(t){return(Rt[t=t||T].mediaBox.topRightY-Rt[t].mediaBox.bottomLeftY)/bt},An=p.setPageHeight=function(t,e){Rt[t].mediaBox.topRightY=e*bt+Rt[t].mediaBox.bottomLeftY};return p.internal={pdfEscape:ge,getStyle:qe,getFont:Ye,getFontSize:ht,getCharSpace:ln,getTextColor:hn,getLineHeight:$e,getLineHeightFactor:tn,getLineWidth:Ke,write:et,getHorizontalCoordinate:en,getVerticalCoordinate:nn,getCoordinateString:rn,getVerticalCoordinateString:an,collections:{},newObject:Jt,newAdditionalObject:$t,newObjectDeferred:Kt,newObjectDeferredBegin:Zt,getFilters:re,putStream:ie,events:Dt,scaleFactor:bt,pageSize:{getWidth:function(){return wn(T)},setWidth:function(t){Nn(T,t)},getHeight:function(){return Ln(T)},setHeight:function(t){An(T,t)}},encryptionOptions:l,encryption:Ce,getEncryptor:function(t){return null!==l?Ce.encryptor(t,0):function(t){return t}},output:Ie,getNumberOfPages:we,pages:X,out:tt,f2:k,f3:I,getPageInfo:je,getPageInfoByObjId:Be,getCurrentPageInfo:Ee,getPDFVersion:m,Point:gn,Rectangle:mn,Matrix:Wt,hasHotfix:Fe},Object.defineProperty(p.internal.pageSize,"width",{get:function(){return wn(T)},set:function(t){Nn(T,t)},enumerable:!0,configurable:!0}),Object.defineProperty(p.internal.pageSize,"height",{get:function(){return Ln(T)},set:function(t){An(T,t)},enumerable:!0,configurable:!0}),function(t){for(var e=0,n=ot.length;e<n;e++){var r=pe.call(this,t[e][0],t[e][1],t[e][2],ot[e][3],!0);!1===f&&(d[r]=!0);var i=t[e][0].split("-");de({id:r,fontName:i[0],fontStyle:i[1]||""})}Dt.publish("addFonts",{fonts:_t,dictionary:Ft})}.call(p,ot),vt="F1",ve(a,n),Dt.publish("initialized"),p}Lt.prototype.lsbFirstWord=function(t){return String.fromCharCode(255&t,t>>8&255,t>>16&255,t>>24&255)},Lt.prototype.toHexString=function(t){return t.split("").map((function(t){return("0"+(255&t.charCodeAt(0)).toString(16)).slice(-2)})).join("")},Lt.prototype.hexToBytes=function(t){for(var e=[],n=0;n<t.length;n+=2)e.push(String.fromCharCode(parseInt(t.substr(n,2),16)));return e.join("")},Lt.prototype.processOwnerPassword=function(t,e){return wt(vt(e).substr(0,5),t)},Lt.prototype.encryptor=function(t,e){var n=vt(this.encryptionKey+String.fromCharCode(255&t,t>>8&255,t>>16&255,255&e,e>>8&255)).substr(0,10);return function(t){return wt(n,t)}},St.prototype.equals=function(t){var e,n="id,objectNumber,equals";if(!t||(0,r.A)(t)!==(0,r.A)(this))return!1;var i=0;for(e in this)if(!(n.indexOf(e)>=0)){if(this.hasOwnProperty(e)&&!t.hasOwnProperty(e))return!1;if(this[e]!==t[e])return!1;i++}for(e in t)t.hasOwnProperty(e)&&n.indexOf(e)<0&&i--;return 0===i},It.API={events:[]},It.version="2.5.2";var Ft=It.API,Ct=1,jt=function(t){return t.replace(/\\/g,"\\\\").replace(/\(/g,"\\(").replace(/\)/g,"\\)")},Bt=function(t){return t.replace(/\\\\/g,"\\").replace(/\\\(/g,"(").replace(/\\\)/g,")")},Et=function(t){return t.toFixed(2)},Ot=function(t){return t.toFixed(5)};Ft.__acroform__={};var Mt=function(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t},qt=function(t){return t*Ct},Rt=function(t){var e=new te,n=pe.internal.getHeight(t)||0,r=pe.internal.getWidth(t)||0;return e.BBox=[0,0,Number(Et(r)),Number(Et(n))],e},Dt=Ft.__acroform__.setBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBit");return t|1<<e},Tt=Ft.__acroform__.clearBit=function(t,e){if(t=t||0,e=e||0,isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBit");return t&~(1<<e)},zt=Ft.__acroform__.getBit=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBit");return t&1<<e?1:0},Ut=Ft.__acroform__.getBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.getBitForPdf");return zt(t,e-1)},Ht=Ft.__acroform__.setBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.setBitForPdf");return Dt(t,e-1)},Wt=Ft.__acroform__.clearBitForPdf=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid arguments passed to jsPDF.API.__acroform__.clearBitForPdf");return Tt(t,e-1)},Vt=Ft.__acroform__.calculateCoordinates=function(t,e){var n=e.internal.getHorizontalCoordinate,r=e.internal.getVerticalCoordinate,i=t[0],a=t[1],o=t[2],s=t[3],c={};return c.lowerLeft_X=n(i)||0,c.lowerLeft_Y=r(a+s)||0,c.upperRight_X=n(i+o)||0,c.upperRight_Y=r(a)||0,[Number(Et(c.lowerLeft_X)),Number(Et(c.lowerLeft_Y)),Number(Et(c.upperRight_X)),Number(Et(c.upperRight_Y))]},Gt=function(t){if(t.appearanceStreamContent)return t.appearanceStreamContent;if(t.V||t.DV){var e=[],n=t._V||t.DV,r=Yt(t,n),i=t.scope.internal.getFont(t.fontName,t.fontStyle).id;e.push("/Tx BMC"),e.push("q"),e.push("BT"),e.push(t.scope.__private__.encodeColorString(t.color)),e.push("/"+i+" "+Et(r.fontSize)+" Tf"),e.push("1 0 0 1 0 0 Tm"),e.push(r.text),e.push("ET"),e.push("Q"),e.push("EMC");var a=Rt(t);return a.scope=t.scope,a.stream=e.join("\n"),a}},Yt=function(t,e){var n=0===t.fontSize?t.maxFontSize:t.fontSize,r={text:"",fontSize:""},i=(e=")"==(e="("==e.substr(0,1)?e.substr(1):e).substr(e.length-1)?e.substr(0,e.length-1):e).split(" ");i=t.multiline?i.map((function(t){return t.split("\n")})):i.map((function(t){return[t]}));var a=n,o=pe.internal.getHeight(t)||0;o=o<0?-o:o;var s=pe.internal.getWidth(t)||0;s=s<0?-s:s;var c=function(e,n,r){if(e+1<i.length){var a=n+" "+i[e+1][0];return Xt(a,t,r).width<=s-4}return!1};a++;t:for(;a>0;){e="",a--;var h,u,l=Xt("3",t,a).height,f=t.multiline?o-a:(o-l)/2,d=f+=2,p=0,g=0,m=0;if(a<=0){e="(...) Tj\n",e+="% Width of Text: "+Xt(e,t,a=12).width+", FieldWidth:"+s+"\n";break}for(var v="",b=0,y=0;y<i.length;y++)if(i.hasOwnProperty(y)){var w=!1;if(1!==i[y].length&&m!==i[y].length-1){if((l+2)*(b+2)+2>o)continue t;v+=i[y][m],w=!0,g=y,y--}else{v=" "==(v+=i[y][m]+" ").substr(v.length-1)?v.substr(0,v.length-1):v;var N=parseInt(y),L=c(N,v,a),A=y>=i.length-1;if(L&&!A){v+=" ",m=0;continue}if(L||A){if(A)g=N;else if(t.multiline&&(l+2)*(b+2)+2>o)continue t}else{if(!t.multiline)continue t;if((l+2)*(b+2)+2>o)continue t;g=N}}for(var x="",S=p;S<=g;S++){var _=i[S];if(t.multiline){if(S===g){x+=_[m]+" ",m=(m+1)%_.length;continue}if(S===p){x+=_[_.length-1]+" ";continue}}x+=_[0]+" "}switch(x=" "==x.substr(x.length-1)?x.substr(0,x.length-1):x,u=Xt(x,t,a).width,t.textAlign){case"right":h=s-u-2;break;case"center":h=(s-u)/2;break;default:h=2}e+=Et(h)+" "+Et(d)+" Td\n",e+="("+jt(x)+") Tj\n",e+=-Et(h)+" 0 Td\n",d=-(a+2),u=0,p=w?g:g+1,b++,v=""}break}return r.text=e,r.fontSize=a,r},Xt=function(t,e,n){var r=e.scope.internal.getFont(e.fontName,e.fontStyle),i=e.scope.getStringUnitWidth(t,{font:r,fontSize:parseFloat(n),charSpace:0})*parseFloat(n);return{height:e.scope.getStringUnitWidth("3",{font:r,fontSize:parseFloat(n),charSpace:0})*parseFloat(n)*1.5,width:i}},Jt={fields:[],xForms:[],acroFormDictionaryRoot:null,printedOut:!1,internal:null,isInitialized:!1},Kt=function(t,e){var n={type:"reference",object:t};void 0===e.internal.getPageInfo(t.page).pageContext.annotations.find((function(t){return t.type===n.type&&t.object===n.object}))&&e.internal.getPageInfo(t.page).pageContext.annotations.push(n)},Zt=Ft.__acroform__.arrayToPdfArray=function(t,e,n){var i=function(t){return t};if(Array.isArray(t)){for(var a="[",o=0;o<t.length;o++)switch(0!==o&&(a+=" "),(0,r.A)(t[o])){case"boolean":case"number":case"object":a+=t[o].toString();break;case"string":"/"!==t[o].substr(0,1)?(void 0!==e&&n&&(i=n.internal.getEncryptor(e)),a+="("+jt(i(t[o].toString()))+")"):a+=t[o].toString()}return a+"]"}throw new Error("Invalid argument passed to jsPDF.__acroform__.arrayToPdfArray")},$t=function(t,e,n){var r=function(t){return t};return void 0!==e&&n&&(r=n.internal.getEncryptor(e)),(t=t||"").toString(),"("+jt(r(t))+")"},Qt=function(){this._objId=void 0,this._scope=void 0,Object.defineProperty(this,"objId",{get:function(){if(void 0===this._objId){if(void 0===this.scope)return;this._objId=this.scope.internal.newObjectDeferred()}return this._objId},set:function(t){this._objId=t}}),Object.defineProperty(this,"scope",{value:this._scope,writable:!0})};Qt.prototype.toString=function(){return this.objId+" 0 R"},Qt.prototype.putStream=function(){var t=this.getKeyValueListForStream();this.scope.internal.putStream({data:this.stream,additionalKeyValues:t,objectId:this.objId}),this.scope.internal.out("endobj")},Qt.prototype.getKeyValueListForStream=function(){var t=[],e=Object.getOwnPropertyNames(this).filter((function(t){return"content"!=t&&"appearanceStreamContent"!=t&&"scope"!=t&&"objId"!=t&&"_"!=t.substring(0,1)}));for(var n in e)if(!1===Object.getOwnPropertyDescriptor(this,e[n]).configurable){var r=e[n],i=this[r];i&&(Array.isArray(i)?t.push({key:r,value:Zt(i,this.objId,this.scope)}):i instanceof Qt?(i.scope=this.scope,t.push({key:r,value:i.objId+" 0 R"})):"function"!=typeof i&&t.push({key:r,value:i}))}return t};var te=function(){Qt.call(this),Object.defineProperty(this,"Type",{value:"/XObject",configurable:!1,writable:!0}),Object.defineProperty(this,"Subtype",{value:"/Form",configurable:!1,writable:!0}),Object.defineProperty(this,"FormType",{value:1,configurable:!1,writable:!0});var t,e=[];Object.defineProperty(this,"BBox",{configurable:!1,get:function(){return e},set:function(t){e=t}}),Object.defineProperty(this,"Resources",{value:"2 0 R",configurable:!1,writable:!0}),Object.defineProperty(this,"stream",{enumerable:!1,configurable:!0,set:function(e){t=e.trim()},get:function(){return t||null}})};Mt(te,Qt);var ee=function(){Qt.call(this);var t,e=[];Object.defineProperty(this,"Kids",{enumerable:!1,configurable:!0,get:function(){return e.length>0?e:void 0}}),Object.defineProperty(this,"Fields",{enumerable:!1,configurable:!1,get:function(){return e}}),Object.defineProperty(this,"DA",{enumerable:!1,configurable:!1,get:function(){if(t){var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+jt(e(t))+")"}},set:function(e){t=e}})};Mt(ee,Qt);var ne=function t(){Qt.call(this);var e=4;Object.defineProperty(this,"F",{enumerable:!1,configurable:!1,get:function(){return e},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute F supplied.');e=t}}),Object.defineProperty(this,"showWhenPrinted",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(e,3))},set:function(t){!0===Boolean(t)?this.F=Ht(e,3):this.F=Wt(e,3)}});var n=0;Object.defineProperty(this,"Ff",{enumerable:!1,configurable:!1,get:function(){return n},set:function(t){if(isNaN(t))throw new Error('Invalid value "'+t+'" for attribute Ff supplied.');n=t}});var r=[];Object.defineProperty(this,"Rect",{enumerable:!1,configurable:!1,get:function(){if(0!==r.length)return r},set:function(t){r=void 0!==t?t:[]}}),Object.defineProperty(this,"x",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[0])?0:r[0]},set:function(t){r[0]=t}}),Object.defineProperty(this,"y",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[1])?0:r[1]},set:function(t){r[1]=t}}),Object.defineProperty(this,"width",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[2])?0:r[2]},set:function(t){r[2]=t}}),Object.defineProperty(this,"height",{enumerable:!0,configurable:!0,get:function(){return!r||isNaN(r[3])?0:r[3]},set:function(t){r[3]=t}});var i="";Object.defineProperty(this,"FT",{enumerable:!0,configurable:!1,get:function(){return i},set:function(t){switch(t){case"/Btn":case"/Tx":case"/Ch":case"/Sig":i=t;break;default:throw new Error('Invalid value "'+t+'" for attribute FT supplied.')}}});var a=null;Object.defineProperty(this,"T",{enumerable:!0,configurable:!1,get:function(){if(!a||a.length<1){if(this instanceof ue)return;a="FieldObject"+t.FieldNum++}var e=function(t){return t};return this.scope&&(e=this.scope.internal.getEncryptor(this.objId)),"("+jt(e(a))+")"},set:function(t){a=t.toString()}}),Object.defineProperty(this,"fieldName",{configurable:!0,enumerable:!0,get:function(){return a},set:function(t){a=t}});var o="helvetica";Object.defineProperty(this,"fontName",{enumerable:!0,configurable:!0,get:function(){return o},set:function(t){o=t}});var s="normal";Object.defineProperty(this,"fontStyle",{enumerable:!0,configurable:!0,get:function(){return s},set:function(t){s=t}});var c=0;Object.defineProperty(this,"fontSize",{enumerable:!0,configurable:!0,get:function(){return c},set:function(t){c=t}});var h=void 0;Object.defineProperty(this,"maxFontSize",{enumerable:!0,configurable:!0,get:function(){return void 0===h?50/Ct:h},set:function(t){h=t}});var u="black";Object.defineProperty(this,"color",{enumerable:!0,configurable:!0,get:function(){return u},set:function(t){u=t}});var l="/F1 0 Tf 0 g";Object.defineProperty(this,"DA",{enumerable:!0,configurable:!1,get:function(){if(!(!l||this instanceof ue||this instanceof fe))return $t(l,this.objId,this.scope)},set:function(t){t=t.toString(),l=t}});var f=null;Object.defineProperty(this,"DV",{enumerable:!1,configurable:!1,get:function(){if(f)return this instanceof se==0?$t(f,this.objId,this.scope):f},set:function(t){t=t.toString(),f=this instanceof se==0?"("===t.substr(0,1)?Bt(t.substr(1,t.length-2)):Bt(t):t}}),Object.defineProperty(this,"defaultValue",{enumerable:!0,configurable:!0,get:function(){return this instanceof se==1?Bt(f.substr(1,f.length-1)):f},set:function(t){t=t.toString(),f=this instanceof se==1?"/"+t:t}});var d=null;Object.defineProperty(this,"_V",{enumerable:!1,configurable:!1,get:function(){if(d)return d},set:function(t){this.V=t}}),Object.defineProperty(this,"V",{enumerable:!1,configurable:!1,get:function(){if(d)return this instanceof se==0?$t(d,this.objId,this.scope):d},set:function(t){t=t.toString(),d=this instanceof se==0?"("===t.substr(0,1)?Bt(t.substr(1,t.length-2)):Bt(t):t}}),Object.defineProperty(this,"value",{enumerable:!0,configurable:!0,get:function(){return this instanceof se==1?Bt(d.substr(1,d.length-1)):d},set:function(t){t=t.toString(),d=this instanceof se==1?"/"+t:t}}),Object.defineProperty(this,"hasAnnotation",{enumerable:!0,configurable:!0,get:function(){return this.Rect}}),Object.defineProperty(this,"Type",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Annot":null}}),Object.defineProperty(this,"Subtype",{enumerable:!0,configurable:!1,get:function(){return this.hasAnnotation?"/Widget":null}});var p,g=!1;Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return g},set:function(t){t=Boolean(t),g=t}}),Object.defineProperty(this,"page",{enumerable:!0,configurable:!0,get:function(){if(p)return p},set:function(t){p=t}}),Object.defineProperty(this,"readOnly",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,1))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,1):this.Ff=Wt(this.Ff,1)}}),Object.defineProperty(this,"required",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,2))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,2):this.Ff=Wt(this.Ff,2)}}),Object.defineProperty(this,"noExport",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,3))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,3):this.Ff=Wt(this.Ff,3)}});var m=null;Object.defineProperty(this,"Q",{enumerable:!0,configurable:!1,get:function(){if(null!==m)return m},set:function(t){if(-1===[0,1,2].indexOf(t))throw new Error('Invalid value "'+t+'" for attribute Q supplied.');m=t}}),Object.defineProperty(this,"textAlign",{get:function(){var t;switch(m){case 0:default:t="left";break;case 1:t="center";break;case 2:t="right"}return t},configurable:!0,enumerable:!0,set:function(t){switch(t){case"right":case 2:m=2;break;case"center":case 1:m=1;break;default:m=0}}})};Mt(ne,Qt);var re=function(){ne.call(this),this.FT="/Ch",this.V="()",this.fontName="zapfdingbats";var t=0;Object.defineProperty(this,"TI",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"topIndex",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){t=e}});var e=[];Object.defineProperty(this,"Opt",{enumerable:!0,configurable:!1,get:function(){return Zt(e,this.objId,this.scope)},set:function(t){var n,r;r=[],"string"==typeof(n=t)&&(r=function(t,e,n){n||(n=1);for(var r,i=[];r=e.exec(t);)i.push(r[n]);return i}(n,/\((.*?)\)/g)),e=r}}),this.getOptions=function(){return e},this.setOptions=function(t){e=t,this.sort&&e.sort()},this.addOption=function(t){t=(t=t||"").toString(),e.push(t),this.sort&&e.sort()},this.removeOption=function(t,n){for(n=n||!1,t=(t=t||"").toString();-1!==e.indexOf(t)&&(e.splice(e.indexOf(t),1),!1!==n););},Object.defineProperty(this,"combo",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,18))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,18):this.Ff=Wt(this.Ff,18)}}),Object.defineProperty(this,"edit",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,19))},set:function(t){!0===this.combo&&(!0===Boolean(t)?this.Ff=Ht(this.Ff,19):this.Ff=Wt(this.Ff,19))}}),Object.defineProperty(this,"sort",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,20))},set:function(t){!0===Boolean(t)?(this.Ff=Ht(this.Ff,20),e.sort()):this.Ff=Wt(this.Ff,20)}}),Object.defineProperty(this,"multiSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,22))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,22):this.Ff=Wt(this.Ff,22)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,23):this.Ff=Wt(this.Ff,23)}}),Object.defineProperty(this,"commitOnSelChange",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,27))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,27):this.Ff=Wt(this.Ff,27)}}),this.hasAppearanceStream=!1};Mt(re,ne);var ie=function(){re.call(this),this.fontName="helvetica",this.combo=!1};Mt(ie,re);var ae=function(){ie.call(this),this.combo=!0};Mt(ae,ie);var oe=function(){ae.call(this),this.edit=!0};Mt(oe,ae);var se=function(){ne.call(this),this.FT="/Btn",Object.defineProperty(this,"noToggleToOff",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,15))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,15):this.Ff=Wt(this.Ff,15)}}),Object.defineProperty(this,"radio",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,16))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,16):this.Ff=Wt(this.Ff,16)}}),Object.defineProperty(this,"pushButton",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,17))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,17):this.Ff=Wt(this.Ff,17)}}),Object.defineProperty(this,"radioIsUnison",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,26):this.Ff=Wt(this.Ff,26)}});var t,e={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};if(this.scope&&(t=this.scope.internal.getEncryptor(this.objId)),0!==Object.keys(e).length){var n,r=[];for(n in r.push("<<"),e)r.push("/"+n+" ("+jt(t(e[n]))+")");return r.push(">>"),r.join("\n")}},set:function(t){"object"===(0,r.A)(t)&&(e=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return e.CA||""},set:function(t){"string"==typeof t&&(e.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return t.substr(1,t.length-1)},set:function(e){t="/"+e}})};Mt(se,ne);var ce=function(){se.call(this),this.pushButton=!0};Mt(ce,se);var he=function(){se.call(this),this.radio=!0,this.pushButton=!1;var t=[];Object.defineProperty(this,"Kids",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=void 0!==e?e:[]}})};Mt(he,se);var ue=function(){var t,e;ne.call(this),Object.defineProperty(this,"Parent",{enumerable:!1,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"optionName",{enumerable:!1,configurable:!0,get:function(){return e},set:function(t){e=t}});var n,i={};Object.defineProperty(this,"MK",{enumerable:!1,configurable:!1,get:function(){var t=function(t){return t};this.scope&&(t=this.scope.internal.getEncryptor(this.objId));var e,n=[];for(e in n.push("<<"),i)n.push("/"+e+" ("+jt(t(i[e]))+")");return n.push(">>"),n.join("\n")},set:function(t){"object"===(0,r.A)(t)&&(i=t)}}),Object.defineProperty(this,"caption",{enumerable:!0,configurable:!0,get:function(){return i.CA||""},set:function(t){"string"==typeof t&&(i.CA=t)}}),Object.defineProperty(this,"AS",{enumerable:!1,configurable:!1,get:function(){return n},set:function(t){n=t}}),Object.defineProperty(this,"appearanceState",{enumerable:!0,configurable:!0,get:function(){return n.substr(1,n.length-1)},set:function(t){n="/"+t}}),this.caption="l",this.appearanceState="Off",this._AppearanceType=pe.RadioButton.Circle,this.appearanceStreamContent=this._AppearanceType.createAppearanceStream(this.optionName)};Mt(ue,ne),he.prototype.setAppearance=function(t){if(!("createAppearanceStream"in t)||!("getCA"in t))throw new Error("Couldn't assign Appearance to RadioButton. Appearance was Invalid!");for(var e in this.Kids)if(this.Kids.hasOwnProperty(e)){var n=this.Kids[e];n.appearanceStreamContent=t.createAppearanceStream(n.optionName),n.caption=t.getCA()}},he.prototype.createOption=function(t){var e=new ue;return e.Parent=this,e.optionName=t,this.Kids.push(e),ve.call(this.scope,e),e};var le=function(){se.call(this),this.fontName="zapfdingbats",this.caption="3",this.appearanceState="On",this.value="On",this.textAlign="center",this.appearanceStreamContent=pe.CheckBox.createAppearanceStream()};Mt(le,se);var fe=function(){ne.call(this),this.FT="/Tx",Object.defineProperty(this,"multiline",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,13))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,13):this.Ff=Wt(this.Ff,13)}}),Object.defineProperty(this,"fileSelect",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,21))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,21):this.Ff=Wt(this.Ff,21)}}),Object.defineProperty(this,"doNotSpellCheck",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,23))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,23):this.Ff=Wt(this.Ff,23)}}),Object.defineProperty(this,"doNotScroll",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,24))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,24):this.Ff=Wt(this.Ff,24)}}),Object.defineProperty(this,"comb",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,25))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,25):this.Ff=Wt(this.Ff,25)}}),Object.defineProperty(this,"richText",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,26))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,26):this.Ff=Wt(this.Ff,26)}});var t=null;Object.defineProperty(this,"MaxLen",{enumerable:!0,configurable:!1,get:function(){return t},set:function(e){t=e}}),Object.defineProperty(this,"maxLength",{enumerable:!0,configurable:!0,get:function(){return t},set:function(e){Number.isInteger(e)&&(t=e)}}),Object.defineProperty(this,"hasAppearanceStream",{enumerable:!0,configurable:!0,get:function(){return this.V||this.DV}})};Mt(fe,ne);var de=function(){fe.call(this),Object.defineProperty(this,"password",{enumerable:!0,configurable:!0,get:function(){return Boolean(Ut(this.Ff,14))},set:function(t){!0===Boolean(t)?this.Ff=Ht(this.Ff,14):this.Ff=Wt(this.Ff,14)}}),this.password=!0};Mt(de,fe);var pe={CheckBox:{createAppearanceStream:function(){return{N:{On:pe.CheckBox.YesNormal},D:{On:pe.CheckBox.YesPushDown,Off:pe.CheckBox.OffPushDown}}},YesPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=[],r=t.scope.internal.getFont(t.fontName,t.fontStyle).id,i=t.scope.__private__.encodeColorString(t.color),a=Yt(t,t.caption);return n.push("0.749023 g"),n.push("0 0 "+Et(pe.internal.getWidth(t))+" "+Et(pe.internal.getHeight(t))+" re"),n.push("f"),n.push("BMC"),n.push("q"),n.push("0 0 1 rg"),n.push("/"+r+" "+Et(a.fontSize)+" Tf "+i),n.push("BT"),n.push(a.text),n.push("ET"),n.push("Q"),n.push("EMC"),e.stream=n.join("\n"),e},YesNormal:function(t){var e=Rt(t);e.scope=t.scope;var n=t.scope.internal.getFont(t.fontName,t.fontStyle).id,r=t.scope.__private__.encodeColorString(t.color),i=[],a=pe.internal.getHeight(t),o=pe.internal.getWidth(t),s=Yt(t,t.caption);return i.push("1 g"),i.push("0 0 "+Et(o)+" "+Et(a)+" re"),i.push("f"),i.push("q"),i.push("0 0 1 rg"),i.push("0 0 "+Et(o-1)+" "+Et(a-1)+" re"),i.push("W"),i.push("n"),i.push("0 g"),i.push("BT"),i.push("/"+n+" "+Et(s.fontSize)+" Tf "+r),i.push(s.text),i.push("ET"),i.push("Q"),e.stream=i.join("\n"),e},OffPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=[];return n.push("0.749023 g"),n.push("0 0 "+Et(pe.internal.getWidth(t))+" "+Et(pe.internal.getHeight(t))+" re"),n.push("f"),e.stream=n.join("\n"),e}},RadioButton:{Circle:{createAppearanceStream:function(t){var e={D:{Off:pe.RadioButton.Circle.OffPushDown},N:{}};return e.N[t]=pe.RadioButton.Circle.YesNormal,e.D[t]=pe.RadioButton.Circle.YesPushDown,e},getCA:function(){return"l"},YesNormal:function(t){var e=Rt(t);e.scope=t.scope;var n=[],r=pe.internal.getWidth(t)<=pe.internal.getHeight(t)?pe.internal.getWidth(t)/4:pe.internal.getHeight(t)/4;r=Number((.9*r).toFixed(5));var i=pe.internal.Bezier_C,a=Number((r*i).toFixed(5));return n.push("q"),n.push("1 0 0 1 "+Ot(pe.internal.getWidth(t)/2)+" "+Ot(pe.internal.getHeight(t)/2)+" cm"),n.push(r+" 0 m"),n.push(r+" "+a+" "+a+" "+r+" 0 "+r+" c"),n.push("-"+a+" "+r+" -"+r+" "+a+" -"+r+" 0 c"),n.push("-"+r+" -"+a+" -"+a+" -"+r+" 0 -"+r+" c"),n.push(a+" -"+r+" "+r+" -"+a+" "+r+" 0 c"),n.push("f"),n.push("Q"),e.stream=n.join("\n"),e},YesPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=[],r=pe.internal.getWidth(t)<=pe.internal.getHeight(t)?pe.internal.getWidth(t)/4:pe.internal.getHeight(t)/4;r=Number((.9*r).toFixed(5));var i=Number((2*r).toFixed(5)),a=Number((i*pe.internal.Bezier_C).toFixed(5)),o=Number((r*pe.internal.Bezier_C).toFixed(5));return n.push("0.749023 g"),n.push("q"),n.push("1 0 0 1 "+Ot(pe.internal.getWidth(t)/2)+" "+Ot(pe.internal.getHeight(t)/2)+" cm"),n.push(i+" 0 m"),n.push(i+" "+a+" "+a+" "+i+" 0 "+i+" c"),n.push("-"+a+" "+i+" -"+i+" "+a+" -"+i+" 0 c"),n.push("-"+i+" -"+a+" -"+a+" -"+i+" 0 -"+i+" c"),n.push(a+" -"+i+" "+i+" -"+a+" "+i+" 0 c"),n.push("f"),n.push("Q"),n.push("0 g"),n.push("q"),n.push("1 0 0 1 "+Ot(pe.internal.getWidth(t)/2)+" "+Ot(pe.internal.getHeight(t)/2)+" cm"),n.push(r+" 0 m"),n.push(r+" "+o+" "+o+" "+r+" 0 "+r+" c"),n.push("-"+o+" "+r+" -"+r+" "+o+" -"+r+" 0 c"),n.push("-"+r+" -"+o+" -"+o+" -"+r+" 0 -"+r+" c"),n.push(o+" -"+r+" "+r+" -"+o+" "+r+" 0 c"),n.push("f"),n.push("Q"),e.stream=n.join("\n"),e},OffPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=[],r=pe.internal.getWidth(t)<=pe.internal.getHeight(t)?pe.internal.getWidth(t)/4:pe.internal.getHeight(t)/4;r=Number((.9*r).toFixed(5));var i=Number((2*r).toFixed(5)),a=Number((i*pe.internal.Bezier_C).toFixed(5));return n.push("0.749023 g"),n.push("q"),n.push("1 0 0 1 "+Ot(pe.internal.getWidth(t)/2)+" "+Ot(pe.internal.getHeight(t)/2)+" cm"),n.push(i+" 0 m"),n.push(i+" "+a+" "+a+" "+i+" 0 "+i+" c"),n.push("-"+a+" "+i+" -"+i+" "+a+" -"+i+" 0 c"),n.push("-"+i+" -"+a+" -"+a+" -"+i+" 0 -"+i+" c"),n.push(a+" -"+i+" "+i+" -"+a+" "+i+" 0 c"),n.push("f"),n.push("Q"),e.stream=n.join("\n"),e}},Cross:{createAppearanceStream:function(t){var e={D:{Off:pe.RadioButton.Cross.OffPushDown},N:{}};return e.N[t]=pe.RadioButton.Cross.YesNormal,e.D[t]=pe.RadioButton.Cross.YesPushDown,e},getCA:function(){return"8"},YesNormal:function(t){var e=Rt(t);e.scope=t.scope;var n=[],r=pe.internal.calculateCross(t);return n.push("q"),n.push("1 1 "+Et(pe.internal.getWidth(t)-2)+" "+Et(pe.internal.getHeight(t)-2)+" re"),n.push("W"),n.push("n"),n.push(Et(r.x1.x)+" "+Et(r.x1.y)+" m"),n.push(Et(r.x2.x)+" "+Et(r.x2.y)+" l"),n.push(Et(r.x4.x)+" "+Et(r.x4.y)+" m"),n.push(Et(r.x3.x)+" "+Et(r.x3.y)+" l"),n.push("s"),n.push("Q"),e.stream=n.join("\n"),e},YesPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=pe.internal.calculateCross(t),r=[];return r.push("0.749023 g"),r.push("0 0 "+Et(pe.internal.getWidth(t))+" "+Et(pe.internal.getHeight(t))+" re"),r.push("f"),r.push("q"),r.push("1 1 "+Et(pe.internal.getWidth(t)-2)+" "+Et(pe.internal.getHeight(t)-2)+" re"),r.push("W"),r.push("n"),r.push(Et(n.x1.x)+" "+Et(n.x1.y)+" m"),r.push(Et(n.x2.x)+" "+Et(n.x2.y)+" l"),r.push(Et(n.x4.x)+" "+Et(n.x4.y)+" m"),r.push(Et(n.x3.x)+" "+Et(n.x3.y)+" l"),r.push("s"),r.push("Q"),e.stream=r.join("\n"),e},OffPushDown:function(t){var e=Rt(t);e.scope=t.scope;var n=[];return n.push("0.749023 g"),n.push("0 0 "+Et(pe.internal.getWidth(t))+" "+Et(pe.internal.getHeight(t))+" re"),n.push("f"),e.stream=n.join("\n"),e}}},createDefaultAppearanceStream:function(t){var e=t.scope.internal.getFont(t.fontName,t.fontStyle).id,n=t.scope.__private__.encodeColorString(t.color);return"/"+e+" "+t.fontSize+" Tf "+n}};pe.internal={Bezier_C:.551915024494,calculateCross:function(t){var e=pe.internal.getWidth(t),n=pe.internal.getHeight(t),r=Math.min(e,n);return{x1:{x:(e-r)/2,y:(n-r)/2+r},x2:{x:(e-r)/2+r,y:(n-r)/2},x3:{x:(e-r)/2,y:(n-r)/2},x4:{x:(e-r)/2+r,y:(n-r)/2+r}}}},pe.internal.getWidth=function(t){var e=0;return"object"===(0,r.A)(t)&&(e=qt(t.Rect[2])),e},pe.internal.getHeight=function(t){var e=0;return"object"===(0,r.A)(t)&&(e=qt(t.Rect[3])),e};var ge,me,ve=Ft.addField=function(t){if(function(t,e){if(e.scope=t,void 0!==t.internal&&(void 0===t.internal.acroformPlugin||!1===t.internal.acroformPlugin.isInitialized)){if(ne.FieldNum=0,t.internal.acroformPlugin=JSON.parse(JSON.stringify(Jt)),t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("Exception while creating AcroformDictionary");Ct=t.internal.scaleFactor,t.internal.acroformPlugin.acroFormDictionaryRoot=new ee,t.internal.acroformPlugin.acroFormDictionaryRoot.scope=t,t.internal.acroformPlugin.acroFormDictionaryRoot._eventID=t.internal.events.subscribe("postPutResources",(function(){var e;(e=t).internal.events.unsubscribe(e.internal.acroformPlugin.acroFormDictionaryRoot._eventID),delete e.internal.acroformPlugin.acroFormDictionaryRoot._eventID,e.internal.acroformPlugin.printedOut=!0})),t.internal.events.subscribe("buildDocument",(function(){!function(t){t.internal.acroformPlugin.acroFormDictionaryRoot.objId=void 0;var e=t.internal.acroformPlugin.acroFormDictionaryRoot.Fields;for(var n in e)if(e.hasOwnProperty(n)){var r=e[n];r.objId=void 0,r.hasAnnotation&&Kt(r,t)}}(t)})),t.internal.events.subscribe("putCatalog",(function(){!function(t){if(void 0===t.internal.acroformPlugin.acroFormDictionaryRoot)throw new Error("putCatalogCallback: Root missing.");t.internal.write("/AcroForm "+t.internal.acroformPlugin.acroFormDictionaryRoot.objId+" 0 R")}(t)})),t.internal.events.subscribe("postPutPages",(function(e){!function(t,e){var n=!t;for(var i in t||(e.internal.newObjectDeferredBegin(e.internal.acroformPlugin.acroFormDictionaryRoot.objId,!0),e.internal.acroformPlugin.acroFormDictionaryRoot.putStream()),t=t||e.internal.acroformPlugin.acroFormDictionaryRoot.Kids)if(t.hasOwnProperty(i)){var a=t[i],o=[],s=a.Rect;if(a.Rect&&(a.Rect=Vt(a.Rect,e)),e.internal.newObjectDeferredBegin(a.objId,!0),a.DA=pe.createDefaultAppearanceStream(a),"object"===(0,r.A)(a)&&"function"==typeof a.getKeyValueListForStream&&(o=a.getKeyValueListForStream()),a.Rect=s,a.hasAppearanceStream&&!a.appearanceStreamContent){var c=Gt(a);o.push({key:"AP",value:"<</N "+c+">>"}),e.internal.acroformPlugin.xForms.push(c)}if(a.appearanceStreamContent){var h="";for(var u in a.appearanceStreamContent)if(a.appearanceStreamContent.hasOwnProperty(u)){var l=a.appearanceStreamContent[u];if(h+="/"+u+" ",h+="<<",Object.keys(l).length>=1||Array.isArray(l)){for(var i in l)if(l.hasOwnProperty(i)){var f=l[i];"function"==typeof f&&(f=f.call(e,a)),h+="/"+i+" "+f+" ",e.internal.acroformPlugin.xForms.indexOf(f)>=0||e.internal.acroformPlugin.xForms.push(f)}}else"function"==typeof(f=l)&&(f=f.call(e,a)),h+="/"+i+" "+f,e.internal.acroformPlugin.xForms.indexOf(f)>=0||e.internal.acroformPlugin.xForms.push(f);h+=">>"}o.push({key:"AP",value:"<<\n"+h+">>"})}e.internal.putStream({additionalKeyValues:o,objectId:a.objId}),e.internal.out("endobj")}n&&function(t,e){for(var n in t)if(t.hasOwnProperty(n)){var i=n,a=t[n];e.internal.newObjectDeferredBegin(a.objId,!0),"object"===(0,r.A)(a)&&"function"==typeof a.putStream&&a.putStream(),delete t[i]}}(e.internal.acroformPlugin.xForms,e)}(e,t)})),t.internal.acroformPlugin.isInitialized=!0}}(this,t),!(t instanceof ne))throw new Error("Invalid argument passed to jsPDF.addField.");var e;return(e=t).scope.internal.acroformPlugin.printedOut&&(e.scope.internal.acroformPlugin.printedOut=!1,e.scope.internal.acroformPlugin.acroFormDictionaryRoot=null),e.scope.internal.acroformPlugin.acroFormDictionaryRoot.Fields.push(e),t.page=t.scope.internal.getCurrentPageInfo().pageNumber,this};function be(t){return t.reduce((function(t,e,n){return t[e]=n,t}),{})}Ft.AcroFormChoiceField=re,Ft.AcroFormListBox=ie,Ft.AcroFormComboBox=ae,Ft.AcroFormEditBox=oe,Ft.AcroFormButton=se,Ft.AcroFormPushButton=ce,Ft.AcroFormRadioButton=he,Ft.AcroFormCheckBox=le,Ft.AcroFormTextField=fe,Ft.AcroFormPasswordField=de,Ft.AcroFormAppearance=pe,Ft.AcroForm={ChoiceField:re,ListBox:ie,ComboBox:ae,EditBox:oe,Button:se,PushButton:ce,RadioButton:he,CheckBox:le,TextField:fe,PasswordField:de,Appearance:pe},It.AcroForm={ChoiceField:re,ListBox:ie,ComboBox:ae,EditBox:oe,Button:se,PushButton:ce,RadioButton:he,CheckBox:le,TextField:fe,PasswordField:de,Appearance:pe},It.AcroForm,function(t){t.__addimage__={};var e="UNKNOWN",n={PNG:[[137,80,78,71]],TIFF:[[77,77,0,42],[73,73,42,0]],JPEG:[[255,216,255,224,void 0,void 0,74,70,73,70,0],[255,216,255,225,void 0,void 0,69,120,105,102,0,0],[255,216,255,219],[255,216,255,238]],JPEG2000:[[0,0,0,12,106,80,32,32]],GIF87a:[[71,73,70,56,55,97]],GIF89a:[[71,73,70,56,57,97]],WEBP:[[82,73,70,70,void 0,void 0,void 0,void 0,87,69,66,80]],BMP:[[66,77],[66,65],[67,73],[67,80],[73,67],[80,84]]},i=t.__addimage__.getImageFileTypeByImageData=function(t,r){var i,a,o,s,c,h=e;if("RGBA"===(r=r||e)||void 0!==t.data&&t.data instanceof Uint8ClampedArray&&"height"in t&&"width"in t)return"RGBA";if(A(t))for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t[a]){s=!1;break}if(!0===s){h=c;break}}else for(c in n)for(o=n[c],i=0;i<o.length;i+=1){for(s=!0,a=0;a<o[i].length;a+=1)if(void 0!==o[i][a]&&o[i][a]!==t.charCodeAt(a)){s=!1;break}if(!0===s){h=c;break}}return h===e&&r!==e&&(h=r),h},a=function t(e){for(var n=this.internal.write,r=this.internal.putStream,i=(0,this.internal.getFilters)();-1!==i.indexOf("FlateEncode");)i.splice(i.indexOf("FlateEncode"),1);e.objectId=this.internal.newObject();var a=[];if(a.push({key:"Type",value:"/XObject"}),a.push({key:"Subtype",value:"/Image"}),a.push({key:"Width",value:e.width}),a.push({key:"Height",value:e.height}),e.colorSpace===v.INDEXED?a.push({key:"ColorSpace",value:"[/Indexed /DeviceRGB "+(e.palette.length/3-1)+" "+("sMask"in e&&void 0!==e.sMask?e.objectId+2:e.objectId+1)+" 0 R]"}):(a.push({key:"ColorSpace",value:"/"+e.colorSpace}),e.colorSpace===v.DEVICE_CMYK&&a.push({key:"Decode",value:"[1 0 1 0 1 0 1 0]"})),a.push({key:"BitsPerComponent",value:e.bitsPerComponent}),"decodeParameters"in e&&void 0!==e.decodeParameters&&a.push({key:"DecodeParms",value:"<<"+e.decodeParameters+">>"}),"transparency"in e&&Array.isArray(e.transparency)){for(var o="",s=0,c=e.transparency.length;s<c;s++)o+=e.transparency[s]+" "+e.transparency[s]+" ";a.push({key:"Mask",value:"["+o+"]"})}void 0!==e.sMask&&a.push({key:"SMask",value:e.objectId+1+" 0 R"});var h=void 0!==e.filter?["/"+e.filter]:void 0;if(r({data:e.data,additionalKeyValues:a,alreadyAppliedFilters:h,objectId:e.objectId}),n("endobj"),"sMask"in e&&void 0!==e.sMask){var u="/Predictor "+e.predictor+" /Colors 1 /BitsPerComponent "+e.bitsPerComponent+" /Columns "+e.width,l={width:e.width,height:e.height,colorSpace:"DeviceGray",bitsPerComponent:e.bitsPerComponent,decodeParameters:u,data:e.sMask};"filter"in e&&(l.filter=e.filter),t.call(this,l)}if(e.colorSpace===v.INDEXED){var f=this.internal.newObject();r({data:S(new Uint8Array(e.palette)),objectId:f}),n("endobj")}},o=function(){var t=this.internal.collections.addImage_images;for(var e in t)a.call(this,t[e])},s=function(){var t,e=this.internal.collections.addImage_images,n=this.internal.write;for(var r in e)n("/I"+(t=e[r]).index,t.objectId,"0","R")},c=function(){this.internal.collections.addImage_images||(this.internal.collections.addImage_images={},this.internal.events.subscribe("putResources",o),this.internal.events.subscribe("putXobjectDict",s))},h=function(){var t=this.internal.collections.addImage_images;return c.call(this),t},u=function(){return Object.keys(this.internal.collections.addImage_images).length},l=function(e){return"function"==typeof t["process"+e.toUpperCase()]},f=function(t){return"object"===(0,r.A)(t)&&1===t.nodeType},d=function(e,n){if("IMG"===e.nodeName&&e.hasAttribute("src")){var r=""+e.getAttribute("src");if(0===r.indexOf("data:image/"))return nt(unescape(r).split("base64,").pop());var i=t.loadFile(r,!0);if(void 0!==i)return i}if("CANVAS"===e.nodeName){if(0===e.width||0===e.height)throw new Error("Given canvas must have data. Canvas width: "+e.width+", height: "+e.height);var a;switch(n){case"PNG":a="image/png";break;case"WEBP":a="image/webp";break;default:a="image/jpeg"}return nt(e.toDataURL(a,1).split("base64,").pop())}},p=function(t){var e=this.internal.collections.addImage_images;if(e)for(var n in e)if(t===e[n].alias)return e[n]},g=function(t,e,n){return t||e||(t=-96,e=-96),t<0&&(t=-1*n.width*72/t/this.internal.scaleFactor),e<0&&(e=-1*n.height*72/e/this.internal.scaleFactor),0===t&&(t=e*n.width/n.height),0===e&&(e=t*n.height/n.width),[t,e]},m=function(t,e,n,r,i,a){var o=g.call(this,n,r,i),s=this.internal.getCoordinateString,c=this.internal.getVerticalCoordinateString,u=h.call(this);if(n=o[0],r=o[1],u[i.index]=i,a){a*=Math.PI/180;var l=Math.cos(a),f=Math.sin(a),d=function(t){return t.toFixed(4)},p=[d(l),d(f),d(-1*f),d(l),0,0,"cm"]}this.internal.write("q"),a?(this.internal.write([1,"0","0",1,s(t),c(e+r),"cm"].join(" ")),this.internal.write(p.join(" ")),this.internal.write([s(n),"0","0",s(r),"0","0","cm"].join(" "))):this.internal.write([s(n),"0","0",s(r),s(t),c(e+r),"cm"].join(" ")),this.isAdvancedAPI()&&this.internal.write([1,0,0,-1,0,0,"cm"].join(" ")),this.internal.write("/I"+i.index+" Do"),this.internal.write("Q")},v=t.color_spaces={DEVICE_RGB:"DeviceRGB",DEVICE_GRAY:"DeviceGray",DEVICE_CMYK:"DeviceCMYK",CAL_GREY:"CalGray",CAL_RGB:"CalRGB",LAB:"Lab",ICC_BASED:"ICCBased",INDEXED:"Indexed",PATTERN:"Pattern",SEPARATION:"Separation",DEVICE_N:"DeviceN"};t.decode={DCT_DECODE:"DCTDecode",FLATE_DECODE:"FlateDecode",LZW_DECODE:"LZWDecode",JPX_DECODE:"JPXDecode",JBIG2_DECODE:"JBIG2Decode",ASCII85_DECODE:"ASCII85Decode",ASCII_HEX_DECODE:"ASCIIHexDecode",RUN_LENGTH_DECODE:"RunLengthDecode",CCITT_FAX_DECODE:"CCITTFaxDecode"};var b=t.image_compression={NONE:"NONE",FAST:"FAST",MEDIUM:"MEDIUM",SLOW:"SLOW"},y=t.__addimage__.sHashCode=function(t){var e,n,r=0;if("string"==typeof t)for(n=t.length,e=0;e<n;e++)r=(r<<5)-r+t.charCodeAt(e),r|=0;else if(A(t))for(n=t.byteLength/2,e=0;e<n;e++)r=(r<<5)-r+t[e],r|=0;return r},w=t.__addimage__.validateStringAsBase64=function(t){(t=t||"").toString().trim();var e=!0;return 0===t.length&&(e=!1),t.length%4!=0&&(e=!1),!1===/^[A-Za-z0-9+/]+$/.test(t.substr(0,t.length-2))&&(e=!1),!1===/^[A-Za-z0-9/][A-Za-z0-9+/]|[A-Za-z0-9+/]=|==$/.test(t.substr(-2))&&(e=!1),e},N=t.__addimage__.extractImageFromDataUrl=function(t){var e=(t=t||"").split("base64,"),n=null;if(2===e.length){var r=/^data:(\w*\/\w*);*(charset=(?!charset=)[\w=-]*)*;*$/.exec(e[0]);Array.isArray(r)&&(n={mimeType:r[1],charset:r[2],data:e[1]})}return n},L=t.__addimage__.supportsArrayBuffer=function(){return"undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array};t.__addimage__.isArrayBuffer=function(t){return L()&&t instanceof ArrayBuffer};var A=t.__addimage__.isArrayBufferView=function(t){return L()&&"undefined"!=typeof Uint32Array&&(t instanceof Int8Array||t instanceof Uint8Array||"undefined"!=typeof Uint8ClampedArray&&t instanceof Uint8ClampedArray||t instanceof Int16Array||t instanceof Uint16Array||t instanceof Int32Array||t instanceof Uint32Array||t instanceof Float32Array||t instanceof Float64Array)},x=t.__addimage__.binaryStringToUint8Array=function(t){for(var e=t.length,n=new Uint8Array(e),r=0;r<e;r++)n[r]=t.charCodeAt(r);return n},S=t.__addimage__.arrayBufferToBinaryString=function(t){for(var e="",n=A(t)?t:new Uint8Array(t),r=0;r<n.length;r+=8192)e+=String.fromCharCode.apply(null,n.subarray(r,r+8192));return e};t.addImage=function(){var t,n,i,a,o,s,h,u,l;if("number"==typeof arguments[1]?(n=e,i=arguments[1],a=arguments[2],o=arguments[3],s=arguments[4],h=arguments[5],u=arguments[6],l=arguments[7]):(n=arguments[1],i=arguments[2],a=arguments[3],o=arguments[4],s=arguments[5],h=arguments[6],u=arguments[7],l=arguments[8]),"object"===(0,r.A)(t=arguments[0])&&!f(t)&&"imageData"in t){var d=t;t=d.imageData,n=d.format||n||e,i=d.x||i||0,a=d.y||a||0,o=d.w||d.width||o,s=d.h||d.height||s,h=d.alias||h,u=d.compression||u,l=d.rotation||d.angle||l}var p=this.internal.getFilters();if(void 0===u&&-1!==p.indexOf("FlateEncode")&&(u="SLOW"),isNaN(i)||isNaN(a))throw new Error("Invalid coordinates passed to jsPDF.addImage");c.call(this);var g=_.call(this,t,n,h,u);return m.call(this,i,a,o,s,g,l),this};var _=function(n,r,a,o){var s,c,h;if("string"==typeof n&&i(n)===e){n=unescape(n);var g=P(n,!1);(""!==g||void 0!==(g=t.loadFile(n,!0)))&&(n=g)}if(f(n)&&(n=d(n,r)),r=i(n,r),!l(r))throw new Error("addImage does not support files of type '"+r+"', please ensure that a plugin for '"+r+"' support is added.");if((null==(h=a)||0===h.length)&&(a=function(t){return"string"==typeof t||A(t)?y(t):A(t.data)?y(t.data):null}(n)),(s=p.call(this,a))||(L()&&(n instanceof Uint8Array||"RGBA"===r||(c=n,n=x(n))),s=this["process"+r.toUpperCase()](n,u.call(this),a,function(e){return e&&"string"==typeof e&&(e=e.toUpperCase()),e in t.image_compression?e:b.NONE}(o),c)),!s)throw new Error("An unknown error occurred whilst processing the image.");return s},P=t.__addimage__.convertBase64ToBinaryString=function(t,e){var n;e="boolean"!=typeof e||e;var r,i="";if("string"==typeof t){r=null!==(n=N(t))?n.data:t;try{i=nt(r)}catch(t){if(e)throw w(r)?new Error("atob-Error in jsPDF.convertBase64ToBinaryString "+t.message):new Error("Supplied Data is not a valid base64-String jsPDF.convertBase64ToBinaryString ")}}return i};t.getImageProperties=function(n){var r,a,o="";if(f(n)&&(n=d(n)),"string"==typeof n&&i(n)===e&&(""===(o=P(n,!1))&&(o=t.loadFile(n)||""),n=o),a=i(n),!l(a))throw new Error("addImage does not support files of type '"+a+"', please ensure that a plugin for '"+a+"' support is added.");if(!L()||n instanceof Uint8Array||(n=x(n)),!(r=this["process"+a.toUpperCase()](n)))throw new Error("An unknown error occurred whilst processing the image");return r.fileType=a,r}}(It.API),ge=It.API,me=function(t){if(void 0!==t&&""!=t)return!0},It.API.events.push(["addPage",function(t){this.internal.getPageInfo(t.pageNumber).pageContext.annotations=[]}]),ge.events.push(["putPage",function(t){for(var e,n,r,i=this.internal.getCoordinateString,a=this.internal.getVerticalCoordinateString,o=this.internal.getPageInfoByObjId(t.objId),s=t.pageContext.annotations,c=!1,h=0;h<s.length&&!c;h++)switch((e=s[h]).type){case"link":(me(e.options.url)||me(e.options.pageNumber))&&(c=!0);break;case"reference":case"text":case"freetext":c=!0}if(0!=c){this.internal.write("/Annots [");for(var u=0;u<s.length;u++){e=s[u];var l=this.internal.pdfEscape,f=this.internal.getEncryptor(t.objId);switch(e.type){case"reference":this.internal.write(" "+e.object.objId+" 0 R ");break;case"text":var d=this.internal.newAdditionalObject(),p=this.internal.newAdditionalObject(),g=this.internal.getEncryptor(d.objId),m=e.title||"Note";r="<</Type /Annot /Subtype /Text "+(n="/Rect ["+i(e.bounds.x)+" "+a(e.bounds.y+e.bounds.h)+" "+i(e.bounds.x+e.bounds.w)+" "+a(e.bounds.y)+"] ")+"/Contents ("+l(g(e.contents))+")",r+=" /Popup "+p.objId+" 0 R",r+=" /P "+o.objId+" 0 R",r+=" /T ("+l(g(m))+") >>",d.content=r;var v=d.objId+" 0 R";r="<</Type /Annot /Subtype /Popup "+(n="/Rect ["+i(e.bounds.x+30)+" "+a(e.bounds.y+e.bounds.h)+" "+i(e.bounds.x+e.bounds.w+30)+" "+a(e.bounds.y)+"] ")+" /Parent "+v,e.open&&(r+=" /Open true"),r+=" >>",p.content=r,this.internal.write(d.objId,"0 R",p.objId,"0 R");break;case"freetext":n="/Rect ["+i(e.bounds.x)+" "+a(e.bounds.y)+" "+i(e.bounds.x+e.bounds.w)+" "+a(e.bounds.y+e.bounds.h)+"] ";var b=e.color||"#000000";r="<</Type /Annot /Subtype /FreeText "+n+"/Contents ("+l(f(e.contents))+")",r+=" /DS(font: Helvetica,sans-serif 12.0pt; text-align:left; color:#"+b+")",r+=" /Border [0 0 0]",r+=" >>",this.internal.write(r);break;case"link":if(e.options.name){var y=this.annotations._nameMap[e.options.name];e.options.pageNumber=y.page,e.options.top=y.y}else e.options.top||(e.options.top=0);if(n="/Rect ["+e.finalBounds.x+" "+e.finalBounds.y+" "+e.finalBounds.w+" "+e.finalBounds.h+"] ",r="",e.options.url)r="<</Type /Annot /Subtype /Link "+n+"/Border [0 0 0] /A <</S /URI /URI ("+l(f(e.options.url))+") >>";else if(e.options.pageNumber)switch(r="<</Type /Annot /Subtype /Link "+n+"/Border [0 0 0] /Dest ["+this.internal.getPageInfo(e.options.pageNumber).objId+" 0 R",e.options.magFactor=e.options.magFactor||"XYZ",e.options.magFactor){case"Fit":r+=" /Fit]";break;case"FitH":r+=" /FitH "+e.options.top+"]";break;case"FitV":e.options.left=e.options.left||0,r+=" /FitV "+e.options.left+"]";break;default:var w=a(e.options.top);e.options.left=e.options.left||0,void 0===e.options.zoom&&(e.options.zoom=0),r+=" /XYZ "+e.options.left+" "+w+" "+e.options.zoom+"]"}""!=r&&(r+=" >>",this.internal.write(r))}}this.internal.write("]")}}]),ge.createAnnotation=function(t){var e=this.internal.getCurrentPageInfo();switch(t.type){case"link":this.link(t.bounds.x,t.bounds.y,t.bounds.w,t.bounds.h,t);break;case"text":case"freetext":e.pageContext.annotations.push(t)}},ge.link=function(t,e,n,r,i){var a=this.internal.getCurrentPageInfo(),o=this.internal.getCoordinateString,s=this.internal.getVerticalCoordinateString;a.pageContext.annotations.push({finalBounds:{x:o(t),y:s(e),w:o(t+n),h:s(e+r)},options:i,type:"link"})},ge.textWithLink=function(t,e,n,r){var i,a,o=this.getTextWidth(t),s=this.internal.getLineHeight()/this.internal.scaleFactor;if(void 0!==r.maxWidth){a=r.maxWidth;var c=this.splitTextToSize(t,a).length;i=Math.ceil(s*c)}else a=o,i=s;return this.text(t,e,n,r),n+=.2*s,"center"===r.align&&(e-=o/2),"right"===r.align&&(e-=o),this.link(e,n-s,a,i,r),o},ge.getTextWidth=function(t){var e=this.internal.getFontSize();return this.getStringUnitWidth(t)*e/this.internal.scaleFactor},function(t){var e={1569:[65152],1570:[65153,65154],1571:[65155,65156],1572:[65157,65158],1573:[65159,65160],1574:[65161,65162,65163,65164],1575:[65165,65166],1576:[65167,65168,65169,65170],1577:[65171,65172],1578:[65173,65174,65175,65176],1579:[65177,65178,65179,65180],1580:[65181,65182,65183,65184],1581:[65185,65186,65187,65188],1582:[65189,65190,65191,65192],1583:[65193,65194],1584:[65195,65196],1585:[65197,65198],1586:[65199,65200],1587:[65201,65202,65203,65204],1588:[65205,65206,65207,65208],1589:[65209,65210,65211,65212],1590:[65213,65214,65215,65216],1591:[65217,65218,65219,65220],1592:[65221,65222,65223,65224],1593:[65225,65226,65227,65228],1594:[65229,65230,65231,65232],1601:[65233,65234,65235,65236],1602:[65237,65238,65239,65240],1603:[65241,65242,65243,65244],1604:[65245,65246,65247,65248],1605:[65249,65250,65251,65252],1606:[65253,65254,65255,65256],1607:[65257,65258,65259,65260],1608:[65261,65262],1609:[65263,65264,64488,64489],1610:[65265,65266,65267,65268],1649:[64336,64337],1655:[64477],1657:[64358,64359,64360,64361],1658:[64350,64351,64352,64353],1659:[64338,64339,64340,64341],1662:[64342,64343,64344,64345],1663:[64354,64355,64356,64357],1664:[64346,64347,64348,64349],1667:[64374,64375,64376,64377],1668:[64370,64371,64372,64373],1670:[64378,64379,64380,64381],1671:[64382,64383,64384,64385],1672:[64392,64393],1676:[64388,64389],1677:[64386,64387],1678:[64390,64391],1681:[64396,64397],1688:[64394,64395],1700:[64362,64363,64364,64365],1702:[64366,64367,64368,64369],1705:[64398,64399,64400,64401],1709:[64467,64468,64469,64470],1711:[64402,64403,64404,64405],1713:[64410,64411,64412,64413],1715:[64406,64407,64408,64409],1722:[64414,64415],1723:[64416,64417,64418,64419],1726:[64426,64427,64428,64429],1728:[64420,64421],1729:[64422,64423,64424,64425],1733:[64480,64481],1734:[64473,64474],1735:[64471,64472],1736:[64475,64476],1737:[64482,64483],1739:[64478,64479],1740:[64508,64509,64510,64511],1744:[64484,64485,64486,64487],1746:[64430,64431],1747:[64432,64433]},n={65247:{65154:65269,65156:65271,65160:65273,65166:65275},65248:{65154:65270,65156:65272,65160:65274,65166:65276},65165:{65247:{65248:{65258:65010}}},1617:{1612:64606,1613:64607,1614:64608,1615:64609,1616:64610}},r={1612:64606,1613:64607,1614:64608,1615:64609,1616:64610},i=[1570,1571,1573,1575];t.__arabicParser__={};var a=t.__arabicParser__.isInArabicSubstitutionA=function(t){return void 0!==e[t.charCodeAt(0)]},o=t.__arabicParser__.isArabicLetter=function(t){return"string"==typeof t&&/^[\u0600-\u06FF\u0750-\u077F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]+$/.test(t)},s=t.__arabicParser__.isArabicEndLetter=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length<=2},c=t.__arabicParser__.isArabicAlfLetter=function(t){return o(t)&&i.indexOf(t.charCodeAt(0))>=0};t.__arabicParser__.arabicLetterHasIsolatedForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=1};var h=t.__arabicParser__.arabicLetterHasFinalForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=2};t.__arabicParser__.arabicLetterHasInitialForm=function(t){return o(t)&&a(t)&&e[t.charCodeAt(0)].length>=3};var u=t.__arabicParser__.arabicLetterHasMedialForm=function(t){return o(t)&&a(t)&&4==e[t.charCodeAt(0)].length},l=t.__arabicParser__.resolveLigatures=function(t){var e=0,r=n,i="",a=0;for(e=0;e<t.length;e+=1)void 0!==r[t.charCodeAt(e)]?(a++,"number"==typeof(r=r[t.charCodeAt(e)])&&(i+=String.fromCharCode(r),r=n,a=0),e===t.length-1&&(r=n,i+=t.charAt(e-(a-1)),e-=a-1,a=0)):(r=n,i+=t.charAt(e-a),e-=a,a=0);return i};t.__arabicParser__.isArabicDiacritic=function(t){return void 0!==t&&void 0!==r[t.charCodeAt(0)]};var f=t.__arabicParser__.getCorrectForm=function(t,e,n){return o(t)?!1===a(t)?-1:!h(t)||!o(e)&&!o(n)||!o(n)&&s(e)||s(t)&&!o(e)||s(t)&&c(e)||s(t)&&s(e)?0:u(t)&&o(e)&&!s(e)&&o(n)&&h(n)?3:s(t)||!o(n)?1:2:-1},d=function(t){var n=0,r=0,i=0,a="",s="",c="",h=(t=t||"").split("\\s+"),u=[];for(n=0;n<h.length;n+=1){for(u.push(""),r=0;r<h[n].length;r+=1)a=h[n][r],s=h[n][r-1],c=h[n][r+1],o(a)?(i=f(a,s,c),u[n]+=-1!==i?String.fromCharCode(e[a.charCodeAt(0)][i]):a):u[n]+=a;u[n]=l(u[n])}return u.join(" ")},p=t.__arabicParser__.processArabic=t.processArabic=function(){var t,e="string"==typeof arguments[0]?arguments[0]:arguments[0].text,n=[];if(Array.isArray(e)){var r=0;for(n=[],r=0;r<e.length;r+=1)Array.isArray(e[r])?n.push([d(e[r][0]),e[r][1],e[r][2]]):n.push([d(e[r])]);t=n}else t=d(e);return"string"==typeof arguments[0]?t:(arguments[0].text=t,arguments[0])};t.events.push(["preProcessText",p])}(It.API),It.API.autoPrint=function(t){var e;return"javascript"===((t=t||{}).variant=t.variant||"non-conform",t.variant)?this.addJS("print({});"):(this.internal.events.subscribe("postPutResources",(function(){e=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /Named"),this.internal.out("/Type /Action"),this.internal.out("/N /Print"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){this.internal.out("/OpenAction "+e+" 0 R")}))),this},function(t){var e=function(){var t=void 0;Object.defineProperty(this,"pdf",{get:function(){return t},set:function(e){t=e}});var e=150;Object.defineProperty(this,"width",{get:function(){return e},set:function(t){e=isNaN(t)||!1===Number.isInteger(t)||t<0?150:t,this.getContext("2d").pageWrapXEnabled&&(this.getContext("2d").pageWrapX=e+1)}});var n=300;Object.defineProperty(this,"height",{get:function(){return n},set:function(t){n=isNaN(t)||!1===Number.isInteger(t)||t<0?300:t,this.getContext("2d").pageWrapYEnabled&&(this.getContext("2d").pageWrapY=n+1)}});var r=[];Object.defineProperty(this,"childNodes",{get:function(){return r},set:function(t){r=t}});var i={};Object.defineProperty(this,"style",{get:function(){return i},set:function(t){i=t}}),Object.defineProperty(this,"parentNode",{})};e.prototype.getContext=function(t,e){var n;if("2d"!==(t=t||"2d"))return null;for(n in e)this.pdf.context2d.hasOwnProperty(n)&&(this.pdf.context2d[n]=e[n]);return this.pdf.context2d._canvas=this,this.pdf.context2d},e.prototype.toDataURL=function(){throw new Error("toDataURL is not implemented.")},t.events.push(["initialized",function(){this.canvas=new e,this.canvas.pdf=this}])}(It.API),function(t){var e={left:0,top:0,bottom:0,right:0},n=!1,i=function(){void 0===this.internal.__cell__&&(this.internal.__cell__={},this.internal.__cell__.padding=3,this.internal.__cell__.headerFunction=void 0,this.internal.__cell__.margins=Object.assign({},e),this.internal.__cell__.margins.width=this.getPageWidth(),a.call(this))},a=function(){this.internal.__cell__.lastCell=new o,this.internal.__cell__.pages=1},o=function(){var t=arguments[0];Object.defineProperty(this,"x",{enumerable:!0,get:function(){return t},set:function(e){t=e}});var e=arguments[1];Object.defineProperty(this,"y",{enumerable:!0,get:function(){return e},set:function(t){e=t}});var n=arguments[2];Object.defineProperty(this,"width",{enumerable:!0,get:function(){return n},set:function(t){n=t}});var r=arguments[3];Object.defineProperty(this,"height",{enumerable:!0,get:function(){return r},set:function(t){r=t}});var i=arguments[4];Object.defineProperty(this,"text",{enumerable:!0,get:function(){return i},set:function(t){i=t}});var a=arguments[5];Object.defineProperty(this,"lineNumber",{enumerable:!0,get:function(){return a},set:function(t){a=t}});var o=arguments[6];return Object.defineProperty(this,"align",{enumerable:!0,get:function(){return o},set:function(t){o=t}}),this};o.prototype.clone=function(){return new o(this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align)},o.prototype.toArray=function(){return[this.x,this.y,this.width,this.height,this.text,this.lineNumber,this.align]},t.setHeaderFunction=function(t){return i.call(this),this.internal.__cell__.headerFunction="function"==typeof t?t:void 0,this},t.getTextDimensions=function(t,e){i.call(this);var n=(e=e||{}).fontSize||this.getFontSize(),r=e.font||this.getFont(),a=e.scaleFactor||this.internal.scaleFactor,o=0,s=0,c=0,h=this;if(!Array.isArray(t)&&"string"!=typeof t){if("number"!=typeof t)throw new Error("getTextDimensions expects text-parameter to be of type String or type Number or an Array of Strings.");t=String(t)}var u=e.maxWidth;u>0?"string"==typeof t?t=this.splitTextToSize(t,u):"[object Array]"===Object.prototype.toString.call(t)&&(t=t.reduce((function(t,e){return t.concat(h.splitTextToSize(e,u))}),[])):t=Array.isArray(t)?t:[t];for(var l=0;l<t.length;l++)o<(c=this.getStringUnitWidth(t[l],{font:r})*n)&&(o=c);return 0!==o&&(s=t.length),{w:o/=a,h:Math.max((s*n*this.getLineHeightFactor()-n*(this.getLineHeightFactor()-1))/a,0)}},t.cellAddPage=function(){i.call(this),this.addPage();var t=this.internal.__cell__.margins||e;return this.internal.__cell__.lastCell=new o(t.left,t.top,void 0,void 0),this.internal.__cell__.pages+=1,this};var s=t.cell=function(){var t;t=arguments[0]instanceof o?arguments[0]:new o(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]),i.call(this);var r=this.internal.__cell__.lastCell,a=this.internal.__cell__.padding,s=this.internal.__cell__.margins||e,c=this.internal.__cell__.tableHeaderRow,h=this.internal.__cell__.printHeaders;return void 0!==r.lineNumber&&(r.lineNumber===t.lineNumber?(t.x=(r.x||0)+(r.width||0),t.y=r.y||0):r.y+r.height+t.height+s.bottom>this.getPageHeight()?(this.cellAddPage(),t.y=s.top,h&&c&&(this.printHeaderRow(t.lineNumber,!0),t.y+=c[0].height)):t.y=r.y+r.height||t.y),void 0!==t.text[0]&&(this.rect(t.x,t.y,t.width,t.height,!0===n?"FD":void 0),"right"===t.align?this.text(t.text,t.x+t.width-a,t.y+a,{align:"right",baseline:"top"}):"center"===t.align?this.text(t.text,t.x+t.width/2,t.y+a,{align:"center",baseline:"top",maxWidth:t.width-a-a}):this.text(t.text,t.x+a,t.y+a,{align:"left",baseline:"top",maxWidth:t.width-a-a})),this.internal.__cell__.lastCell=t,this};t.table=function(t,n,h,u,l){if(i.call(this),!h)throw new Error("No data for PDF table.");var f,d,p,g,m=[],v=[],b=[],y={},w={},N=[],L=[],A=(l=l||{}).autoSize||!1,x=!1!==l.printHeaders,S=l.css&&void 0!==l.css["font-size"]?16*l.css["font-size"]:l.fontSize||12,_=l.margins||Object.assign({width:this.getPageWidth()},e),P="number"==typeof l.padding?l.padding:3,k=l.headerBackgroundColor||"#c8c8c8",I=l.headerTextColor||"#000";if(a.call(this),this.internal.__cell__.printHeaders=x,this.internal.__cell__.margins=_,this.internal.__cell__.table_font_size=S,this.internal.__cell__.padding=P,this.internal.__cell__.headerBackgroundColor=k,this.internal.__cell__.headerTextColor=I,this.setFontSize(S),null==u)v=m=Object.keys(h[0]),b=m.map((function(){return"left"}));else if(Array.isArray(u)&&"object"===(0,r.A)(u[0]))for(m=u.map((function(t){return t.name})),v=u.map((function(t){return t.prompt||t.name||""})),b=u.map((function(t){return t.align||"left"})),f=0;f<u.length;f+=1)w[u[f].name]=u[f].width*(19.049976/25.4);else Array.isArray(u)&&"string"==typeof u[0]&&(v=m=u,b=m.map((function(){return"left"})));if(A||Array.isArray(u)&&"string"==typeof u[0])for(f=0;f<m.length;f+=1){for(y[g=m[f]]=h.map((function(t){return t[g]})),this.setFont(void 0,"bold"),N.push(this.getTextDimensions(v[f],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w),d=y[g],this.setFont(void 0,"normal"),p=0;p<d.length;p+=1)N.push(this.getTextDimensions(d[p],{fontSize:this.internal.__cell__.table_font_size,scaleFactor:this.internal.scaleFactor}).w);w[g]=Math.max.apply(null,N)+P+P,N=[]}if(x){var F={};for(f=0;f<m.length;f+=1)F[m[f]]={},F[m[f]].text=v[f],F[m[f]].align=b[f];var C=c.call(this,F,w);L=m.map((function(e){return new o(t,n,w[e],C,F[e].text,void 0,F[e].align)})),this.setTableHeaderRow(L),this.printHeaderRow(1,!1)}var j=u.reduce((function(t,e){return t[e.name]=e.align,t}),{});for(f=0;f<h.length;f+=1){"rowStart"in l&&l.rowStart instanceof Function&&l.rowStart({row:f,data:h[f]},this);var B=c.call(this,h[f],w);for(p=0;p<m.length;p+=1){var E=h[f][m[p]];"cellStart"in l&&l.cellStart instanceof Function&&l.cellStart({row:f,col:p,data:E},this),s.call(this,new o(t,n,w[m[p]],B,E,f+2,j[m[p]]))}}return this.internal.__cell__.table_x=t,this.internal.__cell__.table_y=n,this};var c=function(t,e){var n=this.internal.__cell__.padding,r=this.internal.__cell__.table_font_size,i=this.internal.scaleFactor;return Object.keys(t).map((function(r){var i=t[r];return this.splitTextToSize(i.hasOwnProperty("text")?i.text:i,e[r]-n-n)}),this).map((function(t){return this.getLineHeightFactor()*t.length*r/i+n+n}),this).reduce((function(t,e){return Math.max(t,e)}),0)};t.setTableHeaderRow=function(t){i.call(this),this.internal.__cell__.tableHeaderRow=t},t.printHeaderRow=function(t,e){if(i.call(this),!this.internal.__cell__.tableHeaderRow)throw new Error("Property tableHeaderRow does not exist.");var r;if(n=!0,"function"==typeof this.internal.__cell__.headerFunction){var a=this.internal.__cell__.headerFunction(this,this.internal.__cell__.pages);this.internal.__cell__.lastCell=new o(a[0],a[1],a[2],a[3],void 0,-1)}this.setFont(void 0,"bold");for(var c=[],h=0;h<this.internal.__cell__.tableHeaderRow.length;h+=1){r=this.internal.__cell__.tableHeaderRow[h].clone(),e&&(r.y=this.internal.__cell__.margins.top||0,c.push(r)),r.lineNumber=t;var u=this.getTextColor();this.setTextColor(this.internal.__cell__.headerTextColor),this.setFillColor(this.internal.__cell__.headerBackgroundColor),s.call(this,r),this.setTextColor(u)}c.length>0&&this.setTableHeaderRow(c),this.setFont(void 0,"normal"),n=!1}}(It.API);var ye={italic:["italic","oblique","normal"],oblique:["oblique","italic","normal"],normal:["normal","oblique","italic"]},we=["ultra-condensed","extra-condensed","condensed","semi-condensed","normal","semi-expanded","expanded","extra-expanded","ultra-expanded"],Ne=be(we),Le=[100,200,300,400,500,600,700,800,900],Ae=be(Le);function xe(t){var e=t.family.replace(/"|'/g,"").toLowerCase(),n=function(t){return ye[t=t||"normal"]?t:"normal"}(t.style),r=function(t){return t?"number"==typeof t?t>=100&&t<=900&&t%100==0?t:400:/^\d00$/.test(t)?parseInt(t):"bold"===t?700:400:400}(t.weight),i=function(t){return"number"==typeof Ne[t=t||"normal"]?t:"normal"}(t.stretch);return{family:e,style:n,weight:r,stretch:i,src:t.src||[],ref:t.ref||{name:e,style:[i,n,r].join(" ")}}}function Se(t,e,n,r){var i;for(i=n;i>=0&&i<e.length;i+=r)if(t[e[i]])return t[e[i]];for(i=n;i>=0&&i<e.length;i-=r)if(t[e[i]])return t[e[i]]}var _e={"sans-serif":"helvetica",fixed:"courier",monospace:"courier",terminal:"courier",cursive:"times",fantasy:"times",serif:"times"},Pe={caption:"times",icon:"times",menu:"times","message-box":"times","small-caption":"times","status-bar":"times"};function ke(t){return[t.stretch,t.style,t.weight,t.family].join(" ")}function Ie(t){return t.trimLeft()}function Fe(t,e){for(var n=0;n<t.length;){if(t.charAt(n)===e)return[t.substring(0,n),t.substring(n+1)];n+=1}return null}function Ce(t){var e=t.match(/^(-[a-z_]|[a-z_])[a-z0-9_-]*/i);return null===e?null:[e[0],t.substring(e[0].length)]}var je,Be,Ee,Oe=["times"];!function(t){var e,n,i,a,o,s,c,h,u,l=function(t){return t=t||{},this.isStrokeTransparent=t.isStrokeTransparent||!1,this.strokeOpacity=t.strokeOpacity||1,this.strokeStyle=t.strokeStyle||"#000000",this.fillStyle=t.fillStyle||"#000000",this.isFillTransparent=t.isFillTransparent||!1,this.fillOpacity=t.fillOpacity||1,this.font=t.font||"10px sans-serif",this.textBaseline=t.textBaseline||"alphabetic",this.textAlign=t.textAlign||"left",this.lineWidth=t.lineWidth||1,this.lineJoin=t.lineJoin||"miter",this.lineCap=t.lineCap||"butt",this.path=t.path||[],this.transform=void 0!==t.transform?t.transform.clone():new h,this.globalCompositeOperation=t.globalCompositeOperation||"normal",this.globalAlpha=t.globalAlpha||1,this.clip_path=t.clip_path||[],this.currentPoint=t.currentPoint||new s,this.miterLimit=t.miterLimit||10,this.lastPoint=t.lastPoint||new s,this.lineDashOffset=t.lineDashOffset||0,this.lineDash=t.lineDash||[],this.margin=t.margin||[0,0,0,0],this.prevPageLastElemOffset=t.prevPageLastElemOffset||0,this.ignoreClearRect="boolean"!=typeof t.ignoreClearRect||t.ignoreClearRect,this};t.events.push(["initialized",function(){this.context2d=new f(this),e=this.internal.f2,n=this.internal.getCoordinateString,i=this.internal.getVerticalCoordinateString,a=this.internal.getHorizontalCoordinate,o=this.internal.getVerticalCoordinate,s=this.internal.Point,c=this.internal.Rectangle,h=this.internal.Matrix,u=new l}]);var f=function(t){Object.defineProperty(this,"canvas",{get:function(){return{parentNode:!1,style:!1}}});var e=t;Object.defineProperty(this,"pdf",{get:function(){return e}});var n=!1;Object.defineProperty(this,"pageWrapXEnabled",{get:function(){return n},set:function(t){n=Boolean(t)}});var r=!1;Object.defineProperty(this,"pageWrapYEnabled",{get:function(){return r},set:function(t){r=Boolean(t)}});var i=0;Object.defineProperty(this,"posX",{get:function(){return i},set:function(t){isNaN(t)||(i=t)}});var a=0;Object.defineProperty(this,"posY",{get:function(){return a},set:function(t){isNaN(t)||(a=t)}}),Object.defineProperty(this,"margin",{get:function(){return u.margin},set:function(t){var e;"number"==typeof t?e=[t,t,t,t]:((e=new Array(4))[0]=t[0],e[1]=t.length>=2?t[1]:e[0],e[2]=t.length>=3?t[2]:e[0],e[3]=t.length>=4?t[3]:e[1]),u.margin=e}});var o=!1;Object.defineProperty(this,"autoPaging",{get:function(){return o},set:function(t){o=t}});var s=0;Object.defineProperty(this,"lastBreak",{get:function(){return s},set:function(t){s=t}});var c=[];Object.defineProperty(this,"pageBreaks",{get:function(){return c},set:function(t){c=t}}),Object.defineProperty(this,"ctx",{get:function(){return u},set:function(t){t instanceof l&&(u=t)}}),Object.defineProperty(this,"path",{get:function(){return u.path},set:function(t){u.path=t}});var h=[];Object.defineProperty(this,"ctxStack",{get:function(){return h},set:function(t){h=t}}),Object.defineProperty(this,"fillStyle",{get:function(){return this.ctx.fillStyle},set:function(t){var e;e=d(t),this.ctx.fillStyle=e.style,this.ctx.isFillTransparent=0===e.a,this.ctx.fillOpacity=e.a,this.pdf.setFillColor(e.r,e.g,e.b,{a:e.a}),this.pdf.setTextColor(e.r,e.g,e.b,{a:e.a})}}),Object.defineProperty(this,"strokeStyle",{get:function(){return this.ctx.strokeStyle},set:function(t){var e=d(t);this.ctx.strokeStyle=e.style,this.ctx.isStrokeTransparent=0===e.a,this.ctx.strokeOpacity=e.a,0===e.a?this.pdf.setDrawColor(255,255,255):(e.a,this.pdf.setDrawColor(e.r,e.g,e.b))}}),Object.defineProperty(this,"lineCap",{get:function(){return this.ctx.lineCap},set:function(t){-1!==["butt","round","square"].indexOf(t)&&(this.ctx.lineCap=t,this.pdf.setLineCap(t))}}),Object.defineProperty(this,"lineWidth",{get:function(){return this.ctx.lineWidth},set:function(t){isNaN(t)||(this.ctx.lineWidth=t,this.pdf.setLineWidth(t))}}),Object.defineProperty(this,"lineJoin",{get:function(){return this.ctx.lineJoin},set:function(t){-1!==["bevel","round","miter"].indexOf(t)&&(this.ctx.lineJoin=t,this.pdf.setLineJoin(t))}}),Object.defineProperty(this,"miterLimit",{get:function(){return this.ctx.miterLimit},set:function(t){isNaN(t)||(this.ctx.miterLimit=t,this.pdf.setMiterLimit(t))}}),Object.defineProperty(this,"textBaseline",{get:function(){return this.ctx.textBaseline},set:function(t){this.ctx.textBaseline=t}}),Object.defineProperty(this,"textAlign",{get:function(){return this.ctx.textAlign},set:function(t){-1!==["right","end","center","left","start"].indexOf(t)&&(this.ctx.textAlign=t)}});var f=null;function p(t,e){if(null===f){var n=function(t){var e=[];return Object.keys(t).forEach((function(n){t[n].forEach((function(t){var r=null;switch(t){case"bold":r={family:n,weight:"bold"};break;case"italic":r={family:n,style:"italic"};break;case"bolditalic":r={family:n,weight:"bold",style:"italic"};break;case"":case"normal":r={family:n}}null!==r&&(r.ref={name:n,style:t},e.push(r))}))})),e}(t.getFontList());f=function(t){for(var e={},n=0;n<t.length;++n){var r=xe(t[n]),i=r.family,a=r.stretch,o=r.style,s=r.weight;e[i]=e[i]||{},e[i][a]=e[i][a]||{},e[i][a][o]=e[i][a][o]||{},e[i][a][o][s]=r}return e}(n.concat(e))}return f}var g=null;Object.defineProperty(this,"fontFaces",{get:function(){return g},set:function(t){f=null,g=t}}),Object.defineProperty(this,"font",{get:function(){return this.ctx.font},set:function(t){var e;if(this.ctx.font=t,null!==(e=/^\s*(?=(?:(?:[-a-z]+\s*){0,2}(italic|oblique))?)(?=(?:(?:[-a-z]+\s*){0,2}(small-caps))?)(?=(?:(?:[-a-z]+\s*){0,2}(bold(?:er)?|lighter|[1-9]00))?)(?:(?:normal|\1|\2|\3)\s*){0,3}((?:xx?-)?(?:small|large)|medium|smaller|larger|[.\d]+(?:\%|in|[cem]m|ex|p[ctx]))(?:\s*\/\s*(normal|[.\d]+(?:\%|in|[cem]m|ex|p[ctx])))?\s*([-_,\"\'\sa-z]+?)\s*$/i.exec(t))){var n=e[1],r=(e[2],e[3]),i=e[4],a=(e[5],e[6]),o=/^([.\d]+)((?:%|in|[cem]m|ex|p[ctx]))$/i.exec(i)[2];i="px"===o?Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor):"em"===o?Math.floor(parseFloat(i)*this.pdf.getFontSize()):Math.floor(parseFloat(i)*this.pdf.internal.scaleFactor),this.pdf.setFontSize(i);var s=function(t){var e,n,r=[],i=t.trim();if(""===i)return Oe;if(i in Pe)return[Pe[i]];for(;""!==i;){switch(n=null,e=(i=Ie(i)).charAt(0)){case'"':case"'":n=Fe(i.substring(1),e);break;default:n=Ce(i)}if(null===n)return Oe;if(r.push(n[0]),""!==(i=Ie(n[1]))&&","!==i.charAt(0))return Oe;i=i.replace(/^,/,"")}return r}(a);if(this.fontFaces){var c=function(t,e,n){for(var r=(n=n||{}).defaultFontFamily||"times",i=Object.assign({},_e,n.genericFontFamilies||{}),a=null,o=null,s=0;s<e.length;++s)if(i[(a=xe(e[s])).family]&&(a.family=i[a.family]),t.hasOwnProperty(a.family)){o=t[a.family];break}if(!(o=o||t[r]))throw new Error("Could not find a font-family for the rule '"+ke(a)+"' and default family '"+r+"'.");if(o=function(t,e){if(e[t])return e[t];var n=Ne[t],r=n<=Ne.normal?-1:1,i=Se(e,we,n,r);if(!i)throw new Error("Could not find a matching font-stretch value for "+t);return i}(a.stretch,o),o=function(t,e){if(e[t])return e[t];for(var n=ye[t],r=0;r<n.length;++r)if(e[n[r]])return e[n[r]];throw new Error("Could not find a matching font-style for "+t)}(a.style,o),!(o=function(t,e){if(e[t])return e[t];if(400===t&&e[500])return e[500];if(500===t&&e[400])return e[400];var n=Ae[t],r=Se(e,Le,n,t<400?-1:1);if(!r)throw new Error("Could not find a matching font-weight for value "+t);return r}(a.weight,o)))throw new Error("Failed to resolve a font for the rule '"+ke(a)+"'.");return o}(p(this.pdf,this.fontFaces),s.map((function(t){return{family:t,stretch:"normal",weight:r,style:n}})));this.pdf.setFont(c.ref.name,c.ref.style)}else{var h="";("bold"===r||parseInt(r,10)>=700||"bold"===n)&&(h="bold"),"italic"===n&&(h+="italic"),0===h.length&&(h="normal");for(var u="",l={arial:"Helvetica",Arial:"Helvetica",verdana:"Helvetica",Verdana:"Helvetica",helvetica:"Helvetica",Helvetica:"Helvetica","sans-serif":"Helvetica",fixed:"Courier",monospace:"Courier",terminal:"Courier",cursive:"Times",fantasy:"Times",serif:"Times"},f=0;f<s.length;f++){if(void 0!==this.pdf.internal.getFont(s[f],h,{noFallback:!0,disableWarning:!0})){u=s[f];break}if("bolditalic"===h&&void 0!==this.pdf.internal.getFont(s[f],"bold",{noFallback:!0,disableWarning:!0}))u=s[f],h="bold";else if(void 0!==this.pdf.internal.getFont(s[f],"normal",{noFallback:!0,disableWarning:!0})){u=s[f],h="normal";break}}if(""===u)for(var d=0;d<s.length;d++)if(l[s[d]]){u=l[s[d]];break}u=""===u?"Times":u,this.pdf.setFont(u,h)}}}}),Object.defineProperty(this,"globalCompositeOperation",{get:function(){return this.ctx.globalCompositeOperation},set:function(t){this.ctx.globalCompositeOperation=t}}),Object.defineProperty(this,"globalAlpha",{get:function(){return this.ctx.globalAlpha},set:function(t){this.ctx.globalAlpha=t}}),Object.defineProperty(this,"lineDashOffset",{get:function(){return this.ctx.lineDashOffset},set:function(t){this.ctx.lineDashOffset=t,R.call(this)}}),Object.defineProperty(this,"lineDash",{get:function(){return this.ctx.lineDash},set:function(t){this.ctx.lineDash=t,R.call(this)}}),Object.defineProperty(this,"ignoreClearRect",{get:function(){return this.ctx.ignoreClearRect},set:function(t){this.ctx.ignoreClearRect=Boolean(t)}})};f.prototype.setLineDash=function(t){this.lineDash=t},f.prototype.getLineDash=function(){return this.lineDash.length%2?this.lineDash.concat(this.lineDash):this.lineDash.slice()},f.prototype.fill=function(){N.call(this,"fill",!1)},f.prototype.stroke=function(){N.call(this,"stroke",!1)},f.prototype.beginPath=function(){this.path=[{type:"begin"}]},f.prototype.moveTo=function(t,e){if(isNaN(t)||isNaN(e))throw $.error("jsPDF.context2d.moveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.moveTo");var n=this.ctx.transform.applyToPoint(new s(t,e));this.path.push({type:"mt",x:n.x,y:n.y}),this.ctx.lastPoint=new s(t,e)},f.prototype.closePath=function(){var t=new s(0,0),e=0;for(e=this.path.length-1;-1!==e;e--)if("begin"===this.path[e].type&&"object"===(0,r.A)(this.path[e+1])&&"number"==typeof this.path[e+1].x){t=new s(this.path[e+1].x,this.path[e+1].y);break}this.path.push({type:"close"}),this.ctx.lastPoint=new s(t.x,t.y)},f.prototype.lineTo=function(t,e){if(isNaN(t)||isNaN(e))throw $.error("jsPDF.context2d.lineTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.lineTo");var n=this.ctx.transform.applyToPoint(new s(t,e));this.path.push({type:"lt",x:n.x,y:n.y}),this.ctx.lastPoint=new s(n.x,n.y)},f.prototype.clip=function(){this.ctx.clip_path=JSON.parse(JSON.stringify(this.path)),N.call(this,null,!0)},f.prototype.quadraticCurveTo=function(t,e,n,r){if(isNaN(n)||isNaN(r)||isNaN(t)||isNaN(e))throw $.error("jsPDF.context2d.quadraticCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.quadraticCurveTo");var i=this.ctx.transform.applyToPoint(new s(n,r)),a=this.ctx.transform.applyToPoint(new s(t,e));this.path.push({type:"qct",x1:a.x,y1:a.y,x:i.x,y:i.y}),this.ctx.lastPoint=new s(i.x,i.y)},f.prototype.bezierCurveTo=function(t,e,n,r,i,a){if(isNaN(i)||isNaN(a)||isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r))throw $.error("jsPDF.context2d.bezierCurveTo: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.bezierCurveTo");var o=this.ctx.transform.applyToPoint(new s(i,a)),c=this.ctx.transform.applyToPoint(new s(t,e)),h=this.ctx.transform.applyToPoint(new s(n,r));this.path.push({type:"bct",x1:c.x,y1:c.y,x2:h.x,y2:h.y,x:o.x,y:o.y}),this.ctx.lastPoint=new s(o.x,o.y)},f.prototype.arc=function(t,e,n,r,i,a){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||isNaN(i))throw $.error("jsPDF.context2d.arc: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.arc");if(a=Boolean(a),!this.ctx.transform.isIdentity){var o=this.ctx.transform.applyToPoint(new s(t,e));t=o.x,e=o.y;var c=this.ctx.transform.applyToPoint(new s(0,n)),h=this.ctx.transform.applyToPoint(new s(0,0));n=Math.sqrt(Math.pow(c.x-h.x,2)+Math.pow(c.y-h.y,2))}Math.abs(i-r)>=2*Math.PI&&(r=0,i=2*Math.PI),this.path.push({type:"arc",x:t,y:e,radius:n,startAngle:r,endAngle:i,counterclockwise:a})},f.prototype.arcTo=function(t,e,n,r,i){throw new Error("arcTo not implemented.")},f.prototype.rect=function(t,e,n,r){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r))throw $.error("jsPDF.context2d.rect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rect");this.moveTo(t,e),this.lineTo(t+n,e),this.lineTo(t+n,e+r),this.lineTo(t,e+r),this.lineTo(t,e),this.lineTo(t+n,e),this.lineTo(t,e)},f.prototype.fillRect=function(t,e,n,r){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r))throw $.error("jsPDF.context2d.fillRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillRect");if(!p.call(this)){var i={};"butt"!==this.lineCap&&(i.lineCap=this.lineCap,this.lineCap="butt"),"miter"!==this.lineJoin&&(i.lineJoin=this.lineJoin,this.lineJoin="miter"),this.beginPath(),this.rect(t,e,n,r),this.fill(),i.hasOwnProperty("lineCap")&&(this.lineCap=i.lineCap),i.hasOwnProperty("lineJoin")&&(this.lineJoin=i.lineJoin)}},f.prototype.strokeRect=function(t,e,n,r){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r))throw $.error("jsPDF.context2d.strokeRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeRect");g.call(this)||(this.beginPath(),this.rect(t,e,n,r),this.stroke())},f.prototype.clearRect=function(t,e,n,r){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r))throw $.error("jsPDF.context2d.clearRect: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.clearRect");this.ignoreClearRect||(this.fillStyle="#ffffff",this.fillRect(t,e,n,r))},f.prototype.save=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,n=0;n<this.pdf.internal.getNumberOfPages();n++)this.pdf.setPage(n+1),this.pdf.internal.out("q");if(this.pdf.setPage(e),t){this.ctx.fontSize=this.pdf.internal.getFontSize();var r=new l(this.ctx);this.ctxStack.push(this.ctx),this.ctx=r}},f.prototype.restore=function(t){t="boolean"!=typeof t||t;for(var e=this.pdf.internal.getCurrentPageInfo().pageNumber,n=0;n<this.pdf.internal.getNumberOfPages();n++)this.pdf.setPage(n+1),this.pdf.internal.out("Q");this.pdf.setPage(e),t&&0!==this.ctxStack.length&&(this.ctx=this.ctxStack.pop(),this.fillStyle=this.ctx.fillStyle,this.strokeStyle=this.ctx.strokeStyle,this.font=this.ctx.font,this.lineCap=this.ctx.lineCap,this.lineWidth=this.ctx.lineWidth,this.lineJoin=this.ctx.lineJoin,this.lineDash=this.ctx.lineDash,this.lineDashOffset=this.ctx.lineDashOffset)},f.prototype.toDataURL=function(){throw new Error("toDataUrl not implemented.")};var d=function(t){var e,n,r,i;if(!0===t.isCanvasGradient&&(t=t.getColor()),!t)return{r:0,g:0,b:0,a:0,style:t};if(/transparent|rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*0+\s*\)/.test(t))e=0,n=0,r=0,i=0;else{var a=/rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/.exec(t);if(null!==a)e=parseInt(a[1]),n=parseInt(a[2]),r=parseInt(a[3]),i=1;else if(null!==(a=/rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.]+)\s*\)/.exec(t)))e=parseInt(a[1]),n=parseInt(a[2]),r=parseInt(a[3]),i=parseFloat(a[4]);else{if(i=1,"string"==typeof t&&"#"!==t.charAt(0)){var o=new at(t);t=o.ok?o.toHex():"#000000"}4===t.length?(e=t.substring(1,2),e+=e,n=t.substring(2,3),n+=n,r=t.substring(3,4),r+=r):(e=t.substring(1,3),n=t.substring(3,5),r=t.substring(5,7)),e=parseInt(e,16),n=parseInt(n,16),r=parseInt(r,16)}}return{r:e,g:n,b:r,a:i,style:t}},p=function(){return this.ctx.isFillTransparent||0==this.globalAlpha},g=function(){return Boolean(this.ctx.isStrokeTransparent||0==this.globalAlpha)};f.prototype.fillText=function(t,e,n,r){if(isNaN(e)||isNaN(n)||"string"!=typeof t)throw $.error("jsPDF.context2d.fillText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.fillText");if(r=isNaN(r)?void 0:r,!p.call(this)){var i=O(this.ctx.transform.rotation),a=this.ctx.transform.scaleX;I.call(this,{text:t,x:e,y:n,scale:a,angle:i,align:this.textAlign,maxWidth:r})}},f.prototype.strokeText=function(t,e,n,r){if(isNaN(e)||isNaN(n)||"string"!=typeof t)throw $.error("jsPDF.context2d.strokeText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.strokeText");if(!g.call(this)){r=isNaN(r)?void 0:r;var i=O(this.ctx.transform.rotation),a=this.ctx.transform.scaleX;I.call(this,{text:t,x:e,y:n,scale:a,renderingMode:"stroke",angle:i,align:this.textAlign,maxWidth:r})}},f.prototype.measureText=function(t){if("string"!=typeof t)throw $.error("jsPDF.context2d.measureText: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.measureText");var e=this.pdf,n=this.pdf.internal.scaleFactor,r=e.internal.getFontSize(),i=e.getStringUnitWidth(t)*r/e.internal.scaleFactor;return new function(t){var e=(t=t||{}).width||0;return Object.defineProperty(this,"width",{get:function(){return e}}),this}({width:i*=Math.round(96*n/72*1e4)/1e4})},f.prototype.scale=function(t,e){if(isNaN(t)||isNaN(e))throw $.error("jsPDF.context2d.scale: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.scale");var n=new h(t,0,0,e,0,0);this.ctx.transform=this.ctx.transform.multiply(n)},f.prototype.rotate=function(t){if(isNaN(t))throw $.error("jsPDF.context2d.rotate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.rotate");var e=new h(Math.cos(t),Math.sin(t),-Math.sin(t),Math.cos(t),0,0);this.ctx.transform=this.ctx.transform.multiply(e)},f.prototype.translate=function(t,e){if(isNaN(t)||isNaN(e))throw $.error("jsPDF.context2d.translate: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.translate");var n=new h(1,0,0,1,t,e);this.ctx.transform=this.ctx.transform.multiply(n)},f.prototype.transform=function(t,e,n,r,i,a){if(isNaN(t)||isNaN(e)||isNaN(n)||isNaN(r)||isNaN(i)||isNaN(a))throw $.error("jsPDF.context2d.transform: Invalid arguments",arguments),new Error("Invalid arguments passed to jsPDF.context2d.transform");var o=new h(t,e,n,r,i,a);this.ctx.transform=this.ctx.transform.multiply(o)},f.prototype.setTransform=function(t,e,n,r,i,a){t=isNaN(t)?1:t,e=isNaN(e)?0:e,n=isNaN(n)?0:n,r=isNaN(r)?1:r,i=isNaN(i)?0:i,a=isNaN(a)?0:a,this.ctx.transform=new h(t,e,n,r,i,a)};var m=function(){return this.margin[0]>0||this.margin[1]>0||this.margin[2]>0||this.margin[3]>0};f.prototype.drawImage=function(t,e,n,r,i,a,o,s,u){var l=this.pdf.getImageProperties(t),f=1,d=1,p=1,g=1;void 0!==r&&void 0!==s&&(p=s/r,g=u/i,f=l.width/r*s/r,d=l.height/i*u/i),void 0===a&&(a=e,o=n,e=0,n=0),void 0!==r&&void 0===s&&(s=r,u=i),void 0===r&&void 0===s&&(s=l.width,u=l.height);for(var b,N=this.ctx.transform.decompose(),A=O(N.rotate.shx),x=new h,S=(x=(x=(x=x.multiply(N.translate)).multiply(N.skew)).multiply(N.scale)).applyToRectangle(new c(a-e*p,o-n*g,r*f,i*d)),_=v.call(this,S),P=[],k=0;k<_.length;k+=1)-1===P.indexOf(_[k])&&P.push(_[k]);if(w(P),this.autoPaging)for(var I=P[0],F=P[P.length-1],C=I;C<F+1;C++){this.pdf.setPage(C);var j=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],B=1===C?this.posY+this.margin[0]:this.margin[0],E=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],M=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],q=1===C?0:E+(C-2)*M;if(0!==this.ctx.clip_path.length){var R=this.path;b=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(b,this.posX+this.margin[3],-q+B+this.ctx.prevPageLastElemOffset),L.call(this,"fill",!0),this.path=R}var D=JSON.parse(JSON.stringify(S));D=y([D],this.posX+this.margin[3],-q+B+this.ctx.prevPageLastElemOffset)[0];var T=(C>I||C<F)&&m.call(this);T&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],j,M,null).clip().discardPath()),this.pdf.addImage(t,"JPEG",D.x,D.y,D.w,D.h,null,null,A),T&&this.pdf.restoreGraphicsState()}else this.pdf.addImage(t,"JPEG",S.x,S.y,S.w,S.h,null,null,A)};var v=function(t,e,n){var r=[];e=e||this.pdf.internal.pageSize.width,n=n||this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2];var i=this.posY+this.ctx.prevPageLastElemOffset;switch(t.type){default:case"mt":case"lt":r.push(Math.floor((t.y+i)/n)+1);break;case"arc":r.push(Math.floor((t.y+i-t.radius)/n)+1),r.push(Math.floor((t.y+i+t.radius)/n)+1);break;case"qct":var a=M(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x,t.y);r.push(Math.floor((a.y+i)/n)+1),r.push(Math.floor((a.y+a.h+i)/n)+1);break;case"bct":var o=q(this.ctx.lastPoint.x,this.ctx.lastPoint.y,t.x1,t.y1,t.x2,t.y2,t.x,t.y);r.push(Math.floor((o.y+i)/n)+1),r.push(Math.floor((o.y+o.h+i)/n)+1);break;case"rect":r.push(Math.floor((t.y+i)/n)+1),r.push(Math.floor((t.y+t.h+i)/n)+1)}for(var s=0;s<r.length;s+=1)for(;this.pdf.internal.getNumberOfPages()<r[s];)b.call(this);return r},b=function(){var t=this.fillStyle,e=this.strokeStyle,n=this.font,r=this.lineCap,i=this.lineWidth,a=this.lineJoin;this.pdf.addPage(),this.fillStyle=t,this.strokeStyle=e,this.font=n,this.lineCap=r,this.lineWidth=i,this.lineJoin=a},y=function(t,e,n){for(var r=0;r<t.length;r++)switch(t[r].type){case"bct":t[r].x2+=e,t[r].y2+=n;case"qct":t[r].x1+=e,t[r].y1+=n;default:t[r].x+=e,t[r].y+=n}return t},w=function(t){return t.sort((function(t,e){return t-e}))},N=function(t,e){for(var n,r,i=this.fillStyle,a=this.strokeStyle,o=this.lineCap,s=this.lineWidth,c=Math.abs(s*this.ctx.transform.scaleX),h=this.lineJoin,u=JSON.parse(JSON.stringify(this.path)),l=JSON.parse(JSON.stringify(this.path)),f=[],d=0;d<l.length;d++)if(void 0!==l[d].x)for(var p=v.call(this,l[d]),g=0;g<p.length;g+=1)-1===f.indexOf(p[g])&&f.push(p[g]);for(var N=0;N<f.length;N++)for(;this.pdf.internal.getNumberOfPages()<f[N];)b.call(this);if(w(f),this.autoPaging)for(var A=f[0],x=f[f.length-1],S=A;S<x+1;S++){this.pdf.setPage(S),this.fillStyle=i,this.strokeStyle=a,this.lineCap=o,this.lineWidth=c,this.lineJoin=h;var _=this.pdf.internal.pageSize.width-this.margin[3]-this.margin[1],P=1===S?this.posY+this.margin[0]:this.margin[0],k=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],I=this.pdf.internal.pageSize.height-this.margin[0]-this.margin[2],F=1===S?0:k+(S-2)*I;if(0!==this.ctx.clip_path.length){var C=this.path;n=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(n,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),L.call(this,t,!0),this.path=C}if(r=JSON.parse(JSON.stringify(u)),this.path=y(r,this.posX+this.margin[3],-F+P+this.ctx.prevPageLastElemOffset),!1===e||0===S){var j=(S>A||S<x)&&m.call(this);j&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],_,I,null).clip().discardPath()),L.call(this,t,e),j&&this.pdf.restoreGraphicsState()}this.lineWidth=s}else this.lineWidth=c,L.call(this,t,e),this.lineWidth=s;this.path=u},L=function(t,e){if(("stroke"!==t||e||!g.call(this))&&("stroke"===t||e||!p.call(this))){for(var n,r,i=[],a=this.path,o=0;o<a.length;o++){var s=a[o];switch(s.type){case"begin":i.push({begin:!0});break;case"close":i.push({close:!0});break;case"mt":i.push({start:s,deltas:[],abs:[]});break;case"lt":var c=i.length;if(a[o-1]&&!isNaN(a[o-1].x)&&(n=[s.x-a[o-1].x,s.y-a[o-1].y],c>0))for(;c>=0;c--)if(!0!==i[c-1].close&&!0!==i[c-1].begin){i[c-1].deltas.push(n),i[c-1].abs.push(s);break}break;case"bct":n=[s.x1-a[o-1].x,s.y1-a[o-1].y,s.x2-a[o-1].x,s.y2-a[o-1].y,s.x-a[o-1].x,s.y-a[o-1].y],i[i.length-1].deltas.push(n);break;case"qct":var h=a[o-1].x+2/3*(s.x1-a[o-1].x),u=a[o-1].y+2/3*(s.y1-a[o-1].y),l=s.x+2/3*(s.x1-s.x),f=s.y+2/3*(s.y1-s.y),d=s.x,m=s.y;n=[h-a[o-1].x,u-a[o-1].y,l-a[o-1].x,f-a[o-1].y,d-a[o-1].x,m-a[o-1].y],i[i.length-1].deltas.push(n);break;case"arc":i.push({deltas:[],abs:[],arc:!0}),Array.isArray(i[i.length-1].abs)&&i[i.length-1].abs.push(s)}}r=e?null:"stroke"===t?"stroke":"fill";for(var v=!1,b=0;b<i.length;b++)if(i[b].arc)for(var y=i[b].abs,w=0;w<y.length;w++){var N=y[w];"arc"===N.type?S.call(this,N.x,N.y,N.radius,N.startAngle,N.endAngle,N.counterclockwise,void 0,e,!v):F.call(this,N.x,N.y),v=!0}else if(!0===i[b].close)this.pdf.internal.out("h"),v=!1;else if(!0!==i[b].begin){var L=i[b].start.x,A=i[b].start.y;C.call(this,i[b].deltas,L,A),v=!0}r&&_.call(this,r),e&&P.call(this)}},A=function(t){var e=this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor,n=e*(this.pdf.internal.getLineHeightFactor()-1);switch(this.ctx.textBaseline){case"bottom":return t-n;case"top":return t+e-n;case"hanging":return t+e-2*n;case"middle":return t+e/2-n;default:return t}},x=function(t){return t+this.pdf.internal.getFontSize()/this.pdf.internal.scaleFactor*(this.pdf.internal.getLineHeightFactor()-1)};f.prototype.createLinearGradient=function(){var t=function(){};return t.colorStops=[],t.addColorStop=function(t,e){this.colorStops.push([t,e])},t.getColor=function(){return 0===this.colorStops.length?"#000000":this.colorStops[0][1]},t.isCanvasGradient=!0,t},f.prototype.createPattern=function(){return this.createLinearGradient()},f.prototype.createRadialGradient=function(){return this.createLinearGradient()};var S=function(t,e,n,r,i,a,o,s,c){for(var h=B.call(this,n,r,i,a),u=0;u<h.length;u++){var l=h[u];0===u&&(c?k.call(this,l.x1+t,l.y1+e):F.call(this,l.x1+t,l.y1+e)),j.call(this,t,e,l.x2,l.y2,l.x3,l.y3,l.x4,l.y4)}s?P.call(this):_.call(this,o)},_=function(t){switch(t){case"stroke":this.pdf.internal.out("S");break;case"fill":this.pdf.internal.out("f")}},P=function(){this.pdf.clip(),this.pdf.discardPath()},k=function(t,e){this.pdf.internal.out(n(t)+" "+i(e)+" m")},I=function(t){var e;switch(t.align){case"right":case"end":e="right";break;case"center":e="center";break;default:e="left"}var n=this.pdf.getTextDimensions(t.text),r=A.call(this,t.y),i=x.call(this,r)-n.h,a=this.ctx.transform.applyToPoint(new s(t.x,r)),o=this.ctx.transform.decompose(),u=new h;u=(u=(u=u.multiply(o.translate)).multiply(o.skew)).multiply(o.scale);for(var l,f,d,p=this.ctx.transform.applyToRectangle(new c(t.x,r,n.w,n.h)),g=u.applyToRectangle(new c(t.x,i,n.w,n.h)),b=v.call(this,g),N=[],S=0;S<b.length;S+=1)-1===N.indexOf(b[S])&&N.push(b[S]);if(w(N),this.autoPaging)for(var _=N[0],P=N[N.length-1],k=_;k<P+1;k++){this.pdf.setPage(k);var I=1===k?this.posY+this.margin[0]:this.margin[0],F=this.pdf.internal.pageSize.height-this.posY-this.margin[0]-this.margin[2],C=this.pdf.internal.pageSize.height-this.margin[2],j=C-this.margin[0],B=this.pdf.internal.pageSize.width-this.margin[1],E=B-this.margin[3],O=1===k?0:F+(k-2)*j;if(0!==this.ctx.clip_path.length){var M=this.path;l=JSON.parse(JSON.stringify(this.ctx.clip_path)),this.path=y(l,this.posX+this.margin[3],-1*O+I),L.call(this,"fill",!0),this.path=M}var q=y([JSON.parse(JSON.stringify(g))],this.posX+this.margin[3],-O+I+this.ctx.prevPageLastElemOffset)[0];t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale);var R="text"!==this.autoPaging;if(R||q.y+q.h<=C){if(R||q.y>=I&&q.x<=B){var D=R?t.text:this.pdf.splitTextToSize(t.text,t.maxWidth||B-q.x)[0],T=y([JSON.parse(JSON.stringify(p))],this.posX+this.margin[3],-O+I+this.ctx.prevPageLastElemOffset)[0],z=R&&(k>_||k<P)&&m.call(this);z&&(this.pdf.saveGraphicsState(),this.pdf.rect(this.margin[3],this.margin[0],E,j,null).clip().discardPath()),this.pdf.text(D,T.x,T.y,{angle:t.angle,align:e,renderingMode:t.renderingMode}),z&&this.pdf.restoreGraphicsState()}}else q.y<C&&(this.ctx.prevPageLastElemOffset+=C-q.y);t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)}else t.scale>=.01&&(f=this.pdf.internal.getFontSize(),this.pdf.setFontSize(f*t.scale),d=this.lineWidth,this.lineWidth=d*t.scale),this.pdf.text(t.text,a.x+this.posX,a.y+this.posY,{angle:t.angle,align:e,renderingMode:t.renderingMode,maxWidth:t.maxWidth}),t.scale>=.01&&(this.pdf.setFontSize(f),this.lineWidth=d)},F=function(t,e,r,a){r=r||0,a=a||0,this.pdf.internal.out(n(t+r)+" "+i(e+a)+" l")},C=function(t,e,n){return this.pdf.lines(t,e,n,null,null)},j=function(t,n,r,i,s,c,h,u){this.pdf.internal.out([e(a(r+t)),e(o(i+n)),e(a(s+t)),e(o(c+n)),e(a(h+t)),e(o(u+n)),"c"].join(" "))},B=function(t,e,n,r){for(var i=2*Math.PI,a=Math.PI/2;e>n;)e-=i;var o=Math.abs(n-e);o<i&&r&&(o=i-o);for(var s=[],c=r?-1:1,h=e;o>1e-5;){var u=h+c*Math.min(o,a);s.push(E.call(this,t,h,u)),o-=Math.abs(u-h),h=u}return s},E=function(t,e,n){var r=(n-e)/2,i=t*Math.cos(r),a=t*Math.sin(r),o=i,s=-a,c=o*o+s*s,h=c+o*i+s*a,u=4/3*(Math.sqrt(2*c*h)-h)/(o*a-s*i),l=o-u*s,f=s+u*o,d=l,p=-f,g=r+e,m=Math.cos(g),v=Math.sin(g);return{x1:t*Math.cos(e),y1:t*Math.sin(e),x2:l*m-f*v,y2:l*v+f*m,x3:d*m-p*v,y3:d*v+p*m,x4:t*Math.cos(n),y4:t*Math.sin(n)}},O=function(t){return 180*t/Math.PI},M=function(t,e,n,r,i,a){var o=t+.5*(n-t),s=e+.5*(r-e),h=i+.5*(n-i),u=a+.5*(r-a),l=Math.min(t,i,o,h),f=Math.max(t,i,o,h),d=Math.min(e,a,s,u),p=Math.max(e,a,s,u);return new c(l,d,f-l,p-d)},q=function(t,e,n,r,i,a,o,s){var h,u,l,f,d,p,g,m,v,b,y,w,N,L,A=n-t,x=r-e,S=i-n,_=a-r,P=o-i,k=s-a;for(u=0;u<41;u++)v=(g=(l=t+(h=u/40)*A)+h*((d=n+h*S)-l))+h*(d+h*(i+h*P-d)-g),b=(m=(f=e+h*x)+h*((p=r+h*_)-f))+h*(p+h*(a+h*k-p)-m),0==u?(y=v,w=b,N=v,L=b):(y=Math.min(y,v),w=Math.min(w,b),N=Math.max(N,v),L=Math.max(L,b));return new c(Math.round(y),Math.round(w),Math.round(N-y),Math.round(L-w))},R=function(){if(this.prevLineDash||this.ctx.lineDash.length||this.ctx.lineDashOffset){var t,e,n=(t=this.ctx.lineDash,e=this.ctx.lineDashOffset,JSON.stringify({lineDash:t,lineDashOffset:e}));this.prevLineDash!==n&&(this.pdf.setLineDash(this.ctx.lineDash,this.ctx.lineDashOffset),this.prevLineDash=n)}}}(It.API),function(t){var e=function(t){var e,n,r,i,a,o,s,c,h,u;for(/[^\x00-\xFF]/.test(t),n=[],r=0,i=(t+=e="\0\0\0\0".slice(t.length%4||4)).length;i>r;r+=4)0!==(a=(t.charCodeAt(r)<<24)+(t.charCodeAt(r+1)<<16)+(t.charCodeAt(r+2)<<8)+t.charCodeAt(r+3))?(o=(a=((a=((a=((a=(a-(u=a%85))/85)-(h=a%85))/85)-(c=a%85))/85)-(s=a%85))/85)%85,n.push(o+33,s+33,c+33,h+33,u+33)):n.push(122);return function(t,e){for(var n=e;n>0;n--)t.pop()}(n,e.length),String.fromCharCode.apply(String,n)+"~>"},n=function(t){var e,n,r,i,a,o=String,s="length",c=255,h="charCodeAt",u="slice",l="replace";for(t[u](-2),t=t[u](0,-2)[l](/\s/g,"")[l]("z","!!!!!"),r=[],i=0,a=(t+=e="uuuuu"[u](t[s]%5||5))[s];a>i;i+=5)n=52200625*(t[h](i)-33)+614125*(t[h](i+1)-33)+7225*(t[h](i+2)-33)+85*(t[h](i+3)-33)+(t[h](i+4)-33),r.push(c&n>>24,c&n>>16,c&n>>8,c&n);return function(t,e){for(var n=e;n>0;n--)t.pop()}(r,e[s]),o.fromCharCode.apply(o,r)},r=function(t){var e=new RegExp(/^([0-9A-Fa-f]{2})+$/);if(-1!==(t=t.replace(/\s/g,"")).indexOf(">")&&(t=t.substr(0,t.indexOf(">"))),t.length%2&&(t+="0"),!1===e.test(t))return"";for(var n="",r=0;r<t.length;r+=2)n+=String.fromCharCode("0x"+(t[r]+t[r+1]));return n},i=function(t){for(var e=new Uint8Array(t.length),n=t.length;n--;)e[n]=t.charCodeAt(n);return(e=Y(e)).reduce((function(t,e){return t+String.fromCharCode(e)}),"")};t.processDataByFilters=function(t,a){var o=0,s=t||"",c=[];for("string"==typeof(a=a||[])&&(a=[a]),o=0;o<a.length;o+=1)switch(a[o]){case"ASCII85Decode":case"/ASCII85Decode":s=n(s),c.push("/ASCII85Encode");break;case"ASCII85Encode":case"/ASCII85Encode":s=e(s),c.push("/ASCII85Decode");break;case"ASCIIHexDecode":case"/ASCIIHexDecode":s=r(s),c.push("/ASCIIHexEncode");break;case"ASCIIHexEncode":case"/ASCIIHexEncode":s=s.split("").map((function(t){return("0"+t.charCodeAt().toString(16)).slice(-2)})).join("")+">",c.push("/ASCIIHexDecode");break;case"FlateEncode":case"/FlateEncode":s=i(s),c.push("/FlateDecode");break;default:throw new Error('The filter: "'+a[o]+'" is not implemented')}return{data:s,reverseChain:c.reverse().join(" ")}}}(It.API),function(t){t.loadFile=function(t,e,n){return function(t,e,n){e=!1!==e,n="function"==typeof n?n:function(){};var r=void 0;try{r=function(t,e,n){var r=new XMLHttpRequest,i=0,a=function(t){var e=t.length,n=[],r=String.fromCharCode;for(i=0;i<e;i+=1)n.push(r(255&t.charCodeAt(i)));return n.join("")};if(r.open("GET",t,!e),r.overrideMimeType("text/plain; charset=x-user-defined"),!1===e&&(r.onload=function(){200===r.status?n(a(this.responseText)):n(void 0)}),r.send(null),e&&200===r.status)return a(r.responseText)}(t,e,n)}catch(t){}return r}(t,e,n)},t.loadImageFile=t.loadFile}(It.API),function(t){function e(){return(K.html2canvas?Promise.resolve(K.html2canvas):n.e(939).then(n.t.bind(n,2939,23))).catch((function(t){return Promise.reject(new Error("Could not load html2canvas: "+t))})).then((function(t){return t.default?t.default:t}))}function i(){return(K.DOMPurify?Promise.resolve(K.DOMPurify):n.e(897).then(n.t.bind(n,1897,23))).catch((function(t){return Promise.reject(new Error("Could not load dompurify: "+t))})).then((function(t){return t.default?t.default:t}))}var a=function(t){var e=(0,r.A)(t);return"undefined"===e?"undefined":"string"===e||t instanceof String?"string":"number"===e||t instanceof Number?"number":"function"===e||t instanceof Function?"function":t&&t.constructor===Array?"array":t&&1===t.nodeType?"element":"object"===e?"object":"unknown"},o=function(t,e){var n=document.createElement(t);for(var r in e.className&&(n.className=e.className),e.innerHTML&&e.dompurify&&(n.innerHTML=e.dompurify.sanitize(e.innerHTML)),e.style)n.style[r]=e.style[r];return n},s=function t(e){var n=Object.assign(t.convert(Promise.resolve()),JSON.parse(JSON.stringify(t.template))),r=t.convert(Promise.resolve(),n);return(r=r.setProgress(1,t,1,[t])).set(e)};(s.prototype=Object.create(Promise.prototype)).constructor=s,s.convert=function(t,e){return t.__proto__=e||s.prototype,t},s.template={prop:{src:null,container:null,overlay:null,canvas:null,img:null,pdf:null,pageSize:null,callback:function(){}},progress:{val:0,state:null,n:0,stack:[]},opt:{filename:"file.pdf",margin:[0,0,0,0],enableLinks:!0,x:0,y:0,html2canvas:{},jsPDF:{},backgroundColor:"transparent"}},s.prototype.from=function(t,e){return this.then((function(){switch(e=e||function(t){switch(a(t)){case"string":return"string";case"element":return"canvas"===t.nodeName.toLowerCase()?"canvas":"element";default:return"unknown"}}(t)){case"string":return this.then(i).then((function(e){return this.set({src:o("div",{innerHTML:t,dompurify:e})})}));case"element":return this.set({src:t});case"canvas":return this.set({canvas:t});case"img":return this.set({img:t});default:return this.error("Unknown source type.")}}))},s.prototype.to=function(t){switch(t){case"container":return this.toContainer();case"canvas":return this.toCanvas();case"img":return this.toImg();case"pdf":return this.toPdf();default:return this.error("Invalid target.")}},s.prototype.toContainer=function(){return this.thenList([function(){return this.prop.src||this.error("Cannot duplicate - no source HTML.")},function(){return this.prop.pageSize||this.setPageSize()}]).then((function(){var t={position:"relative",display:"inline-block",width:("number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?Math.max(this.prop.src.clientWidth,this.prop.src.scrollWidth,this.prop.src.offsetWidth):this.opt.windowWidth)+"px",left:0,right:0,top:0,margin:"auto",backgroundColor:this.opt.backgroundColor},e=function t(e,n){for(var r=3===e.nodeType?document.createTextNode(e.nodeValue):e.cloneNode(!1),i=e.firstChild;i;i=i.nextSibling)!0!==n&&1===i.nodeType&&"SCRIPT"===i.nodeName||r.appendChild(t(i,n));return 1===e.nodeType&&("CANVAS"===e.nodeName?(r.width=e.width,r.height=e.height,r.getContext("2d").drawImage(e,0,0)):"TEXTAREA"!==e.nodeName&&"SELECT"!==e.nodeName||(r.value=e.value),r.addEventListener("load",(function(){r.scrollTop=e.scrollTop,r.scrollLeft=e.scrollLeft}),!0)),r}(this.prop.src,this.opt.html2canvas.javascriptEnabled);"BODY"===e.tagName&&(t.height=Math.max(document.body.scrollHeight,document.body.offsetHeight,document.documentElement.clientHeight,document.documentElement.scrollHeight,document.documentElement.offsetHeight)+"px"),this.prop.overlay=o("div",{className:"html2pdf__overlay",style:{position:"fixed",overflow:"hidden",zIndex:1e3,left:"-100000px",right:0,bottom:0,top:0}}),this.prop.container=o("div",{className:"html2pdf__container",style:t}),this.prop.container.appendChild(e),this.prop.container.firstChild.appendChild(o("div",{style:{clear:"both",border:"0 none transparent",margin:0,padding:0,height:0}})),this.prop.container.style.float="none",this.prop.overlay.appendChild(this.prop.container),document.body.appendChild(this.prop.overlay),this.prop.container.firstChild.style.position="relative",this.prop.container.height=Math.max(this.prop.container.firstChild.clientHeight,this.prop.container.firstChild.scrollHeight,this.prop.container.firstChild.offsetHeight)+"px"}))},s.prototype.toCanvas=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(e).then((function(t){var e=Object.assign({},this.opt.html2canvas);return delete e.onrendered,t(this.prop.container,e)})).then((function(t){(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toContext2d=function(){var t=[function(){return document.body.contains(this.prop.container)||this.toContainer()}];return this.thenList(t).then(e).then((function(t){var e=this.opt.jsPDF,n=this.opt.fontFaces,r="number"!=typeof this.opt.width||isNaN(this.opt.width)||"number"!=typeof this.opt.windowWidth||isNaN(this.opt.windowWidth)?1:this.opt.width/this.opt.windowWidth,i=Object.assign({async:!0,allowTaint:!0,scale:r,scrollX:this.opt.scrollX||0,scrollY:this.opt.scrollY||0,backgroundColor:"#ffffff",imageTimeout:15e3,logging:!0,proxy:null,removeContainer:!0,foreignObjectRendering:!1,useCORS:!1},this.opt.html2canvas);if(delete i.onrendered,e.context2d.autoPaging=void 0===this.opt.autoPaging||this.opt.autoPaging,e.context2d.posX=this.opt.x,e.context2d.posY=this.opt.y,e.context2d.margin=this.opt.margin,e.context2d.fontFaces=n,n)for(var a=0;a<n.length;++a){var o=n[a],s=o.src.find((function(t){return"truetype"===t.format}));s&&e.addFont(s.url,o.ref.name,o.ref.style)}return i.windowHeight=i.windowHeight||0,i.windowHeight=0==i.windowHeight?Math.max(this.prop.container.clientHeight,this.prop.container.scrollHeight,this.prop.container.offsetHeight):i.windowHeight,e.context2d.save(!0),t(this.prop.container,i)})).then((function(t){this.opt.jsPDF.context2d.restore(!0),(this.opt.html2canvas.onrendered||function(){})(t),this.prop.canvas=t,document.body.removeChild(this.prop.overlay)}))},s.prototype.toImg=function(){return this.thenList([function(){return this.prop.canvas||this.toCanvas()}]).then((function(){var t=this.prop.canvas.toDataURL("image/"+this.opt.image.type,this.opt.image.quality);this.prop.img=document.createElement("img"),this.prop.img.src=t}))},s.prototype.toPdf=function(){return this.thenList([function(){return this.toContext2d()}]).then((function(){this.prop.pdf=this.prop.pdf||this.opt.jsPDF}))},s.prototype.output=function(t,e,n){return"img"===(n=n||"pdf").toLowerCase()||"image"===n.toLowerCase()?this.outputImg(t,e):this.outputPdf(t,e)},s.prototype.outputPdf=function(t,e){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){return this.prop.pdf.output(t,e)}))},s.prototype.outputImg=function(t){return this.thenList([function(){return this.prop.img||this.toImg()}]).then((function(){switch(t){case void 0:case"img":return this.prop.img;case"datauristring":case"dataurlstring":return this.prop.img.src;case"datauri":case"dataurl":return document.location.href=this.prop.img.src;default:throw'Image output type "'+t+'" is not supported.'}}))},s.prototype.save=function(t){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).set(t?{filename:t}:null).then((function(){this.prop.pdf.save(this.opt.filename)}))},s.prototype.doCallback=function(){return this.thenList([function(){return this.prop.pdf||this.toPdf()}]).then((function(){this.prop.callback(this.prop.pdf)}))},s.prototype.set=function(t){if("object"!==a(t))return this;var e=Object.keys(t||{}).map((function(e){if(e in s.template.prop)return function(){this.prop[e]=t[e]};switch(e){case"margin":return this.setMargin.bind(this,t.margin);case"jsPDF":return function(){return this.opt.jsPDF=t.jsPDF,this.setPageSize()};case"pageSize":return this.setPageSize.bind(this,t.pageSize);default:return function(){this.opt[e]=t[e]}}}),this);return this.then((function(){return this.thenList(e)}))},s.prototype.get=function(t,e){return this.then((function(){var n=t in s.template.prop?this.prop[t]:this.opt[t];return e?e(n):n}))},s.prototype.setMargin=function(t){return this.then((function(){switch(a(t)){case"number":t=[t,t,t,t];case"array":if(2===t.length&&(t=[t[0],t[1],t[0],t[1]]),4===t.length)break;default:return this.error("Invalid margin array.")}this.opt.margin=t})).then(this.setPageSize)},s.prototype.setPageSize=function(t){function e(t,e){return Math.floor(t*e/72*96)}return this.then((function(){(t=t||It.getPageSize(this.opt.jsPDF)).hasOwnProperty("inner")||(t.inner={width:t.width-this.opt.margin[1]-this.opt.margin[3],height:t.height-this.opt.margin[0]-this.opt.margin[2]},t.inner.px={width:e(t.inner.width,t.k),height:e(t.inner.height,t.k)},t.inner.ratio=t.inner.height/t.inner.width),this.prop.pageSize=t}))},s.prototype.setProgress=function(t,e,n,r){return null!=t&&(this.progress.val=t),null!=e&&(this.progress.state=e),null!=n&&(this.progress.n=n),null!=r&&(this.progress.stack=r),this.progress.ratio=this.progress.val/this.progress.state,this},s.prototype.updateProgress=function(t,e,n,r){return this.setProgress(t?this.progress.val+t:null,e||null,n?this.progress.n+n:null,r?this.progress.stack.concat(r):null)},s.prototype.then=function(t,e){var n=this;return this.thenCore(t,e,(function(t,e){return n.updateProgress(null,null,1,[t]),Promise.prototype.then.call(this,(function(e){return n.updateProgress(null,t),e})).then(t,e).then((function(t){return n.updateProgress(1),t}))}))},s.prototype.thenCore=function(t,e,n){n=n||Promise.prototype.then,t&&(t=t.bind(this)),e&&(e=e.bind(this));var r=-1!==Promise.toString().indexOf("[native code]")&&"Promise"===Promise.name?this:s.convert(Object.assign({},this),Promise.prototype),i=n.call(r,t,e);return s.convert(i,this.__proto__)},s.prototype.thenExternal=function(t,e){return Promise.prototype.then.call(this,t,e)},s.prototype.thenList=function(t){var e=this;return t.forEach((function(t){e=e.thenCore(t)})),e},s.prototype.catch=function(t){t&&(t=t.bind(this));var e=Promise.prototype.catch.call(this,t);return s.convert(e,this)},s.prototype.catchExternal=function(t){return Promise.prototype.catch.call(this,t)},s.prototype.error=function(t){return this.then((function(){throw new Error(t)}))},s.prototype.using=s.prototype.set,s.prototype.saveAs=s.prototype.save,s.prototype.export=s.prototype.output,s.prototype.run=s.prototype.then,It.getPageSize=function(t,e,n){if("object"===(0,r.A)(t)){var i=t;t=i.orientation,e=i.unit||e,n=i.format||n}e=e||"mm",n=n||"a4",t=(""+(t||"P")).toLowerCase();var a,o=(""+n).toLowerCase(),s={a0:[2383.94,3370.39],a1:[1683.78,2383.94],a2:[1190.55,1683.78],a3:[841.89,1190.55],a4:[595.28,841.89],a5:[419.53,595.28],a6:[297.64,419.53],a7:[209.76,297.64],a8:[147.4,209.76],a9:[104.88,147.4],a10:[73.7,104.88],b0:[2834.65,4008.19],b1:[2004.09,2834.65],b2:[1417.32,2004.09],b3:[1000.63,1417.32],b4:[708.66,1000.63],b5:[498.9,708.66],b6:[354.33,498.9],b7:[249.45,354.33],b8:[175.75,249.45],b9:[124.72,175.75],b10:[87.87,124.72],c0:[2599.37,3676.54],c1:[1836.85,2599.37],c2:[1298.27,1836.85],c3:[918.43,1298.27],c4:[649.13,918.43],c5:[459.21,649.13],c6:[323.15,459.21],c7:[229.61,323.15],c8:[161.57,229.61],c9:[113.39,161.57],c10:[79.37,113.39],dl:[311.81,623.62],letter:[612,792],"government-letter":[576,756],legal:[612,1008],"junior-legal":[576,360],ledger:[1224,792],tabloid:[792,1224],"credit-card":[153,243]};switch(e){case"pt":a=1;break;case"mm":a=72/25.4;break;case"cm":a=72/2.54;break;case"in":a=72;break;case"px":a=.75;break;case"pc":case"em":a=12;break;case"ex":a=6;break;default:throw"Invalid unit: "+e}var c,h=0,u=0;if(s.hasOwnProperty(o))h=s[o][1]/a,u=s[o][0]/a;else try{h=n[1],u=n[0]}catch(t){throw new Error("Invalid format: "+n)}if("p"===t||"portrait"===t)t="p",u>h&&(c=u,u=h,h=c);else{if("l"!==t&&"landscape"!==t)throw"Invalid orientation: "+t;t="l",h>u&&(c=u,u=h,h=c)}return{width:u,height:h,unit:e,k:a,orientation:t}},t.html=function(t,e){(e=e||{}).callback=e.callback||function(){},e.html2canvas=e.html2canvas||{},e.html2canvas.canvas=e.html2canvas.canvas||this.canvas,e.jsPDF=e.jsPDF||this,e.fontFaces=e.fontFaces?e.fontFaces.map(xe):null;var n=new s(e);return e.worker?n:n.from(t).doCallback()}}(It.API),It.API.addJS=function(t){return Ee=t,this.internal.events.subscribe("postPutResources",(function(){je=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/Names [(EmbeddedJS) "+(je+1)+" 0 R]"),this.internal.out(">>"),this.internal.out("endobj"),Be=this.internal.newObject(),this.internal.out("<<"),this.internal.out("/S /JavaScript"),this.internal.out("/JS ("+Ee+")"),this.internal.out(">>"),this.internal.out("endobj")})),this.internal.events.subscribe("putCatalog",(function(){void 0!==je&&void 0!==Be&&this.internal.out("/Names <</JavaScript "+je+" 0 R>>")})),this},function(t){var e;t.events.push(["postPutResources",function(){var t=this,n=/^(\d+) 0 obj$/;if(this.outline.root.children.length>0)for(var r=t.outline.render().split(/\r\n/),i=0;i<r.length;i++){var a=r[i],o=n.exec(a);if(null!=o){var s=o[1];t.internal.newObjectDeferredBegin(s,!1)}t.internal.write(a)}if(this.outline.createNamedDestinations){var c=this.internal.pages.length,h=[];for(i=0;i<c;i++){var u=t.internal.newObject();h.push(u);var l=t.internal.getPageInfo(i+1);t.internal.write("<< /D["+l.objId+" 0 R /XYZ null null null]>> endobj")}var f=t.internal.newObject();for(t.internal.write("<< /Names [ "),i=0;i<h.length;i++)t.internal.write("(page_"+(i+1)+")"+h[i]+" 0 R");t.internal.write(" ] >>","endobj"),e=t.internal.newObject(),t.internal.write("<< /Dests "+f+" 0 R"),t.internal.write(">>","endobj")}}]),t.events.push(["putCatalog",function(){this.outline.root.children.length>0&&(this.internal.write("/Outlines",this.outline.makeRef(this.outline.root)),this.outline.createNamedDestinations&&this.internal.write("/Names "+e+" 0 R"))}]),t.events.push(["initialized",function(){var t=this;t.outline={createNamedDestinations:!1,root:{children:[]}},t.outline.add=function(t,e,n){var r={title:e,options:n,children:[]};return null==t&&(t=this.root),t.children.push(r),r},t.outline.render=function(){return this.ctx={},this.ctx.val="",this.ctx.pdf=t,this.genIds_r(this.root),this.renderRoot(this.root),this.renderItems(this.root),this.ctx.val},t.outline.genIds_r=function(e){e.id=t.internal.newObjectDeferred();for(var n=0;n<e.children.length;n++)this.genIds_r(e.children[n])},t.outline.renderRoot=function(t){this.objStart(t),this.line("/Type /Outlines"),t.children.length>0&&(this.line("/First "+this.makeRef(t.children[0])),this.line("/Last "+this.makeRef(t.children[t.children.length-1]))),this.line("/Count "+this.count_r({count:0},t)),this.objEnd()},t.outline.renderItems=function(e){for(var n=this.ctx.pdf.internal.getVerticalCoordinateString,r=0;r<e.children.length;r++){var i=e.children[r];this.objStart(i),this.line("/Title "+this.makeString(i.title)),this.line("/Parent "+this.makeRef(e)),r>0&&this.line("/Prev "+this.makeRef(e.children[r-1])),r<e.children.length-1&&this.line("/Next "+this.makeRef(e.children[r+1])),i.children.length>0&&(this.line("/First "+this.makeRef(i.children[0])),this.line("/Last "+this.makeRef(i.children[i.children.length-1])));var a=this.count=this.count_r({count:0},i);if(a>0&&this.line("/Count "+a),i.options&&i.options.pageNumber){var o=t.internal.getPageInfo(i.options.pageNumber);this.line("/Dest ["+o.objId+" 0 R /XYZ 0 "+n(0)+" 0]")}this.objEnd()}for(var s=0;s<e.children.length;s++)this.renderItems(e.children[s])},t.outline.line=function(t){this.ctx.val+=t+"\r\n"},t.outline.makeRef=function(t){return t.id+" 0 R"},t.outline.makeString=function(e){return"("+t.internal.pdfEscape(e)+")"},t.outline.objStart=function(t){this.ctx.val+="\r\n"+t.id+" 0 obj\r\n<<\r\n"},t.outline.objEnd=function(){this.ctx.val+=">> \r\nendobj\r\n"},t.outline.count_r=function(t,e){for(var n=0;n<e.children.length;n++)t.count++,this.count_r(t,e.children[n]);return t.count}}])}(It.API),function(t){var e=[192,193,194,195,196,197,198,199];t.processJPEG=function(t,n,r,i,a,o){var s,c=this.decode.DCT_DECODE,h=null;if("string"==typeof t||this.__addimage__.isArrayBuffer(t)||this.__addimage__.isArrayBufferView(t)){switch(t=a||t,t=this.__addimage__.isArrayBuffer(t)?new Uint8Array(t):t,(s=function(t){for(var n,r=256*t.charCodeAt(4)+t.charCodeAt(5),i=t.length,a={width:0,height:0,numcomponents:1},o=4;o<i;o+=2){if(o+=r,-1!==e.indexOf(t.charCodeAt(o+1))){n=256*t.charCodeAt(o+5)+t.charCodeAt(o+6),a={width:256*t.charCodeAt(o+7)+t.charCodeAt(o+8),height:n,numcomponents:t.charCodeAt(o+9)};break}r=256*t.charCodeAt(o+2)+t.charCodeAt(o+3)}return a}(t=this.__addimage__.isArrayBufferView(t)?this.__addimage__.arrayBufferToBinaryString(t):t)).numcomponents){case 1:o=this.color_spaces.DEVICE_GRAY;break;case 4:o=this.color_spaces.DEVICE_CMYK;break;case 3:o=this.color_spaces.DEVICE_RGB}h={data:t,width:s.width,height:s.height,colorSpace:o,bitsPerComponent:8,filter:c,index:n,alias:r}}return h}}(It.API);var Me,qe,Re,De,Te,ze=function(){var t,e,n;function r(t){var e,n,r,i,a,o,s,c,h,u,l,f,d,p;for(this.data=t,this.pos=8,this.palette=[],this.imgData=[],this.transparency={},this.animation=null,this.text={},o=null;;){switch(e=this.readUInt32(),h=function(){var t,e;for(e=[],t=0;t<4;++t)e.push(String.fromCharCode(this.data[this.pos++]));return e}.call(this).join("")){case"IHDR":this.width=this.readUInt32(),this.height=this.readUInt32(),this.bits=this.data[this.pos++],this.colorType=this.data[this.pos++],this.compressionMethod=this.data[this.pos++],this.filterMethod=this.data[this.pos++],this.interlaceMethod=this.data[this.pos++];break;case"acTL":this.animation={numFrames:this.readUInt32(),numPlays:this.readUInt32()||1/0,frames:[]};break;case"PLTE":this.palette=this.read(e);break;case"fcTL":o&&this.animation.frames.push(o),this.pos+=4,o={width:this.readUInt32(),height:this.readUInt32(),xOffset:this.readUInt32(),yOffset:this.readUInt32()},a=this.readUInt16(),i=this.readUInt16()||100,o.delay=1e3*a/i,o.disposeOp=this.data[this.pos++],o.blendOp=this.data[this.pos++],o.data=[];break;case"IDAT":case"fdAT":for("fdAT"===h&&(this.pos+=4,e-=4),t=(null!=o?o.data:void 0)||this.imgData,f=0;0<=e?f<e:f>e;0<=e?++f:--f)t.push(this.data[this.pos++]);break;case"tRNS":switch(this.transparency={},this.colorType){case 3:if(r=this.palette.length/3,this.transparency.indexed=this.read(e),this.transparency.indexed.length>r)throw new Error("More transparent colors than palette size");if((u=r-this.transparency.indexed.length)>0)for(d=0;0<=u?d<u:d>u;0<=u?++d:--d)this.transparency.indexed.push(255);break;case 0:this.transparency.grayscale=this.read(e)[0];break;case 2:this.transparency.rgb=this.read(e)}break;case"tEXt":s=(l=this.read(e)).indexOf(0),c=String.fromCharCode.apply(String,l.slice(0,s)),this.text[c]=String.fromCharCode.apply(String,l.slice(s+1));break;case"IEND":return o&&this.animation.frames.push(o),this.colors=function(){switch(this.colorType){case 0:case 3:case 4:return 1;case 2:case 6:return 3}}.call(this),this.hasAlphaChannel=4===(p=this.colorType)||6===p,n=this.colors+(this.hasAlphaChannel?1:0),this.pixelBitlength=this.bits*n,this.colorSpace=function(){switch(this.colors){case 1:return"DeviceGray";case 3:return"DeviceRGB"}}.call(this),void(this.imgData=new Uint8Array(this.imgData));default:this.pos+=e}if(this.pos+=4,this.pos>this.data.length)throw new Error("Incomplete or corrupt PNG file")}}r.prototype.read=function(t){var e,n;for(n=[],e=0;0<=t?e<t:e>t;0<=t?++e:--e)n.push(this.data[this.pos++]);return n},r.prototype.readUInt32=function(){return this.data[this.pos++]<<24|this.data[this.pos++]<<16|this.data[this.pos++]<<8|this.data[this.pos++]},r.prototype.readUInt16=function(){return this.data[this.pos++]<<8|this.data[this.pos++]},r.prototype.decodePixels=function(t){var e=this.pixelBitlength/8,n=new Uint8Array(this.width*this.height*e),r=0,i=this;if(null==t&&(t=this.imgData),0===t.length)return new Uint8Array(0);function a(a,o,s,c){var h,u,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F=Math.ceil((i.width-a)/s),C=Math.ceil((i.height-o)/c),j=i.width==F&&i.height==C;for(L=e*F,w=j?n:new Uint8Array(L*C),p=t.length,N=0,u=0;N<C&&r<p;){switch(t[r++]){case 0:for(f=S=0;S<L;f=S+=1)w[u++]=t[r++];break;case 1:for(f=_=0;_<L;f=_+=1)h=t[r++],d=f<e?0:w[u-e],w[u++]=(h+d)%256;break;case 2:for(f=P=0;P<L;f=P+=1)h=t[r++],l=(f-f%e)/e,A=N&&w[(N-1)*L+l*e+f%e],w[u++]=(A+h)%256;break;case 3:for(f=k=0;k<L;f=k+=1)h=t[r++],l=(f-f%e)/e,d=f<e?0:w[u-e],A=N&&w[(N-1)*L+l*e+f%e],w[u++]=(h+Math.floor((d+A)/2))%256;break;case 4:for(f=I=0;I<L;f=I+=1)h=t[r++],l=(f-f%e)/e,d=f<e?0:w[u-e],0===N?A=x=0:(A=w[(N-1)*L+l*e+f%e],x=l&&w[(N-1)*L+(l-1)*e+f%e]),g=d+A-x,m=Math.abs(g-d),b=Math.abs(g-A),y=Math.abs(g-x),v=m<=b&&m<=y?d:b<=y?A:x,w[u++]=(h+v)%256;break;default:throw new Error("Invalid filter algorithm: "+t[r-1])}if(!j){var B=((o+N*c)*i.width+a)*e,E=N*L;for(f=0;f<F;f+=1){for(var O=0;O<e;O+=1)n[B++]=w[E++];B+=(s-1)*e}}N++}}return t=X(t),1==i.interlaceMethod?(a(0,0,8,8),a(4,0,8,8),a(0,4,4,8),a(2,0,4,4),a(0,2,2,4),a(1,0,2,2),a(0,1,1,2)):a(0,0,1,1),n},r.prototype.decodePalette=function(){var t,e,n,r,i,a,o,s,c;for(n=this.palette,a=this.transparency.indexed||[],i=new Uint8Array((a.length||0)+n.length),r=0,t=0,e=o=0,s=n.length;o<s;e=o+=3)i[r++]=n[e],i[r++]=n[e+1],i[r++]=n[e+2],i[r++]=null!=(c=a[t++])?c:255;return i},r.prototype.copyToImageData=function(t,e){var n,r,i,a,o,s,c,h,u,l,f;if(r=this.colors,u=null,n=this.hasAlphaChannel,this.palette.length&&(u=null!=(f=this._decodedPalette)?f:this._decodedPalette=this.decodePalette(),r=4,n=!0),h=(i=t.data||t).length,o=u||e,a=s=0,1===r)for(;a<h;)c=u?4*e[a/4]:s,l=o[c++],i[a++]=l,i[a++]=l,i[a++]=l,i[a++]=n?o[c++]:255,s=c;else for(;a<h;)c=u?4*e[a/4]:s,i[a++]=o[c++],i[a++]=o[c++],i[a++]=o[c++],i[a++]=n?o[c++]:255,s=c},r.prototype.decode=function(){var t;return t=new Uint8Array(this.width*this.height*4),this.copyToImageData(t,this.decodePixels()),t};var i=function(){if("[object Window]"===Object.prototype.toString.call(K)){try{e=K.document.createElement("canvas"),n=e.getContext("2d")}catch(t){return!1}return!0}return!1};return i(),t=function(t){var r;if(!0===i())return n.width=t.width,n.height=t.height,n.clearRect(0,0,t.width,t.height),n.putImageData(t,0,0),(r=new Image).src=e.toDataURL(),r;throw new Error("This method requires a Browser with Canvas-capability.")},r.prototype.decodeFrames=function(e){var n,r,i,a,o,s,c,h;if(this.animation){for(h=[],r=o=0,s=(c=this.animation.frames).length;o<s;r=++o)n=c[r],i=e.createImageData(n.width,n.height),a=this.decodePixels(new Uint8Array(n.data)),this.copyToImageData(i,a),n.imageData=i,h.push(n.image=t(i));return h}},r.prototype.renderFrame=function(t,e){var n,r,i;return n=(r=this.animation.frames)[e],i=r[e-1],0===e&&t.clearRect(0,0,this.width,this.height),1===(null!=i?i.disposeOp:void 0)?t.clearRect(i.xOffset,i.yOffset,i.width,i.height):2===(null!=i?i.disposeOp:void 0)&&t.putImageData(i.imageData,i.xOffset,i.yOffset),0===n.blendOp&&t.clearRect(n.xOffset,n.yOffset,n.width,n.height),t.drawImage(n.image,n.xOffset,n.yOffset)},r.prototype.animate=function(t){var e,n,r,i,a,o,s=this;return n=0,o=this.animation,i=o.numFrames,r=o.frames,a=o.numPlays,(e=function(){var o,c;if(o=n++%i,c=r[o],s.renderFrame(t,o),i>1&&n/i<a)return s.animation._timeout=setTimeout(e,c.delay)})()},r.prototype.stopAnimation=function(){var t;return clearTimeout(null!=(t=this.animation)?t._timeout:void 0)},r.prototype.render=function(t){var e,n;return t._png&&t._png.stopAnimation(),t._png=this,t.width=this.width,t.height=this.height,e=t.getContext("2d"),this.animation?(this.decodeFrames(e),this.animate(e)):(n=e.createImageData(this.width,this.height),this.copyToImageData(n,this.decodePixels()),e.putImageData(n,0,0))},r}();function Ue(t){var e=0;if(71!==t[e++]||73!==t[e++]||70!==t[e++]||56!==t[e++]||56!=(t[e++]+1&253)||97!==t[e++])throw new Error("Invalid GIF 87a/89a header.");var n=t[e++]|t[e++]<<8,r=t[e++]|t[e++]<<8,i=t[e++],a=i>>7,o=1<<1+(7&i);t[e++],t[e++];var s=null,c=null;a&&(s=e,c=o,e+=3*o);var h=!0,u=[],l=0,f=null,d=0,p=null;for(this.width=n,this.height=r;h&&e<t.length;)switch(t[e++]){case 33:switch(t[e++]){case 255:if(11!==t[e]||78==t[e+1]&&69==t[e+2]&&84==t[e+3]&&83==t[e+4]&&67==t[e+5]&&65==t[e+6]&&80==t[e+7]&&69==t[e+8]&&50==t[e+9]&&46==t[e+10]&&48==t[e+11]&&3==t[e+12]&&1==t[e+13]&&0==t[e+16])e+=14,p=t[e++]|t[e++]<<8,e++;else for(e+=12;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;case 249:if(4!==t[e++]||0!==t[e+4])throw new Error("Invalid graphics extension block.");var g=t[e++];l=t[e++]|t[e++]<<8,f=t[e++],!(1&g)&&(f=null),d=g>>2&7,e++;break;case 254:for(;;){if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}break;default:throw new Error("Unknown graphic control label: 0x"+t[e-1].toString(16))}break;case 44:var m=t[e++]|t[e++]<<8,v=t[e++]|t[e++]<<8,b=t[e++]|t[e++]<<8,y=t[e++]|t[e++]<<8,w=t[e++],N=w>>6&1,L=1<<1+(7&w),A=s,x=c,S=!1;w>>7&&(S=!0,A=e,x=L,e+=3*L);var _=e;for(e++;;){var P;if(!((P=t[e++])>=0))throw Error("Invalid block size");if(0===P)break;e+=P}u.push({x:m,y:v,width:b,height:y,has_local_palette:S,palette_offset:A,palette_size:x,data_offset:_,data_length:e-_,transparent_index:f,interlaced:!!N,delay:l,disposal:d});break;case 59:h=!1;break;default:throw new Error("Unknown gif block: 0x"+t[e-1].toString(16))}this.numFrames=function(){return u.length},this.loopCount=function(){return p},this.frameInfo=function(t){if(t<0||t>=u.length)throw new Error("Frame index out of range.");return u[t]},this.decodeAndBlitFrameBGRA=function(e,r){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);He(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var h=i.width,u=n-h,l=h,f=4*(i.y*n+i.x),d=4*((i.y+i.height)*n+i.x),p=f,g=4*u;!0===i.interlaced&&(g+=4*n*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=h,(p+=g)>=d&&(g=4*u+4*n*(m-1),p=f+(h+u)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];r[p++]=L,r[p++]=N,r[p++]=w,r[p++]=255}--l}},this.decodeAndBlitFrameRGBA=function(e,r){var i=this.frameInfo(e),a=i.width*i.height,o=new Uint8Array(a);He(t,i.data_offset,o,a);var s=i.palette_offset,c=i.transparent_index;null===c&&(c=256);var h=i.width,u=n-h,l=h,f=4*(i.y*n+i.x),d=4*((i.y+i.height)*n+i.x),p=f,g=4*u;!0===i.interlaced&&(g+=4*n*7);for(var m=8,v=0,b=o.length;v<b;++v){var y=o[v];if(0===l&&(l=h,(p+=g)>=d&&(g=4*u+4*n*(m-1),p=f+(h+u)*(m<<1),m>>=1)),y===c)p+=4;else{var w=t[s+3*y],N=t[s+3*y+1],L=t[s+3*y+2];r[p++]=w,r[p++]=N,r[p++]=L,r[p++]=255}--l}}}function He(t,e,n,r){for(var i=t[e++],a=1<<i,o=a+1,s=o+1,c=i+1,h=(1<<c)-1,u=0,l=0,f=0,d=t[e++],p=new Int32Array(4096),g=null;;){for(;u<16&&0!==d;)l|=t[e++]<<u,u+=8,1===d?d=t[e++]:--d;if(u<c)break;var m=l&h;if(l>>=c,u-=c,m!==a){if(m===o)break;for(var v=m<s?m:g,b=0,y=v;y>a;)y=p[y]>>8,++b;var w=y;if(f+b+(v!==m?1:0)>r)return void $.log("Warning, gif stream longer than expected.");n[f++]=w;var N=f+=b;for(v!==m&&(n[f++]=w),y=v;b--;)y=p[y],n[--N]=255&y,y>>=8;null!==g&&s<4096&&(p[s++]=g<<8|w,s>=h+1&&c<12&&(++c,h=h<<1|1)),g=m}else s=o+1,h=(1<<(c=i+1))-1,g=null}return f!==r&&$.log("Warning, gif stream shorter than expected."),n}function We(t){var e,n,r,i,a,o=Math.floor,s=new Array(64),c=new Array(64),h=new Array(64),u=new Array(64),l=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),g=[],m=0,v=7,b=new Array(64),y=new Array(64),w=new Array(64),N=new Array(256),L=new Array(2048),A=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],x=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],S=[0,1,2,3,4,5,6,7,8,9,10,11],_=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],P=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],k=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],F=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],C=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function j(t,e){for(var n=0,r=0,i=new Array,a=1;a<=16;a++){for(var o=1;o<=t[a];o++)i[e[r]]=[],i[e[r]][0]=n,i[e[r]][1]=a,r++,n++;n*=2}return i}function B(t){for(var e=t[0],n=t[1]-1;n>=0;)e&1<<n&&(m|=1<<v),n--,--v<0&&(255==m?(E(255),E(0)):E(m),v=7,m=0)}function E(t){g.push(t)}function O(t){E(t>>8&255),E(255&t)}function M(t,e,n,r,i){for(var a,o=i[0],s=i[240],c=function(t,e){var n,r,i,a,o,s,c,h,u,l,f=0;for(u=0;u<8;++u){n=t[f],r=t[f+1],i=t[f+2],a=t[f+3],o=t[f+4],s=t[f+5],c=t[f+6];var p=n+(h=t[f+7]),g=n-h,m=r+c,v=r-c,b=i+s,y=i-s,w=a+o,N=a-o,L=p+w,A=p-w,x=m+b,S=m-b;t[f]=L+x,t[f+4]=L-x;var _=.707106781*(S+A);t[f+2]=A+_,t[f+6]=A-_;var P=.382683433*((L=N+y)-(S=v+g)),k=.5411961*L+P,I=1.306562965*S+P,F=.707106781*(x=y+v),C=g+F,j=g-F;t[f+5]=j+k,t[f+3]=j-k,t[f+1]=C+I,t[f+7]=C-I,f+=8}for(f=0,u=0;u<8;++u){n=t[f],r=t[f+8],i=t[f+16],a=t[f+24],o=t[f+32],s=t[f+40],c=t[f+48];var B=n+(h=t[f+56]),E=n-h,O=r+c,M=r-c,q=i+s,R=i-s,D=a+o,T=a-o,z=B+D,U=B-D,H=O+q,W=O-q;t[f]=z+H,t[f+32]=z-H;var V=.707106781*(W+U);t[f+16]=U+V,t[f+48]=U-V;var G=.382683433*((z=T+R)-(W=M+E)),Y=.5411961*z+G,X=1.306562965*W+G,J=.707106781*(H=R+M),K=E+J,Z=E-J;t[f+40]=Z+Y,t[f+24]=Z-Y,t[f+8]=K+X,t[f+56]=K-X,f++}for(u=0;u<64;++u)l=t[u]*e[u],d[u]=l>0?l+.5|0:l-.5|0;return d}(t,e),h=0;h<64;++h)p[A[h]]=c[h];var u=p[0]-n;n=p[0],0==u?B(r[0]):(B(r[f[a=32767+u]]),B(l[a]));for(var g=63;g>0&&0==p[g];)g--;if(0==g)return B(o),n;for(var m,v=1;v<=g;){for(var b=v;0==p[v]&&v<=g;)++v;var y=v-b;if(y>=16){m=y>>4;for(var w=1;w<=m;++w)B(s);y&=15}a=32767+p[v],B(i[(y<<4)+f[a]]),B(l[a]),v++}return 63!=g&&B(o),n}function q(t){t=Math.min(Math.max(t,1),100),a!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],n=0;n<64;n++){var r=o((e[n]*t+50)/100);r=Math.min(Math.max(r,1),255),s[A[n]]=r}for(var i=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],a=0;a<64;a++){var l=o((i[a]*t+50)/100);l=Math.min(Math.max(l,1),255),c[A[a]]=l}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var g=0;g<8;g++)h[d]=1/(s[A[d]]*f[p]*f[g]*8),u[d]=1/(c[A[d]]*f[p]*f[g]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),a=t)}this.encode=function(t,a){a&&q(a),g=new Array,m=0,v=7,O(65496),O(65504),O(16),E(74),E(70),E(73),E(70),E(0),E(1),E(1),E(0),O(1),O(1),E(0),E(0),function(){O(65499),O(132),E(0);for(var t=0;t<64;t++)E(s[t]);E(1);for(var e=0;e<64;e++)E(c[e])}(),function(t,e){O(65472),O(17),E(8),O(e),O(t),E(3),E(1),E(17),E(0),E(2),E(17),E(1),E(3),E(17),E(1)}(t.width,t.height),function(){O(65476),O(418),E(0);for(var t=0;t<16;t++)E(x[t+1]);for(var e=0;e<=11;e++)E(S[e]);E(16);for(var n=0;n<16;n++)E(_[n+1]);for(var r=0;r<=161;r++)E(P[r]);E(1);for(var i=0;i<16;i++)E(k[i+1]);for(var a=0;a<=11;a++)E(I[a]);E(17);for(var o=0;o<16;o++)E(F[o+1]);for(var s=0;s<=161;s++)E(C[s])}(),O(65498),O(12),E(3),E(1),E(0),E(2),E(17),E(3),E(17),E(0),E(63),E(0);var o=0,l=0,f=0;m=0,v=7,this.encode.displayName="_encode_";for(var d,p,N,A,j,R,D,T,z,U=t.data,H=t.width,W=t.height,V=4*H,G=0;G<W;){for(d=0;d<V;){for(j=V*G+d,D=-1,T=0,z=0;z<64;z++)R=j+(T=z>>3)*V+(D=4*(7&z)),G+T>=W&&(R-=V*(G+1+T-W)),d+D>=V&&(R-=d+D-V+4),p=U[R++],N=U[R++],A=U[R++],b[z]=(L[p]+L[N+256|0]+L[A+512|0]>>16)-128,y[z]=(L[p+768|0]+L[N+1024|0]+L[A+1280|0]>>16)-128,w[z]=(L[p+1280|0]+L[N+1536|0]+L[A+1792|0]>>16)-128;o=M(b,h,o,e,r),l=M(y,u,l,n,i),f=M(w,u,f,n,i),d+=32}G+=8}if(v>=0){var Y=[];Y[1]=v+1,Y[0]=(1<<v+1)-1,B(Y)}return O(65497),new Uint8Array(g)},t=t||50,function(){for(var t=String.fromCharCode,e=0;e<256;e++)N[e]=t(e)}(),e=j(x,S),n=j(k,I),r=j(_,P),i=j(F,C),function(){for(var t=1,e=2,n=1;n<=15;n++){for(var r=t;r<e;r++)f[32767+r]=n,l[32767+r]=[],l[32767+r][1]=n,l[32767+r][0]=r;for(var i=-(e-1);i<=-t;i++)f[32767+i]=n,l[32767+i]=[],l[32767+i][1]=n,l[32767+i][0]=e-1+i;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)L[t]=19595*t,L[t+256|0]=38470*t,L[t+512|0]=7471*t+32768,L[t+768|0]=-11059*t,L[t+1024|0]=-21709*t,L[t+1280|0]=32768*t+8421375,L[t+1536|0]=-27439*t,L[t+1792|0]=-5329*t}(),q(t)}function Ve(t,e){if(this.pos=0,this.buffer=t,this.datav=new DataView(t.buffer),this.is_with_alpha=!!e,this.bottom_up=!0,this.flag=String.fromCharCode(this.buffer[0])+String.fromCharCode(this.buffer[1]),this.pos+=2,-1===["BM","BA","CI","CP","IC","PT"].indexOf(this.flag))throw new Error("Invalid BMP File");this.parseHeader(),this.parseBGR()}function Ge(t){function e(t){if(!t)throw Error("assert :P")}function n(t,e,n){for(var r=0;4>r;r++)if(t[e+r]!=n.charCodeAt(r))return!0;return!1}function r(t,e,n,r,i){for(var a=0;a<i;a++)t[e+a]=n[r+a]}function i(t,e,n,r){for(var i=0;i<r;i++)t[e+i]=n}function a(t){return new Int32Array(t)}function o(t,e){for(var n=[],r=0;r<t;r++)n.push(new e);return n}function s(t,e){var n=[];return function t(n,r,i){for(var a=i[r],o=0;o<a&&(n.push(i.length>r+1?[]:new e),!(i.length<r+1));o++)t(n[o],r+1,i)}(n,0,t),n}var c=function(){var t=this;function c(t,e){for(var n=1<<e-1>>>0;t&n;)n>>>=1;return n?(t&n-1)+n:t}function h(t,n,r,i,a){e(!(i%r));do{t[n+(i-=r)]=a}while(0<i)}function u(t,n,r,i,o){if(e(2328>=o),512>=o)var s=a(512);else if(null==(s=a(o)))return 0;return function(t,n,r,i,o,s){var u,f,d=n,p=1<<r,g=a(16),m=a(16);for(e(0!=o),e(null!=i),e(null!=t),e(0<r),f=0;f<o;++f){if(15<i[f])return 0;++g[i[f]]}if(g[0]==o)return 0;for(m[1]=0,u=1;15>u;++u){if(g[u]>1<<u)return 0;m[u+1]=m[u]+g[u]}for(f=0;f<o;++f)u=i[f],0<i[f]&&(s[m[u]++]=f);if(1==m[15])return(i=new l).g=0,i.value=s[0],h(t,d,1,p,i),p;var v,b=-1,y=p-1,w=0,N=1,L=1,A=1<<r;for(f=0,u=1,o=2;u<=r;++u,o<<=1){if(N+=L<<=1,0>(L-=g[u]))return 0;for(;0<g[u];--g[u])(i=new l).g=u,i.value=s[f++],h(t,d+w,o,A,i),w=c(w,u)}for(u=r+1,o=2;15>=u;++u,o<<=1){if(N+=L<<=1,0>(L-=g[u]))return 0;for(;0<g[u];--g[u]){if(i=new l,(w&y)!=b){for(d+=A,v=1<<(b=u)-r;15>b&&!(0>=(v-=g[b]));)++b,v<<=1;p+=A=1<<(v=b-r),t[n+(b=w&y)].g=v+r,t[n+b].value=d-n-b}i.g=u-r,i.value=s[f++],h(t,d+(w>>r),o,A,i),w=c(w,u)}}return N!=2*m[15]-1?0:p}(t,n,r,i,o,s)}function l(){this.value=this.g=0}function f(){this.value=this.g=0}function d(){this.G=o(5,l),this.H=a(5),this.jc=this.Qb=this.qb=this.nd=0,this.pd=o(Dn,f)}function p(t,n,r,i){e(null!=t),e(null!=n),e(2147483648>i),t.Ca=254,t.I=0,t.b=-8,t.Ka=0,t.oa=n,t.pa=r,t.Jd=n,t.Yc=r+i,t.Zc=4<=i?r+i-4+1:r,_(t)}function g(t,e){for(var n=0;0<e--;)n|=k(t,128)<<e;return n}function m(t,e){var n=g(t,e);return P(t)?-n:n}function v(t,n,r,i){var a,o=0;for(e(null!=t),e(null!=n),e(4294967288>i),t.Sb=i,t.Ra=0,t.u=0,t.h=0,4<i&&(i=4),a=0;a<i;++a)o+=n[r+a]<<8*a;t.Ra=o,t.bb=i,t.oa=n,t.pa=r}function b(t){for(;8<=t.u&&t.bb<t.Sb;)t.Ra>>>=8,t.Ra+=t.oa[t.pa+t.bb]<<Un-8>>>0,++t.bb,t.u-=8;A(t)&&(t.h=1,t.u=0)}function y(t,n){if(e(0<=n),!t.h&&n<=zn){var r=L(t)&Tn[n];return t.u+=n,b(t),r}return t.h=1,t.u=0}function w(){this.b=this.Ca=this.I=0,this.oa=[],this.pa=0,this.Jd=[],this.Yc=0,this.Zc=[],this.Ka=0}function N(){this.Ra=0,this.oa=[],this.h=this.u=this.bb=this.Sb=this.pa=0}function L(t){return t.Ra>>>(t.u&Un-1)>>>0}function A(t){return e(t.bb<=t.Sb),t.h||t.bb==t.Sb&&t.u>Un}function x(t,e){t.u=e,t.h=A(t)}function S(t){t.u>=Hn&&(e(t.u>=Hn),b(t))}function _(t){e(null!=t&&null!=t.oa),t.pa<t.Zc?(t.I=(t.oa[t.pa++]|t.I<<8)>>>0,t.b+=8):(e(null!=t&&null!=t.oa),t.pa<t.Yc?(t.b+=8,t.I=t.oa[t.pa++]|t.I<<8):t.Ka?t.b=0:(t.I<<=8,t.b+=8,t.Ka=1))}function P(t){return g(t,1)}function k(t,e){var n=t.Ca;0>t.b&&_(t);var r=t.b,i=n*e>>>8,a=(t.I>>>r>i)+0;for(a?(n-=i,t.I-=i+1<<r>>>0):n=i+1,r=n,i=0;256<=r;)i+=8,r>>=8;return r=7^i+Wn[r],t.b-=r,t.Ca=(n<<r)-1,a}function I(t,e,n){t[e+0]=n>>24&255,t[e+1]=n>>16&255,t[e+2]=n>>8&255,t[e+3]=255&n}function F(t,e){return t[e+0]|t[e+1]<<8}function C(t,e){return F(t,e)|t[e+2]<<16}function j(t,e){return F(t,e)|F(t,e+2)<<16}function B(t,n){var r=1<<n;return e(null!=t),e(0<n),t.X=a(r),null==t.X?0:(t.Mb=32-n,t.Xa=n,1)}function E(t,n){e(null!=t),e(null!=n),e(t.Xa==n.Xa),r(n.X,0,t.X,0,1<<n.Xa)}function O(){this.X=[],this.Xa=this.Mb=0}function M(t,n,r,i){e(null!=r),e(null!=i);var a=r[0],o=i[0];return 0==a&&(a=(t*o+n/2)/n),0==o&&(o=(n*a+t/2)/t),0>=a||0>=o?0:(r[0]=a,i[0]=o,1)}function q(t,e){return t+(1<<e)-1>>>e}function R(t,e){return((4278255360&t)+(4278255360&e)>>>0&4278255360)+((16711935&t)+(16711935&e)>>>0&16711935)>>>0}function D(e,n){t[n]=function(n,r,i,a,o,s,c){var h;for(h=0;h<o;++h){var u=t[e](s[c+h-1],i,a+h);s[c+h]=R(n[r+h],u)}}}function T(){this.ud=this.hd=this.jd=0}function z(t,e){return((4278124286&(t^e))>>>1)+(t&e)>>>0}function U(t){return 0<=t&&256>t?t:0>t?0:255<t?255:void 0}function H(t,e){return U(t+(t-e+.5>>1))}function W(t,e,n){return Math.abs(e-n)-Math.abs(t-n)}function V(t,e,n,r,i,a,o){for(r=a[o-1],n=0;n<i;++n)a[o+n]=r=R(t[e+n],r)}function G(t,e,n,r,i){var a;for(a=0;a<n;++a){var o=t[e+a],s=o>>8&255,c=16711935&(c=(c=16711935&o)+((s<<16)+s));r[i+a]=(4278255360&o)+c>>>0}}function Y(t,e){e.jd=255&t,e.hd=t>>8&255,e.ud=t>>16&255}function X(t,e,n,r,i,a){var o;for(o=0;o<r;++o){var s=e[n+o],c=s>>>8,h=s,u=255&(u=(u=s>>>16)+((t.jd<<24>>24)*(c<<24>>24)>>>5));h=255&(h=(h+=(t.hd<<24>>24)*(c<<24>>24)>>>5)+((t.ud<<24>>24)*(u<<24>>24)>>>5)),i[a+o]=(4278255360&s)+(u<<16)+h}}function J(e,n,r,i,a){t[n]=function(t,e,n,r,o,s,c,h,u){for(r=c;r<h;++r)for(c=0;c<u;++c)o[s++]=a(n[i(t[e++])])},t[e]=function(e,n,o,s,c,h,u){var l=8>>e.b,f=e.Ea,d=e.K[0],p=e.w;if(8>l)for(e=(1<<e.b)-1,p=(1<<l)-1;n<o;++n){var g,m=0;for(g=0;g<f;++g)g&e||(m=i(s[c++])),h[u++]=a(d[m&p]),m>>=l}else t["VP8LMapColor"+r](s,c,d,p,h,u,n,o,f)}}function K(t,e,n,r,i){for(n=e+n;e<n;){var a=t[e++];r[i++]=a>>16&255,r[i++]=a>>8&255,r[i++]=255&a}}function Z(t,e,n,r,i){for(n=e+n;e<n;){var a=t[e++];r[i++]=a>>16&255,r[i++]=a>>8&255,r[i++]=255&a,r[i++]=a>>24&255}}function $(t,e,n,r,i){for(n=e+n;e<n;){var a=(o=t[e++])>>16&240|o>>12&15,o=240&o|o>>28&15;r[i++]=a,r[i++]=o}}function Q(t,e,n,r,i){for(n=e+n;e<n;){var a=(o=t[e++])>>16&248|o>>13&7,o=o>>5&224|o>>3&31;r[i++]=a,r[i++]=o}}function tt(t,e,n,r,i){for(n=e+n;e<n;){var a=t[e++];r[i++]=255&a,r[i++]=a>>8&255,r[i++]=a>>16&255}}function et(t,e,n,i,a,o){if(0==o)for(n=e+n;e<n;)I(i,((o=t[e++])[0]>>24|o[1]>>8&65280|o[2]<<8&16711680|o[3]<<24)>>>0),a+=32;else r(i,a,t,e,n)}function nt(e,n){t[n][0]=t[e+"0"],t[n][1]=t[e+"1"],t[n][2]=t[e+"2"],t[n][3]=t[e+"3"],t[n][4]=t[e+"4"],t[n][5]=t[e+"5"],t[n][6]=t[e+"6"],t[n][7]=t[e+"7"],t[n][8]=t[e+"8"],t[n][9]=t[e+"9"],t[n][10]=t[e+"10"],t[n][11]=t[e+"11"],t[n][12]=t[e+"12"],t[n][13]=t[e+"13"],t[n][14]=t[e+"0"],t[n][15]=t[e+"0"]}function rt(t){return t==Hr||t==Wr||t==Vr||t==Gr}function it(){this.eb=[],this.size=this.A=this.fb=0}function at(){this.y=[],this.f=[],this.ea=[],this.F=[],this.Tc=this.Ed=this.Cd=this.Fd=this.lb=this.Db=this.Ab=this.fa=this.J=this.W=this.N=this.O=0}function ot(){this.Rd=this.height=this.width=this.S=0,this.f={},this.f.RGBA=new it,this.f.kb=new at,this.sd=null}function st(){this.width=[0],this.height=[0],this.Pd=[0],this.Qd=[0],this.format=[0]}function ct(){this.Id=this.fd=this.Md=this.hb=this.ib=this.da=this.bd=this.cd=this.j=this.v=this.Da=this.Sd=this.ob=0}function ht(t){return alert("todo:WebPSamplerProcessPlane"),t.T}function ut(t,e){var n=t.T,i=e.ba.f.RGBA,a=i.eb,o=i.fb+t.ka*i.A,s=vi[e.ba.S],c=t.y,h=t.O,u=t.f,l=t.N,f=t.ea,d=t.W,p=e.cc,g=e.dc,m=e.Mc,v=e.Nc,b=t.ka,y=t.ka+t.T,w=t.U,N=w+1>>1;for(0==b?s(c,h,null,null,u,l,f,d,u,l,f,d,a,o,null,null,w):(s(e.ec,e.fc,c,h,p,g,m,v,u,l,f,d,a,o-i.A,a,o,w),++n);b+2<y;b+=2)p=u,g=l,m=f,v=d,l+=t.Rc,d+=t.Rc,o+=2*i.A,s(c,(h+=2*t.fa)-t.fa,c,h,p,g,m,v,u,l,f,d,a,o-i.A,a,o,w);return h+=t.fa,t.j+y<t.o?(r(e.ec,e.fc,c,h,w),r(e.cc,e.dc,u,l,N),r(e.Mc,e.Nc,f,d,N),n--):1&y||s(c,h,null,null,u,l,f,d,u,l,f,d,a,o+i.A,null,null,w),n}function lt(t,n,r){var i=t.F,a=[t.J];if(null!=i){var o=t.U,s=n.ba.S,c=s==Tr||s==Vr;n=n.ba.f.RGBA;var h=[0],u=t.ka;h[0]=t.T,t.Kb&&(0==u?--h[0]:(--u,a[0]-=t.width),t.j+t.ka+t.T==t.o&&(h[0]=t.o-t.j-u));var l=n.eb;u=n.fb+u*n.A,t=Sr(i,a[0],t.width,o,h,l,u+(c?0:3),n.A),e(r==h),t&&rt(s)&&Ar(l,u,c,o,h,n.A)}return 0}function ft(t){var e=t.ma,n=e.ba.S,r=11>n,i=n==qr||n==Dr||n==Tr||n==zr||12==n||rt(n);if(e.memory=null,e.Ib=null,e.Jb=null,e.Nd=null,!Mn(e.Oa,t,i?11:12))return 0;if(i&&rt(n)&&yn(),t.da)alert("todo:use_scaling");else{if(r){if(e.Ib=ht,t.Kb){if(n=t.U+1>>1,e.memory=a(t.U+2*n),null==e.memory)return 0;e.ec=e.memory,e.fc=0,e.cc=e.ec,e.dc=e.fc+t.U,e.Mc=e.cc,e.Nc=e.dc+n,e.Ib=ut,yn()}}else alert("todo:EmitYUV");i&&(e.Jb=lt,r&&vn())}if(r&&!Ci){for(t=0;256>t;++t)ji[t]=89858*(t-128)+_i>>Si,Oi[t]=-22014*(t-128)+_i,Ei[t]=-45773*(t-128),Bi[t]=113618*(t-128)+_i>>Si;for(t=Pi;t<ki;++t)e=76283*(t-16)+_i>>Si,Mi[t-Pi]=Vt(e,255),qi[t-Pi]=Vt(e+8>>4,15);Ci=1}return 1}function dt(t){var n=t.ma,r=t.U,i=t.T;return e(!(1&t.ka)),0>=r||0>=i?0:(r=n.Ib(t,n),null!=n.Jb&&n.Jb(t,n,r),n.Dc+=r,1)}function pt(t){t.ma.memory=null}function gt(t,e,n,r){return 47!=y(t,8)?0:(e[0]=y(t,14)+1,n[0]=y(t,14)+1,r[0]=y(t,1),0!=y(t,3)?0:!t.h)}function mt(t,e){if(4>t)return t+1;var n=t-2>>1;return(2+(1&t)<<n)+y(e,n)+1}function vt(t,e){return 120<e?e-120:1<=(n=((n=$r[e-1])>>4)*t+(8-(15&n)))?n:1;var n}function bt(t,e,n){var r=L(n),i=t[e+=255&r].g-8;return 0<i&&(x(n,n.u+8),r=L(n),e+=t[e].value,e+=r&(1<<i)-1),x(n,n.u+t[e].g),t[e].value}function yt(t,n,r){return r.g+=t.g,r.value+=t.value<<n>>>0,e(8>=r.g),t.g}function wt(t,n,r){var i=t.xc;return e((n=0==i?0:t.vc[t.md*(r>>i)+(n>>i)])<t.Wb),t.Ya[n]}function Nt(t,n,i,a){var o=t.ab,s=t.c*n,c=t.C;n=c+n;var h=i,u=a;for(a=t.Ta,i=t.Ua;0<o--;){var l=t.gc[o],f=c,d=n,p=h,g=u,m=(u=a,h=i,l.Ea);switch(e(f<d),e(d<=l.nc),l.hc){case 2:Yn(p,g,(d-f)*m,u,h);break;case 0:var v=f,b=d,y=u,w=h,N=(_=l).Ea;0==v&&(Vn(p,g,null,null,1,y,w),V(p,g+1,0,0,N-1,y,w+1),g+=N,w+=N,++v);for(var L=1<<_.b,A=L-1,x=q(N,_.b),S=_.K,_=_.w+(v>>_.b)*x;v<b;){var P=S,k=_,I=1;for(Gn(p,g,y,w-N,1,y,w);I<N;){var F=(I&~A)+L;F>N&&(F=N),(0,$n[P[k++]>>8&15])(p,g+ +I,y,w+I-N,F-I,y,w+I),I=F}g+=N,w+=N,++v&A||(_+=x)}d!=l.nc&&r(u,h-m,u,h+(d-f-1)*m,m);break;case 1:for(m=p,b=g,N=(p=l.Ea)-(w=p&~(y=(g=1<<l.b)-1)),v=q(p,l.b),L=l.K,l=l.w+(f>>l.b)*v;f<d;){for(A=L,x=l,S=new T,_=b+w,P=b+p;b<_;)Y(A[x++],S),Qn(S,m,b,g,u,h),b+=g,h+=g;b<P&&(Y(A[x++],S),Qn(S,m,b,N,u,h),b+=N,h+=N),++f&y||(l+=v)}break;case 3:if(p==u&&g==h&&0<l.b){for(b=u,p=m=h+(d-f)*m-(w=(d-f)*q(l.Ea,l.b)),g=u,y=h,v=[],w=(N=w)-1;0<=w;--w)v[w]=g[y+w];for(w=N-1;0<=w;--w)b[p+w]=v[w];Xn(l,f,d,u,m,u,h)}else Xn(l,f,d,p,g,u,h)}h=a,u=i}u!=i&&r(a,i,h,u,s)}function Lt(t,n){var r=t.V,i=t.Ba+t.c*t.C,a=n-t.C;if(e(n<=t.l.o),e(16>=a),0<a){var o=t.l,s=t.Ta,c=t.Ua,h=o.width;if(Nt(t,a,r,i),a=c=[c],e((r=t.C)<(i=n)),e(o.v<o.va),i>o.o&&(i=o.o),r<o.j){var u=o.j-r;r=o.j,a[0]+=u*h}if(r>=i?r=0:(a[0]+=4*o.v,o.ka=r-o.j,o.U=o.va-o.v,o.T=i-r,r=1),r){if(c=c[0],11>(r=t.ca).S){var l=r.f.RGBA,f=(i=r.S,a=o.U,o=o.T,u=l.eb,l.A),d=o;for(l=l.fb+t.Ma*l.A;0<d--;){var p=s,g=c,m=a,v=u,b=l;switch(i){case Mr:tr(p,g,m,v,b);break;case qr:er(p,g,m,v,b);break;case Hr:er(p,g,m,v,b),Ar(v,b,0,m,1,0);break;case Rr:ir(p,g,m,v,b);break;case Dr:et(p,g,m,v,b,1);break;case Wr:et(p,g,m,v,b,1),Ar(v,b,0,m,1,0);break;case Tr:et(p,g,m,v,b,0);break;case Vr:et(p,g,m,v,b,0),Ar(v,b,1,m,1,0);break;case zr:nr(p,g,m,v,b);break;case Gr:nr(p,g,m,v,b),xr(v,b,m,1,0);break;case Ur:rr(p,g,m,v,b);break;default:e(0)}c+=h,l+=f}t.Ma+=o}else alert("todo:EmitRescaledRowsYUVA");e(t.Ma<=r.height)}}t.C=n,e(t.C<=t.i)}function At(t){var e;if(0<t.ua)return 0;for(e=0;e<t.Wb;++e){var n=t.Ya[e].G,r=t.Ya[e].H;if(0<n[1][r[1]+0].g||0<n[2][r[2]+0].g||0<n[3][r[3]+0].g)return 0}return 1}function xt(t,n,r,i,a,o){if(0!=t.Z){var s=t.qd,c=t.rd;for(e(null!=mi[t.Z]);n<r;++n)mi[t.Z](s,c,i,a,i,a,o),s=i,c=a,a+=o;t.qd=s,t.rd=c}}function St(t,n){var r=t.l.ma,i=0==r.Z||1==r.Z?t.l.j:t.C;if(i=t.C<i?i:t.C,e(n<=t.l.o),n>i){var a=t.l.width,o=r.ca,s=r.tb+a*i,c=t.V,h=t.Ba+t.c*i,u=t.gc;e(1==t.ab),e(3==u[0].hc),Kn(u[0],i,n,c,h,o,s),xt(r,i,n,o,s,a)}t.C=t.Ma=n}function _t(t,n,r,i,a,o,s){var c=t.$/i,h=t.$%i,u=t.m,l=t.s,f=r+t.$,d=f;a=r+i*a;var p=r+i*o,g=280+l.ua,m=t.Pb?c:16777216,v=0<l.ua?l.Wa:null,b=l.wc,y=f<p?wt(l,h,c):null;e(t.C<o),e(p<=a);var w=!1;t:for(;;){for(;w||f<p;){var N=0;if(c>=m){var _=f-r;e((m=t).Pb),m.wd=m.m,m.xd=_,0<m.s.ua&&E(m.s.Wa,m.s.vb),m=c+ti}if(h&b||(y=wt(l,h,c)),e(null!=y),y.Qb&&(n[f]=y.qb,w=!0),!w)if(S(u),y.jc){N=u,_=n;var P=f,k=y.pd[L(N)&Dn-1];e(y.jc),256>k.g?(x(N,N.u+k.g),_[P]=k.value,N=0):(x(N,N.u+k.g-256),e(256<=k.value),N=k.value),0==N&&(w=!0)}else N=bt(y.G[0],y.H[0],u);if(u.h)break;if(w||256>N){if(!w)if(y.nd)n[f]=(y.qb|N<<8)>>>0;else{if(S(u),w=bt(y.G[1],y.H[1],u),S(u),_=bt(y.G[2],y.H[2],u),P=bt(y.G[3],y.H[3],u),u.h)break;n[f]=(P<<24|w<<16|N<<8|_)>>>0}if(w=!1,++f,++h>=i&&(h=0,++c,null!=s&&c<=o&&!(c%16)&&s(t,c),null!=v))for(;d<f;)N=n[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else if(280>N){if(N=mt(N-256,u),_=bt(y.G[4],y.H[4],u),S(u),_=vt(i,_=mt(_,u)),u.h)break;if(f-r<_||a-f<N)break t;for(P=0;P<N;++P)n[f+P]=n[f+P-_];for(f+=N,h+=N;h>=i;)h-=i,++c,null!=s&&c<=o&&!(c%16)&&s(t,c);if(e(f<=a),h&b&&(y=wt(l,h,c)),null!=v)for(;d<f;)N=n[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N}else{if(!(N<g))break t;for(w=N-280,e(null!=v);d<f;)N=n[d++],v.X[(506832829*N&4294967295)>>>v.Mb]=N;N=f,e(!(w>>>(_=v).Xa)),n[N]=_.X[w],w=!0}w||e(u.h==A(u))}if(t.Pb&&u.h&&f<a)e(t.m.h),t.a=5,t.m=t.wd,t.$=t.xd,0<t.s.ua&&E(t.s.vb,t.s.Wa);else{if(u.h)break t;null!=s&&s(t,c>o?o:c),t.a=0,t.$=f-r}return 1}return t.a=3,0}function Pt(t){e(null!=t),t.vc=null,t.yc=null,t.Ya=null;var n=t.Wa;null!=n&&(n.X=null),t.vb=null,e(null!=t)}function kt(){var e=new sn;return null==e?null:(e.a=0,e.xb=gi,nt("Predictor","VP8LPredictors"),nt("Predictor","VP8LPredictors_C"),nt("PredictorAdd","VP8LPredictorsAdd"),nt("PredictorAdd","VP8LPredictorsAdd_C"),Yn=G,Qn=X,tr=K,er=Z,nr=$,rr=Q,ir=tt,t.VP8LMapColor32b=Jn,t.VP8LMapColor8b=Zn,e)}function It(t,n,r,s,c){var h=1,f=[t],p=[n],g=s.m,m=s.s,v=null,b=0;t:for(;;){if(r)for(;h&&y(g,1);){var w=f,N=p,A=s,_=1,P=A.m,k=A.gc[A.ab],I=y(P,2);if(A.Oc&1<<I)h=0;else{switch(A.Oc|=1<<I,k.hc=I,k.Ea=w[0],k.nc=N[0],k.K=[null],++A.ab,e(4>=A.ab),I){case 0:case 1:k.b=y(P,3)+2,_=It(q(k.Ea,k.b),q(k.nc,k.b),0,A,k.K),k.K=k.K[0];break;case 3:var F,C=y(P,8)+1,j=16<C?0:4<C?1:2<C?2:3;if(w[0]=q(k.Ea,j),k.b=j,F=_=It(C,1,0,A,k.K)){var E,O=C,M=k,D=1<<(8>>M.b),T=a(D);if(null==T)F=0;else{var z=M.K[0],U=M.w;for(T[0]=M.K[0][0],E=1;E<1*O;++E)T[E]=R(z[U+E],T[E-1]);for(;E<4*D;++E)T[E]=0;M.K[0]=null,M.K[0]=T,F=1}}_=F;break;case 2:break;default:e(0)}h=_}}if(f=f[0],p=p[0],h&&y(g,1)&&!(h=1<=(b=y(g,4))&&11>=b)){s.a=3;break t}var H;if(H=h)e:{var W,V,G,Y=s,X=f,J=p,K=b,Z=r,$=Y.m,Q=Y.s,tt=[null],et=1,nt=0,rt=Qr[K];n:for(;;){if(Z&&y($,1)){var it=y($,3)+2,at=q(X,it),ot=q(J,it),st=at*ot;if(!It(at,ot,0,Y,tt))break n;for(tt=tt[0],Q.xc=it,W=0;W<st;++W){var ct=tt[W]>>8&65535;tt[W]=ct,ct>=et&&(et=ct+1)}}if($.h)break n;for(V=0;5>V;++V){var ht=Jr[V];!V&&0<K&&(ht+=1<<K),nt<ht&&(nt=ht)}var ut=o(et*rt,l),lt=et,ft=o(lt,d);if(null==ft)var dt=null;else e(65536>=lt),dt=ft;var pt=a(nt);if(null==dt||null==pt||null==ut){Y.a=1;break n}var gt=ut;for(W=G=0;W<et;++W){var mt=dt[W],vt=mt.G,bt=mt.H,wt=0,Nt=1,Lt=0;for(V=0;5>V;++V){ht=Jr[V],vt[V]=gt,bt[V]=G,!V&&0<K&&(ht+=1<<K);r:{var At,xt=ht,St=Y,kt=pt,Ft=gt,Ct=G,jt=0,Bt=St.m,Et=y(Bt,1);if(i(kt,0,0,xt),Et){var Ot=y(Bt,1)+1,Mt=y(Bt,1),qt=y(Bt,0==Mt?1:8);kt[qt]=1,2==Ot&&(kt[qt=y(Bt,8)]=1);var Rt=1}else{var Dt=a(19),Tt=y(Bt,4)+4;if(19<Tt){St.a=3;var zt=0;break r}for(At=0;At<Tt;++At)Dt[Zr[At]]=y(Bt,3);var Ut=void 0,Ht=void 0,Wt=St,Vt=Dt,Gt=xt,Yt=kt,Xt=0,Jt=Wt.m,Kt=8,Zt=o(128,l);i:for(;u(Zt,0,7,Vt,19);){if(y(Jt,1)){var $t=2+2*y(Jt,3);if((Ut=2+y(Jt,$t))>Gt)break i}else Ut=Gt;for(Ht=0;Ht<Gt&&Ut--;){S(Jt);var Qt=Zt[0+(127&L(Jt))];x(Jt,Jt.u+Qt.g);var te=Qt.value;if(16>te)Yt[Ht++]=te,0!=te&&(Kt=te);else{var ee=16==te,ne=te-16,re=Xr[ne],ie=y(Jt,Yr[ne])+re;if(Ht+ie>Gt)break i;for(var ae=ee?Kt:0;0<ie--;)Yt[Ht++]=ae}}Xt=1;break i}Xt||(Wt.a=3),Rt=Xt}(Rt=Rt&&!Bt.h)&&(jt=u(Ft,Ct,8,kt,xt)),Rt&&0!=jt?zt=jt:(St.a=3,zt=0)}if(0==zt)break n;if(Nt&&1==Kr[V]&&(Nt=0==gt[G].g),wt+=gt[G].g,G+=zt,3>=V){var oe,se=pt[0];for(oe=1;oe<ht;++oe)pt[oe]>se&&(se=pt[oe]);Lt+=se}}if(mt.nd=Nt,mt.Qb=0,Nt&&(mt.qb=(vt[3][bt[3]+0].value<<24|vt[1][bt[1]+0].value<<16|vt[2][bt[2]+0].value)>>>0,0==wt&&256>vt[0][bt[0]+0].value&&(mt.Qb=1,mt.qb+=vt[0][bt[0]+0].value<<8)),mt.jc=!mt.Qb&&6>Lt,mt.jc){var ce,he=mt;for(ce=0;ce<Dn;++ce){var ue=ce,le=he.pd[ue],fe=he.G[0][he.H[0]+ue];256<=fe.value?(le.g=fe.g+256,le.value=fe.value):(le.g=0,le.value=0,ue>>=yt(fe,8,le),ue>>=yt(he.G[1][he.H[1]+ue],16,le),ue>>=yt(he.G[2][he.H[2]+ue],0,le),yt(he.G[3][he.H[3]+ue],24,le))}}}Q.vc=tt,Q.Wb=et,Q.Ya=dt,Q.yc=ut,H=1;break e}H=0}if(!(h=H)){s.a=3;break t}if(0<b){if(m.ua=1<<b,!B(m.Wa,b)){s.a=1,h=0;break t}}else m.ua=0;var de=s,pe=f,ge=p,me=de.s,ve=me.xc;if(de.c=pe,de.i=ge,me.md=q(pe,ve),me.wc=0==ve?-1:(1<<ve)-1,r){s.xb=pi;break t}if(null==(v=a(f*p))){s.a=1,h=0;break t}h=(h=_t(s,v,0,f,p,p,null))&&!g.h;break t}return h?(null!=c?c[0]=v:(e(null==v),e(r)),s.$=0,r||Pt(m)):Pt(m),h}function Ft(t,n){var r=t.c*t.i,i=r+n+16*n;return e(t.c<=n),t.V=a(i),null==t.V?(t.Ta=null,t.Ua=0,t.a=1,0):(t.Ta=t.V,t.Ua=t.Ba+r+n,1)}function Ct(t,n){var r=t.C,i=n-r,a=t.V,o=t.Ba+t.c*r;for(e(n<=t.l.o);0<i;){var s=16<i?16:i,c=t.l.ma,h=t.l.width,u=h*s,l=c.ca,f=c.tb+h*r,d=t.Ta,p=t.Ua;Nt(t,s,a,o),_r(d,p,l,f,u),xt(c,r,r+s,l,f,h),i-=s,a+=s*t.c,r+=s}e(r==n),t.C=t.Ma=n}function jt(){this.ub=this.yd=this.td=this.Rb=0}function Bt(){this.Kd=this.Ld=this.Ud=this.Td=this.i=this.c=0}function Et(){this.Fb=this.Bb=this.Cb=0,this.Zb=a(4),this.Lb=a(4)}function Ot(){this.Yb=function(){var t=[];return function t(e,n,r){for(var i=r[n],a=0;a<i&&(e.push(r.length>n+1?[]:0),!(r.length<n+1));a++)t(e[a],n+1,r)}(t,0,[3,11]),t}()}function Mt(){this.jb=a(3),this.Wc=s([4,8],Ot),this.Xc=s([4,17],Ot)}function qt(){this.Pc=this.wb=this.Tb=this.zd=0,this.vd=new a(4),this.od=new a(4)}function Rt(){this.ld=this.La=this.dd=this.tc=0}function Dt(){this.Na=this.la=0}function Tt(){this.Sc=[0,0],this.Eb=[0,0],this.Qc=[0,0],this.ia=this.lc=0}function zt(){this.ad=a(384),this.Za=0,this.Ob=a(16),this.$b=this.Ad=this.ia=this.Gc=this.Hc=this.Dd=0}function Ut(){this.uc=this.M=this.Nb=0,this.wa=Array(new Rt),this.Y=0,this.ya=Array(new zt),this.aa=0,this.l=new Gt}function Ht(){this.y=a(16),this.f=a(8),this.ea=a(8)}function Wt(){this.cb=this.a=0,this.sc="",this.m=new w,this.Od=new jt,this.Kc=new Bt,this.ed=new qt,this.Qa=new Et,this.Ic=this.$c=this.Aa=0,this.D=new Ut,this.Xb=this.Va=this.Hb=this.zb=this.yb=this.Ub=this.za=0,this.Jc=o(8,w),this.ia=0,this.pb=o(4,Tt),this.Pa=new Mt,this.Bd=this.kc=0,this.Ac=[],this.Bc=0,this.zc=[0,0,0,0],this.Gd=Array(new Ht),this.Hd=0,this.rb=Array(new Dt),this.sb=0,this.wa=Array(new Rt),this.Y=0,this.oc=[],this.pc=0,this.sa=[],this.ta=0,this.qa=[],this.ra=0,this.Ha=[],this.B=this.R=this.Ia=0,this.Ec=[],this.M=this.ja=this.Vb=this.Fc=0,this.ya=Array(new zt),this.L=this.aa=0,this.gd=s([4,2],Rt),this.ga=null,this.Fa=[],this.Cc=this.qc=this.P=0,this.Gb=[],this.Uc=0,this.mb=[],this.nb=0,this.rc=[],this.Ga=this.Vc=0}function Vt(t,e){return 0>t?0:t>e?e:t}function Gt(){this.T=this.U=this.ka=this.height=this.width=0,this.y=[],this.f=[],this.ea=[],this.Rc=this.fa=this.W=this.N=this.O=0,this.ma="void",this.put="VP8IoPutHook",this.ac="VP8IoSetupHook",this.bc="VP8IoTeardownHook",this.ha=this.Kb=0,this.data=[],this.hb=this.ib=this.da=this.o=this.j=this.va=this.v=this.Da=this.ob=this.w=0,this.F=[],this.J=0}function Yt(){var t=new Wt;return null!=t&&(t.a=0,t.sc="OK",t.cb=0,t.Xb=0,ri||(ri=Zt)),t}function Xt(t,e,n){return 0==t.a&&(t.a=e,t.sc=n,t.cb=0),0}function Jt(t,e,n){return 3<=n&&157==t[e+0]&&1==t[e+1]&&42==t[e+2]}function Kt(t,n){if(null==t)return 0;if(t.a=0,t.sc="OK",null==n)return Xt(t,2,"null VP8Io passed to VP8GetHeaders()");var r=n.data,a=n.w,o=n.ha;if(4>o)return Xt(t,7,"Truncated header.");var s=r[a+0]|r[a+1]<<8|r[a+2]<<16,c=t.Od;if(c.Rb=!(1&s),c.td=s>>1&7,c.yd=s>>4&1,c.ub=s>>5,3<c.td)return Xt(t,3,"Incorrect keyframe parameters.");if(!c.yd)return Xt(t,4,"Frame not displayable.");a+=3,o-=3;var h=t.Kc;if(c.Rb){if(7>o)return Xt(t,7,"cannot parse picture header");if(!Jt(r,a,o))return Xt(t,3,"Bad code word");h.c=16383&(r[a+4]<<8|r[a+3]),h.Td=r[a+4]>>6,h.i=16383&(r[a+6]<<8|r[a+5]),h.Ud=r[a+6]>>6,a+=7,o-=7,t.za=h.c+15>>4,t.Ub=h.i+15>>4,n.width=h.c,n.height=h.i,n.Da=0,n.j=0,n.v=0,n.va=n.width,n.o=n.height,n.da=0,n.ib=n.width,n.hb=n.height,n.U=n.width,n.T=n.height,i((s=t.Pa).jb,0,255,s.jb.length),e(null!=(s=t.Qa)),s.Cb=0,s.Bb=0,s.Fb=1,i(s.Zb,0,0,s.Zb.length),i(s.Lb,0,0,s.Lb)}if(c.ub>o)return Xt(t,7,"bad partition length");p(s=t.m,r,a,c.ub),a+=c.ub,o-=c.ub,c.Rb&&(h.Ld=P(s),h.Kd=P(s)),h=t.Qa;var u,l=t.Pa;if(e(null!=s),e(null!=h),h.Cb=P(s),h.Cb){if(h.Bb=P(s),P(s)){for(h.Fb=P(s),u=0;4>u;++u)h.Zb[u]=P(s)?m(s,7):0;for(u=0;4>u;++u)h.Lb[u]=P(s)?m(s,6):0}if(h.Bb)for(u=0;3>u;++u)l.jb[u]=P(s)?g(s,8):255}else h.Bb=0;if(s.Ka)return Xt(t,3,"cannot parse segment header");if((h=t.ed).zd=P(s),h.Tb=g(s,6),h.wb=g(s,3),h.Pc=P(s),h.Pc&&P(s)){for(l=0;4>l;++l)P(s)&&(h.vd[l]=m(s,6));for(l=0;4>l;++l)P(s)&&(h.od[l]=m(s,6))}if(t.L=0==h.Tb?0:h.zd?1:2,s.Ka)return Xt(t,3,"cannot parse filter header");var f=o;if(o=u=a,a=u+f,h=f,t.Xb=(1<<g(t.m,2))-1,f<3*(l=t.Xb))r=7;else{for(u+=3*l,h-=3*l,f=0;f<l;++f){var d=r[o+0]|r[o+1]<<8|r[o+2]<<16;d>h&&(d=h),p(t.Jc[+f],r,u,d),u+=d,h-=d,o+=3}p(t.Jc[+l],r,u,h),r=u<a?0:5}if(0!=r)return Xt(t,r,"cannot parse partitions");for(r=g(u=t.m,7),o=P(u)?m(u,4):0,a=P(u)?m(u,4):0,h=P(u)?m(u,4):0,l=P(u)?m(u,4):0,u=P(u)?m(u,4):0,f=t.Qa,d=0;4>d;++d){if(f.Cb){var v=f.Zb[d];f.Fb||(v+=r)}else{if(0<d){t.pb[d]=t.pb[0];continue}v=r}var b=t.pb[d];b.Sc[0]=ei[Vt(v+o,127)],b.Sc[1]=ni[Vt(v+0,127)],b.Eb[0]=2*ei[Vt(v+a,127)],b.Eb[1]=101581*ni[Vt(v+h,127)]>>16,8>b.Eb[1]&&(b.Eb[1]=8),b.Qc[0]=ei[Vt(v+l,117)],b.Qc[1]=ni[Vt(v+u,127)],b.lc=v+u}if(!c.Rb)return Xt(t,4,"Not a key frame.");for(P(s),c=t.Pa,r=0;4>r;++r){for(o=0;8>o;++o)for(a=0;3>a;++a)for(h=0;11>h;++h)l=k(s,hi[r][o][a][h])?g(s,8):si[r][o][a][h],c.Wc[r][o].Yb[a][h]=l;for(o=0;17>o;++o)c.Xc[r][o]=c.Wc[r][ui[o]]}return t.kc=P(s),t.kc&&(t.Bd=g(s,8)),t.cb=1}function Zt(t,e,n,r,i,a,o){var s=e[i].Yb[n];for(n=0;16>i;++i){if(!k(t,s[n+0]))return i;for(;!k(t,s[n+1]);)if(s=e[++i].Yb[0],n=0,16==i)return 16;var c=e[i+1].Yb;if(k(t,s[n+2])){var h=t,u=0;if(k(h,(f=s)[(l=n)+3]))if(k(h,f[l+6])){for(s=0,l=2*(u=k(h,f[l+8]))+(f=k(h,f[l+9+u])),u=0,f=ii[l];f[s];++s)u+=u+k(h,f[s]);u+=3+(8<<l)}else k(h,f[l+7])?(u=7+2*k(h,165),u+=k(h,145)):u=5+k(h,159);else u=k(h,f[l+4])?3+k(h,f[l+5]):2;s=c[2]}else u=1,s=c[1];c=o+ai[i],0>(h=t).b&&_(h);var l,f=h.b,d=(l=h.Ca>>1)-(h.I>>f)>>31;--h.b,h.Ca+=d,h.Ca|=1,h.I-=(l+1&d)<<f,a[c]=((u^d)-d)*r[(0<i)+0]}return 16}function $t(t){var e=t.rb[t.sb-1];e.la=0,e.Na=0,i(t.zc,0,0,t.zc.length),t.ja=0}function Qt(t,n){if(null==t)return 0;if(null==n)return Xt(t,2,"NULL VP8Io parameter in VP8Decode().");if(!t.cb&&!Kt(t,n))return 0;if(e(t.cb),null==n.ac||n.ac(n)){n.ob&&(t.L=0);var s=Di[t.L];if(2==t.L?(t.yb=0,t.zb=0):(t.yb=n.v-s>>4,t.zb=n.j-s>>4,0>t.yb&&(t.yb=0),0>t.zb&&(t.zb=0)),t.Va=n.o+15+s>>4,t.Hb=n.va+15+s>>4,t.Hb>t.za&&(t.Hb=t.za),t.Va>t.Ub&&(t.Va=t.Ub),0<t.L){var c=t.ed;for(s=0;4>s;++s){var h;if(t.Qa.Cb){var u=t.Qa.Lb[s];t.Qa.Fb||(u+=c.Tb)}else u=c.Tb;for(h=0;1>=h;++h){var l=t.gd[s][h],f=u;if(c.Pc&&(f+=c.vd[0],h&&(f+=c.od[0])),0<(f=0>f?0:63<f?63:f)){var d=f;0<c.wb&&(d=4<c.wb?d>>2:d>>1)>9-c.wb&&(d=9-c.wb),1>d&&(d=1),l.dd=d,l.tc=2*f+d,l.ld=40<=f?2:15<=f?1:0}else l.tc=0;l.La=h}}}s=0}else Xt(t,6,"Frame setup failed"),s=t.a;if(s=0==s){if(s){t.$c=0,0<t.Aa||(t.Ic=zi);t:{s=t.Ic,c=4*(d=t.za);var p=32*d,g=d+1,m=0<t.L?d*(0<t.Aa?2:1):0,v=(2==t.Aa?2:1)*d;if((l=c+832+(h=3*(16*s+Di[t.L])/2*p)+(u=null!=t.Fa&&0<t.Fa.length?t.Kc.c*t.Kc.i:0))!=l)s=0;else{if(l>t.Vb){if(t.Vb=0,t.Ec=a(l),t.Fc=0,null==t.Ec){s=Xt(t,1,"no memory during frame initialization.");break t}t.Vb=l}l=t.Ec,f=t.Fc,t.Ac=l,t.Bc=f,f+=c,t.Gd=o(p,Ht),t.Hd=0,t.rb=o(g+1,Dt),t.sb=1,t.wa=m?o(m,Rt):null,t.Y=0,t.D.Nb=0,t.D.wa=t.wa,t.D.Y=t.Y,0<t.Aa&&(t.D.Y+=d),e(!0),t.oc=l,t.pc=f,f+=832,t.ya=o(v,zt),t.aa=0,t.D.ya=t.ya,t.D.aa=t.aa,2==t.Aa&&(t.D.aa+=d),t.R=16*d,t.B=8*d,d=(p=Di[t.L])*t.R,p=p/2*t.B,t.sa=l,t.ta=f+d,t.qa=t.sa,t.ra=t.ta+16*s*t.R+p,t.Ha=t.qa,t.Ia=t.ra+8*s*t.B+p,t.$c=0,f+=h,t.mb=u?l:null,t.nb=u?f:null,e(f+u<=t.Fc+t.Vb),$t(t),i(t.Ac,t.Bc,0,c),s=1}}if(s){if(n.ka=0,n.y=t.sa,n.O=t.ta,n.f=t.qa,n.N=t.ra,n.ea=t.Ha,n.Vd=t.Ia,n.fa=t.R,n.Rc=t.B,n.F=null,n.J=0,!Cr){for(s=-255;255>=s;++s)Pr[255+s]=0>s?-s:s;for(s=-1020;1020>=s;++s)kr[1020+s]=-128>s?-128:127<s?127:s;for(s=-112;112>=s;++s)Ir[112+s]=-16>s?-16:15<s?15:s;for(s=-255;510>=s;++s)Fr[255+s]=0>s?0:255<s?255:s;Cr=1}ar=he,or=ae,cr=oe,hr=se,ur=ce,sr=ie,lr=Xe,fr=Je,dr=$e,pr=Qe,gr=Ke,mr=Ze,vr=tn,br=en,yr=Ue,wr=He,Nr=We,Lr=Ve,fi[0]=xe,fi[1]=le,fi[2]=Le,fi[3]=Ae,fi[4]=Se,fi[5]=Pe,fi[6]=_e,fi[7]=ke,fi[8]=Fe,fi[9]=Ie,li[0]=ve,li[1]=de,li[2]=pe,li[3]=ge,li[4]=be,li[5]=ye,li[6]=we,di[0]=Ee,di[1]=fe,di[2]=Ce,di[3]=je,di[4]=Me,di[5]=Oe,di[6]=qe,s=1}else s=0}s&&(s=function(t,n){for(t.M=0;t.M<t.Va;++t.M){var o,s=t.Jc[t.M&t.Xb],c=t.m,h=t;for(o=0;o<h.za;++o){var u=c,l=h,f=l.Ac,d=l.Bc+4*o,p=l.zc,g=l.ya[l.aa+o];if(l.Qa.Bb?g.$b=k(u,l.Pa.jb[0])?2+k(u,l.Pa.jb[2]):k(u,l.Pa.jb[1]):g.$b=0,l.kc&&(g.Ad=k(u,l.Bd)),g.Za=!k(u,145)+0,g.Za){var m=g.Ob,v=0;for(l=0;4>l;++l){var b,y=p[0+l];for(b=0;4>b;++b){y=ci[f[d+b]][y];for(var w=oi[k(u,y[0])];0<w;)w=oi[2*w+k(u,y[w])];y=-w,f[d+b]=y}r(m,v,f,d,4),v+=4,p[0+l]=y}}else y=k(u,156)?k(u,128)?1:3:k(u,163)?2:0,g.Ob[0]=y,i(f,d,y,4),i(p,0,y,4);g.Dd=k(u,142)?k(u,114)?k(u,183)?1:3:2:0}if(h.m.Ka)return Xt(t,7,"Premature end-of-partition0 encountered.");for(;t.ja<t.za;++t.ja){if(h=s,u=(c=t).rb[c.sb-1],f=c.rb[c.sb+c.ja],o=c.ya[c.aa+c.ja],d=c.kc?o.Ad:0)u.la=f.la=0,o.Za||(u.Na=f.Na=0),o.Hc=0,o.Gc=0,o.ia=0;else{var N,L;if(u=f,f=h,d=c.Pa.Xc,p=c.ya[c.aa+c.ja],g=c.pb[p.$b],l=p.ad,m=0,v=c.rb[c.sb-1],y=b=0,i(l,m,0,384),p.Za)var A=0,x=d[3];else{w=a(16);var S=u.Na+v.Na;if(S=ri(f,d[1],S,g.Eb,0,w,0),u.Na=v.Na=(0<S)+0,1<S)ar(w,0,l,m);else{var _=w[0]+3>>3;for(w=0;256>w;w+=16)l[m+w]=_}A=1,x=d[0]}var P=15&u.la,I=15&v.la;for(w=0;4>w;++w){var F=1&I;for(_=L=0;4>_;++_)P=P>>1|(F=(S=ri(f,x,S=F+(1&P),g.Sc,A,l,m))>A)<<7,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=4,I=I>>1|F<<7,b=(b<<8|L)>>>0}for(x=P,A=I>>4,N=0;4>N;N+=2){for(L=0,P=u.la>>4+N,I=v.la>>4+N,w=0;2>w;++w){for(F=1&I,_=0;2>_;++_)S=F+(1&P),P=P>>1|(F=0<(S=ri(f,d[2],S,g.Qc,0,l,m)))<<3,L=L<<2|(3<S?3:1<S?2:0!=l[m+0]),m+=16;P>>=2,I=I>>1|F<<5}y|=L<<4*N,x|=P<<4<<N,A|=(240&I)<<N}u.la=x,v.la=A,p.Hc=b,p.Gc=y,p.ia=43690&y?0:g.ia,d=!(b|y)}if(0<c.L&&(c.wa[c.Y+c.ja]=c.gd[o.$b][o.Za],c.wa[c.Y+c.ja].La|=!d),h.Ka)return Xt(t,7,"Premature end-of-file encountered.")}if($t(t),c=n,h=1,o=(s=t).D,u=0<s.L&&s.M>=s.zb&&s.M<=s.Va,0==s.Aa)t:{if(o.M=s.M,o.uc=u,En(s,o),h=1,o=(L=s.D).Nb,u=(y=Di[s.L])*s.R,f=y/2*s.B,w=16*o*s.R,_=8*o*s.B,d=s.sa,p=s.ta-u+w,g=s.qa,l=s.ra-f+_,m=s.Ha,v=s.Ia-f+_,I=0==(P=L.M),b=P>=s.Va-1,2==s.Aa&&En(s,L),L.uc)for(F=(S=s).D.M,e(S.D.uc),L=S.yb;L<S.Hb;++L){A=L,x=F;var C=(j=(z=S).D).Nb;N=z.R;var j=j.wa[j.Y+A],B=z.sa,E=z.ta+16*C*N+16*A,O=j.dd,M=j.tc;if(0!=M)if(e(3<=M),1==z.L)0<A&&wr(B,E,N,M+4),j.La&&Lr(B,E,N,M),0<x&&yr(B,E,N,M+4),j.La&&Nr(B,E,N,M);else{var q=z.B,R=z.qa,D=z.ra+8*C*q+8*A,T=z.Ha,z=z.Ia+8*C*q+8*A;C=j.ld,0<A&&(fr(B,E,N,M+4,O,C),pr(R,D,T,z,q,M+4,O,C)),j.La&&(mr(B,E,N,M,O,C),br(R,D,T,z,q,M,O,C)),0<x&&(lr(B,E,N,M+4,O,C),dr(R,D,T,z,q,M+4,O,C)),j.La&&(gr(B,E,N,M,O,C),vr(R,D,T,z,q,M,O,C))}}if(s.ia&&alert("todo:DitherRow"),null!=c.put){if(L=16*P,P=16*(P+1),I?(c.y=s.sa,c.O=s.ta+w,c.f=s.qa,c.N=s.ra+_,c.ea=s.Ha,c.W=s.Ia+_):(L-=y,c.y=d,c.O=p,c.f=g,c.N=l,c.ea=m,c.W=v),b||(P-=y),P>c.o&&(P=c.o),c.F=null,c.J=null,null!=s.Fa&&0<s.Fa.length&&L<P&&(c.J=fn(s,c,L,P-L),c.F=s.mb,null==c.F&&0==c.F.length)){h=Xt(s,3,"Could not decode alpha data.");break t}L<c.j&&(y=c.j-L,L=c.j,e(!(1&y)),c.O+=s.R*y,c.N+=s.B*(y>>1),c.W+=s.B*(y>>1),null!=c.F&&(c.J+=c.width*y)),L<P&&(c.O+=c.v,c.N+=c.v>>1,c.W+=c.v>>1,null!=c.F&&(c.J+=c.v),c.ka=L-c.j,c.U=c.va-c.v,c.T=P-L,h=c.put(c))}o+1!=s.Ic||b||(r(s.sa,s.ta-u,d,p+16*s.R,u),r(s.qa,s.ra-f,g,l+8*s.B,f),r(s.Ha,s.Ia-f,m,v+8*s.B,f))}if(!h)return Xt(t,6,"Output aborted.")}return 1}(t,n)),null!=n.bc&&n.bc(n),s&=1}return s?(t.cb=0,s):0}function te(t,e,n,r,i){i=t[e+n+32*r]+(i>>3),t[e+n+32*r]=-256&i?0>i?0:255:i}function ee(t,e,n,r,i,a){te(t,e,0,n,r+i),te(t,e,1,n,r+a),te(t,e,2,n,r-a),te(t,e,3,n,r-i)}function ne(t){return(20091*t>>16)+t}function re(t,e,n,r){var i,o=0,s=a(16);for(i=0;4>i;++i){var c=t[e+0]+t[e+8],h=t[e+0]-t[e+8],u=(35468*t[e+4]>>16)-ne(t[e+12]),l=ne(t[e+4])+(35468*t[e+12]>>16);s[o+0]=c+l,s[o+1]=h+u,s[o+2]=h-u,s[o+3]=c-l,o+=4,e++}for(i=o=0;4>i;++i)c=(t=s[o+0]+4)+s[o+8],h=t-s[o+8],u=(35468*s[o+4]>>16)-ne(s[o+12]),te(n,r,0,0,c+(l=ne(s[o+4])+(35468*s[o+12]>>16))),te(n,r,1,0,h+u),te(n,r,2,0,h-u),te(n,r,3,0,c-l),o++,r+=32}function ie(t,e,n,r){var i=t[e+0]+4,a=35468*t[e+4]>>16,o=ne(t[e+4]),s=35468*t[e+1]>>16;ee(n,r,0,i+o,t=ne(t[e+1]),s),ee(n,r,1,i+a,t,s),ee(n,r,2,i-a,t,s),ee(n,r,3,i-o,t,s)}function ae(t,e,n,r,i){re(t,e,n,r),i&&re(t,e+16,n,r+4)}function oe(t,e,n,r){or(t,e+0,n,r,1),or(t,e+32,n,r+128,1)}function se(t,e,n,r){var i;for(t=t[e+0]+4,i=0;4>i;++i)for(e=0;4>e;++e)te(n,r,e,i,t)}function ce(t,e,n,r){t[e+0]&&hr(t,e+0,n,r),t[e+16]&&hr(t,e+16,n,r+4),t[e+32]&&hr(t,e+32,n,r+128),t[e+48]&&hr(t,e+48,n,r+128+4)}function he(t,e,n,r){var i,o=a(16);for(i=0;4>i;++i){var s=t[e+0+i]+t[e+12+i],c=t[e+4+i]+t[e+8+i],h=t[e+4+i]-t[e+8+i],u=t[e+0+i]-t[e+12+i];o[0+i]=s+c,o[8+i]=s-c,o[4+i]=u+h,o[12+i]=u-h}for(i=0;4>i;++i)s=(t=o[0+4*i]+3)+o[3+4*i],c=o[1+4*i]+o[2+4*i],h=o[1+4*i]-o[2+4*i],u=t-o[3+4*i],n[r+0]=s+c>>3,n[r+16]=u+h>>3,n[r+32]=s-c>>3,n[r+48]=u-h>>3,r+=64}function ue(t,e,n){var r,i=e-32,a=Er,o=255-t[i-1];for(r=0;r<n;++r){var s,c=a,h=o+t[e-1];for(s=0;s<n;++s)t[e+s]=c[h+t[i+s]];e+=32}}function le(t,e){ue(t,e,4)}function fe(t,e){ue(t,e,8)}function de(t,e){ue(t,e,16)}function pe(t,e){var n;for(n=0;16>n;++n)r(t,e+32*n,t,e-32,16)}function ge(t,e){var n;for(n=16;0<n;--n)i(t,e,t[e-1],16),e+=32}function me(t,e,n){var r;for(r=0;16>r;++r)i(e,n+32*r,t,16)}function ve(t,e){var n,r=16;for(n=0;16>n;++n)r+=t[e-1+32*n]+t[e+n-32];me(r>>5,t,e)}function be(t,e){var n,r=8;for(n=0;16>n;++n)r+=t[e-1+32*n];me(r>>4,t,e)}function ye(t,e){var n,r=8;for(n=0;16>n;++n)r+=t[e+n-32];me(r>>4,t,e)}function we(t,e){me(128,t,e)}function Ne(t,e,n){return t+2*e+n+2>>2}function Le(t,e){var n,i=e-32;for(i=new Uint8Array([Ne(t[i-1],t[i+0],t[i+1]),Ne(t[i+0],t[i+1],t[i+2]),Ne(t[i+1],t[i+2],t[i+3]),Ne(t[i+2],t[i+3],t[i+4])]),n=0;4>n;++n)r(t,e+32*n,i,0,i.length)}function Ae(t,e){var n=t[e-1],r=t[e-1+32],i=t[e-1+64],a=t[e-1+96];I(t,e+0,16843009*Ne(t[e-1-32],n,r)),I(t,e+32,16843009*Ne(n,r,i)),I(t,e+64,16843009*Ne(r,i,a)),I(t,e+96,16843009*Ne(i,a,a))}function xe(t,e){var n,r=4;for(n=0;4>n;++n)r+=t[e+n-32]+t[e-1+32*n];for(r>>=3,n=0;4>n;++n)i(t,e+32*n,r,4)}function Se(t,e){var n=t[e-1+0],r=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],h=t[e+3-32];t[e+0+96]=Ne(r,i,t[e-1+96]),t[e+1+96]=t[e+0+64]=Ne(n,r,i),t[e+2+96]=t[e+1+64]=t[e+0+32]=Ne(a,n,r),t[e+3+96]=t[e+2+64]=t[e+1+32]=t[e+0+0]=Ne(o,a,n),t[e+3+64]=t[e+2+32]=t[e+1+0]=Ne(s,o,a),t[e+3+32]=t[e+2+0]=Ne(c,s,o),t[e+3+0]=Ne(h,c,s)}function _e(t,e){var n=t[e+1-32],r=t[e+2-32],i=t[e+3-32],a=t[e+4-32],o=t[e+5-32],s=t[e+6-32],c=t[e+7-32];t[e+0+0]=Ne(t[e+0-32],n,r),t[e+1+0]=t[e+0+32]=Ne(n,r,i),t[e+2+0]=t[e+1+32]=t[e+0+64]=Ne(r,i,a),t[e+3+0]=t[e+2+32]=t[e+1+64]=t[e+0+96]=Ne(i,a,o),t[e+3+32]=t[e+2+64]=t[e+1+96]=Ne(a,o,s),t[e+3+64]=t[e+2+96]=Ne(o,s,c),t[e+3+96]=Ne(s,c,c)}function Pe(t,e){var n=t[e-1+0],r=t[e-1+32],i=t[e-1+64],a=t[e-1-32],o=t[e+0-32],s=t[e+1-32],c=t[e+2-32],h=t[e+3-32];t[e+0+0]=t[e+1+64]=a+o+1>>1,t[e+1+0]=t[e+2+64]=o+s+1>>1,t[e+2+0]=t[e+3+64]=s+c+1>>1,t[e+3+0]=c+h+1>>1,t[e+0+96]=Ne(i,r,n),t[e+0+64]=Ne(r,n,a),t[e+0+32]=t[e+1+96]=Ne(n,a,o),t[e+1+32]=t[e+2+96]=Ne(a,o,s),t[e+2+32]=t[e+3+96]=Ne(o,s,c),t[e+3+32]=Ne(s,c,h)}function ke(t,e){var n=t[e+0-32],r=t[e+1-32],i=t[e+2-32],a=t[e+3-32],o=t[e+4-32],s=t[e+5-32],c=t[e+6-32],h=t[e+7-32];t[e+0+0]=n+r+1>>1,t[e+1+0]=t[e+0+64]=r+i+1>>1,t[e+2+0]=t[e+1+64]=i+a+1>>1,t[e+3+0]=t[e+2+64]=a+o+1>>1,t[e+0+32]=Ne(n,r,i),t[e+1+32]=t[e+0+96]=Ne(r,i,a),t[e+2+32]=t[e+1+96]=Ne(i,a,o),t[e+3+32]=t[e+2+96]=Ne(a,o,s),t[e+3+64]=Ne(o,s,c),t[e+3+96]=Ne(s,c,h)}function Ie(t,e){var n=t[e-1+0],r=t[e-1+32],i=t[e-1+64],a=t[e-1+96];t[e+0+0]=n+r+1>>1,t[e+2+0]=t[e+0+32]=r+i+1>>1,t[e+2+32]=t[e+0+64]=i+a+1>>1,t[e+1+0]=Ne(n,r,i),t[e+3+0]=t[e+1+32]=Ne(r,i,a),t[e+3+32]=t[e+1+64]=Ne(i,a,a),t[e+3+64]=t[e+2+64]=t[e+0+96]=t[e+1+96]=t[e+2+96]=t[e+3+96]=a}function Fe(t,e){var n=t[e-1+0],r=t[e-1+32],i=t[e-1+64],a=t[e-1+96],o=t[e-1-32],s=t[e+0-32],c=t[e+1-32],h=t[e+2-32];t[e+0+0]=t[e+2+32]=n+o+1>>1,t[e+0+32]=t[e+2+64]=r+n+1>>1,t[e+0+64]=t[e+2+96]=i+r+1>>1,t[e+0+96]=a+i+1>>1,t[e+3+0]=Ne(s,c,h),t[e+2+0]=Ne(o,s,c),t[e+1+0]=t[e+3+32]=Ne(n,o,s),t[e+1+32]=t[e+3+64]=Ne(r,n,o),t[e+1+64]=t[e+3+96]=Ne(i,r,n),t[e+1+96]=Ne(a,i,r)}function Ce(t,e){var n;for(n=0;8>n;++n)r(t,e+32*n,t,e-32,8)}function je(t,e){var n;for(n=0;8>n;++n)i(t,e,t[e-1],8),e+=32}function Be(t,e,n){var r;for(r=0;8>r;++r)i(e,n+32*r,t,8)}function Ee(t,e){var n,r=8;for(n=0;8>n;++n)r+=t[e+n-32]+t[e-1+32*n];Be(r>>4,t,e)}function Oe(t,e){var n,r=4;for(n=0;8>n;++n)r+=t[e+n-32];Be(r>>3,t,e)}function Me(t,e){var n,r=4;for(n=0;8>n;++n)r+=t[e-1+32*n];Be(r>>3,t,e)}function qe(t,e){Be(128,t,e)}function Re(t,e,n){var r=t[e-n],i=t[e+0],a=3*(i-r)+jr[1020+t[e-2*n]-t[e+n]],o=Br[112+(a+4>>3)];t[e-n]=Er[255+r+Br[112+(a+3>>3)]],t[e+0]=Er[255+i-o]}function De(t,e,n,r){var i=t[e+0],a=t[e+n];return Or[255+t[e-2*n]-t[e-n]]>r||Or[255+a-i]>r}function Te(t,e,n,r){return 4*Or[255+t[e-n]-t[e+0]]+Or[255+t[e-2*n]-t[e+n]]<=r}function ze(t,e,n,r,i){var a=t[e-3*n],o=t[e-2*n],s=t[e-n],c=t[e+0],h=t[e+n],u=t[e+2*n],l=t[e+3*n];return 4*Or[255+s-c]+Or[255+o-h]>r?0:Or[255+t[e-4*n]-a]<=i&&Or[255+a-o]<=i&&Or[255+o-s]<=i&&Or[255+l-u]<=i&&Or[255+u-h]<=i&&Or[255+h-c]<=i}function Ue(t,e,n,r){var i=2*r+1;for(r=0;16>r;++r)Te(t,e+r,n,i)&&Re(t,e+r,n)}function He(t,e,n,r){var i=2*r+1;for(r=0;16>r;++r)Te(t,e+r*n,1,i)&&Re(t,e+r*n,1)}function We(t,e,n,r){var i;for(i=3;0<i;--i)Ue(t,e+=4*n,n,r)}function Ve(t,e,n,r){var i;for(i=3;0<i;--i)He(t,e+=4,n,r)}function Ge(t,e,n,r,i,a,o,s){for(a=2*a+1;0<i--;){if(ze(t,e,n,a,o))if(De(t,e,n,s))Re(t,e,n);else{var c=t,h=e,u=n,l=c[h-2*u],f=c[h-u],d=c[h+0],p=c[h+u],g=c[h+2*u],m=27*(b=jr[1020+3*(d-f)+jr[1020+l-p]])+63>>7,v=18*b+63>>7,b=9*b+63>>7;c[h-3*u]=Er[255+c[h-3*u]+b],c[h-2*u]=Er[255+l+v],c[h-u]=Er[255+f+m],c[h+0]=Er[255+d-m],c[h+u]=Er[255+p-v],c[h+2*u]=Er[255+g-b]}e+=r}}function Ye(t,e,n,r,i,a,o,s){for(a=2*a+1;0<i--;){if(ze(t,e,n,a,o))if(De(t,e,n,s))Re(t,e,n);else{var c=t,h=e,u=n,l=c[h-u],f=c[h+0],d=c[h+u],p=Br[112+(4+(g=3*(f-l))>>3)],g=Br[112+(g+3>>3)],m=p+1>>1;c[h-2*u]=Er[255+c[h-2*u]+m],c[h-u]=Er[255+l+g],c[h+0]=Er[255+f-p],c[h+u]=Er[255+d-m]}e+=r}}function Xe(t,e,n,r,i,a){Ge(t,e,n,1,16,r,i,a)}function Je(t,e,n,r,i,a){Ge(t,e,1,n,16,r,i,a)}function Ke(t,e,n,r,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4*n,n,1,16,r,i,a)}function Ze(t,e,n,r,i,a){var o;for(o=3;0<o;--o)Ye(t,e+=4,1,n,16,r,i,a)}function $e(t,e,n,r,i,a,o,s){Ge(t,e,i,1,8,a,o,s),Ge(n,r,i,1,8,a,o,s)}function Qe(t,e,n,r,i,a,o,s){Ge(t,e,1,i,8,a,o,s),Ge(n,r,1,i,8,a,o,s)}function tn(t,e,n,r,i,a,o,s){Ye(t,e+4*i,i,1,8,a,o,s),Ye(n,r+4*i,i,1,8,a,o,s)}function en(t,e,n,r,i,a,o,s){Ye(t,e+4,1,i,8,a,o,s),Ye(n,r+4,1,i,8,a,o,s)}function nn(){this.ba=new ot,this.ec=[],this.cc=[],this.Mc=[],this.Dc=this.Nc=this.dc=this.fc=0,this.Oa=new ct,this.memory=0,this.Ib="OutputFunc",this.Jb="OutputAlphaFunc",this.Nd="OutputRowFunc"}function rn(){this.data=[],this.offset=this.kd=this.ha=this.w=0,this.na=[],this.xa=this.gb=this.Ja=this.Sa=this.P=0}function an(){this.nc=this.Ea=this.b=this.hc=0,this.K=[],this.w=0}function on(){this.ua=0,this.Wa=new O,this.vb=new O,this.md=this.xc=this.wc=0,this.vc=[],this.Wb=0,this.Ya=new d,this.yc=new l}function sn(){this.xb=this.a=0,this.l=new Gt,this.ca=new ot,this.V=[],this.Ba=0,this.Ta=[],this.Ua=0,this.m=new N,this.Pb=0,this.wd=new N,this.Ma=this.$=this.C=this.i=this.c=this.xd=0,this.s=new on,this.ab=0,this.gc=o(4,an),this.Oc=0}function cn(){this.Lc=this.Z=this.$a=this.i=this.c=0,this.l=new Gt,this.ic=0,this.ca=[],this.tb=0,this.qd=null,this.rd=0}function hn(t,e,n,r,i,a,o){for(t=null==t?0:t[e+0],e=0;e<o;++e)i[a+e]=t+n[r+e]&255,t=i[a+e]}function un(t,e,n,r,i,a,o){var s;if(null==t)hn(null,null,n,r,i,a,o);else for(s=0;s<o;++s)i[a+s]=t[e+s]+n[r+s]&255}function ln(t,e,n,r,i,a,o){if(null==t)hn(null,null,n,r,i,a,o);else{var s,c=t[e+0],h=c,u=c;for(s=0;s<o;++s)h=u+(c=t[e+s])-h,u=n[r+s]+(-256&h?0>h?0:255:h)&255,h=c,i[a+s]=u}}function fn(t,n,i,o){var s=n.width,c=n.o;if(e(null!=t&&null!=n),0>i||0>=o||i+o>c)return null;if(!t.Cc){if(null==t.ga){var h;if(t.ga=new cn,(h=null==t.ga)||(h=n.width*n.o,e(0==t.Gb.length),t.Gb=a(h),t.Uc=0,null==t.Gb?h=0:(t.mb=t.Gb,t.nb=t.Uc,t.rc=null,h=1),h=!h),!h){h=t.ga;var u=t.Fa,l=t.P,f=t.qc,d=t.mb,p=t.nb,g=l+1,m=f-1,b=h.l;if(e(null!=u&&null!=d&&null!=n),mi[0]=null,mi[1]=hn,mi[2]=un,mi[3]=ln,h.ca=d,h.tb=p,h.c=n.width,h.i=n.height,e(0<h.c&&0<h.i),1>=f)n=0;else if(h.$a=3&u[l+0],h.Z=u[l+0]>>2&3,h.Lc=u[l+0]>>4&3,l=u[l+0]>>6&3,0>h.$a||1<h.$a||4<=h.Z||1<h.Lc||l)n=0;else if(b.put=dt,b.ac=ft,b.bc=pt,b.ma=h,b.width=n.width,b.height=n.height,b.Da=n.Da,b.v=n.v,b.va=n.va,b.j=n.j,b.o=n.o,h.$a)t:{e(1==h.$a),n=kt();e:for(;;){if(null==n){n=0;break t}if(e(null!=h),h.mc=n,n.c=h.c,n.i=h.i,n.l=h.l,n.l.ma=h,n.l.width=h.c,n.l.height=h.i,n.a=0,v(n.m,u,g,m),!It(h.c,h.i,1,n,null))break e;if(1==n.ab&&3==n.gc[0].hc&&At(n.s)?(h.ic=1,u=n.c*n.i,n.Ta=null,n.Ua=0,n.V=a(u),n.Ba=0,null==n.V?(n.a=1,n=0):n=1):(h.ic=0,n=Ft(n,h.c)),!n)break e;n=1;break t}h.mc=null,n=0}else n=m>=h.c*h.i;h=!n}if(h)return null;1!=t.ga.Lc?t.Ga=0:o=c-i}e(null!=t.ga),e(i+o<=c);t:{if(n=(u=t.ga).c,c=u.l.o,0==u.$a){if(g=t.rc,m=t.Vc,b=t.Fa,l=t.P+1+i*n,f=t.mb,d=t.nb+i*n,e(l<=t.P+t.qc),0!=u.Z)for(e(null!=mi[u.Z]),h=0;h<o;++h)mi[u.Z](g,m,b,l,f,d,n),g=f,m=d,d+=n,l+=n;else for(h=0;h<o;++h)r(f,d,b,l,n),g=f,m=d,d+=n,l+=n;t.rc=g,t.Vc=m}else{if(e(null!=u.mc),n=i+o,e(null!=(h=u.mc)),e(n<=h.i),h.C>=n)n=1;else if(u.ic||vn(),u.ic){u=h.V,g=h.Ba,m=h.c;var y=h.i,w=(b=1,l=h.$/m,f=h.$%m,d=h.m,p=h.s,h.$),N=m*y,L=m*n,x=p.wc,_=w<L?wt(p,f,l):null;e(w<=N),e(n<=y),e(At(p));e:for(;;){for(;!d.h&&w<L;){if(f&x||(_=wt(p,f,l)),e(null!=_),S(d),256>(y=bt(_.G[0],_.H[0],d)))u[g+w]=y,++w,++f>=m&&(f=0,++l<=n&&!(l%16)&&St(h,l));else{if(!(280>y)){b=0;break e}y=mt(y-256,d);var P,k=bt(_.G[4],_.H[4],d);if(S(d),!(w>=(k=vt(m,k=mt(k,d)))&&N-w>=y)){b=0;break e}for(P=0;P<y;++P)u[g+w+P]=u[g+w+P-k];for(w+=y,f+=y;f>=m;)f-=m,++l<=n&&!(l%16)&&St(h,l);w<L&&f&x&&(_=wt(p,f,l))}e(d.h==A(d))}St(h,l>n?n:l);break e}!b||d.h&&w<N?(b=0,h.a=d.h?5:3):h.$=w,n=b}else n=_t(h,h.V,h.Ba,h.c,h.i,n,Ct);if(!n){o=0;break t}}i+o>=c&&(t.Cc=1),o=1}if(!o)return null;if(t.Cc&&(null!=(o=t.ga)&&(o.mc=null),t.ga=null,0<t.Ga))return alert("todo:WebPDequantizeLevels"),null}return t.nb+i*s}function dn(t,e,n,r,i,a){for(;0<i--;){var o,s=t,c=e+(n?1:0),h=t,u=e+(n?0:3);for(o=0;o<r;++o){var l=h[u+4*o];255!=l&&(l*=32897,s[c+4*o+0]=s[c+4*o+0]*l>>23,s[c+4*o+1]=s[c+4*o+1]*l>>23,s[c+4*o+2]=s[c+4*o+2]*l>>23)}e+=a}}function pn(t,e,n,r,i){for(;0<r--;){var a;for(a=0;a<n;++a){var o=t[e+2*a+0],s=15&(h=t[e+2*a+1]),c=4369*s,h=(240&h|h>>4)*c>>16;t[e+2*a+0]=(240&o|o>>4)*c>>16&240|(15&o|o<<4)*c>>16>>4&15,t[e+2*a+1]=240&h|s}e+=i}}function gn(t,e,n,r,i,a,o,s){var c,h,u=255;for(h=0;h<i;++h){for(c=0;c<r;++c){var l=t[e+c];a[o+4*c]=l,u&=l}e+=n,o+=s}return 255!=u}function mn(t,e,n,r,i){var a;for(a=0;a<i;++a)n[r+a]=t[e+a]>>8}function vn(){Ar=dn,xr=pn,Sr=gn,_r=mn}function bn(n,r,i){t[n]=function(t,n,a,o,s,c,h,u,l,f,d,p,g,m,v,b,y){var w,N=y-1>>1,L=s[c+0]|h[u+0]<<16,A=l[f+0]|d[p+0]<<16;e(null!=t);var x=3*L+A+131074>>2;for(r(t[n+0],255&x,x>>16,g,m),null!=a&&(x=3*A+L+131074>>2,r(a[o+0],255&x,x>>16,v,b)),w=1;w<=N;++w){var S=s[c+w]|h[u+w]<<16,_=l[f+w]|d[p+w]<<16,P=L+S+A+_+524296,k=P+2*(S+A)>>3;x=k+L>>1,L=(P=P+2*(L+_)>>3)+S>>1,r(t[n+2*w-1],255&x,x>>16,g,m+(2*w-1)*i),r(t[n+2*w-0],255&L,L>>16,g,m+(2*w-0)*i),null!=a&&(x=P+A>>1,L=k+_>>1,r(a[o+2*w-1],255&x,x>>16,v,b+(2*w-1)*i),r(a[o+2*w+0],255&L,L>>16,v,b+(2*w+0)*i)),L=S,A=_}1&y||(x=3*L+A+131074>>2,r(t[n+y-1],255&x,x>>16,g,m+(y-1)*i),null!=a&&(x=3*A+L+131074>>2,r(a[o+y-1],255&x,x>>16,v,b+(y-1)*i)))}}function yn(){vi[Mr]=bi,vi[qr]=wi,vi[Rr]=yi,vi[Dr]=Ni,vi[Tr]=Li,vi[zr]=Ai,vi[Ur]=xi,vi[Hr]=wi,vi[Wr]=Ni,vi[Vr]=Li,vi[Gr]=Ai}function wn(t){return t&~Fi?0>t?0:255:t>>Ii}function Nn(t,e){return wn((19077*t>>8)+(26149*e>>8)-14234)}function Ln(t,e,n){return wn((19077*t>>8)-(6419*e>>8)-(13320*n>>8)+8708)}function An(t,e){return wn((19077*t>>8)+(33050*e>>8)-17685)}function xn(t,e,n,r,i){r[i+0]=Nn(t,n),r[i+1]=Ln(t,e,n),r[i+2]=An(t,e)}function Sn(t,e,n,r,i){r[i+0]=An(t,e),r[i+1]=Ln(t,e,n),r[i+2]=Nn(t,n)}function _n(t,e,n,r,i){var a=Ln(t,e,n);e=a<<3&224|An(t,e)>>3,r[i+0]=248&Nn(t,n)|a>>5,r[i+1]=e}function Pn(t,e,n,r,i){var a=240&An(t,e)|15;r[i+0]=240&Nn(t,n)|Ln(t,e,n)>>4,r[i+1]=a}function kn(t,e,n,r,i){r[i+0]=255,xn(t,e,n,r,i+1)}function In(t,e,n,r,i){Sn(t,e,n,r,i),r[i+3]=255}function Fn(t,e,n,r,i){xn(t,e,n,r,i),r[i+3]=255}function Vt(t,e){return 0>t?0:t>e?e:t}function Cn(e,n,r){t[e]=function(t,e,i,a,o,s,c,h,u){for(var l=h+(-2&u)*r;h!=l;)n(t[e+0],i[a+0],o[s+0],c,h),n(t[e+1],i[a+0],o[s+0],c,h+r),e+=2,++a,++s,h+=2*r;1&u&&n(t[e+0],i[a+0],o[s+0],c,h)}}function jn(t,e,n){return 0==n?0==t?0==e?6:5:0==e?4:0:n}function Bn(t,e,n,r,i){switch(t>>>30){case 3:or(e,n,r,i,0);break;case 2:sr(e,n,r,i);break;case 1:hr(e,n,r,i)}}function En(t,e){var n,a,o=e.M,s=e.Nb,c=t.oc,h=t.pc+40,u=t.oc,l=t.pc+584,f=t.oc,d=t.pc+600;for(n=0;16>n;++n)c[h+32*n-1]=129;for(n=0;8>n;++n)u[l+32*n-1]=129,f[d+32*n-1]=129;for(0<o?c[h-1-32]=u[l-1-32]=f[d-1-32]=129:(i(c,h-32-1,127,21),i(u,l-32-1,127,9),i(f,d-32-1,127,9)),a=0;a<t.za;++a){var p=e.ya[e.aa+a];if(0<a){for(n=-1;16>n;++n)r(c,h+32*n-4,c,h+32*n+12,4);for(n=-1;8>n;++n)r(u,l+32*n-4,u,l+32*n+4,4),r(f,d+32*n-4,f,d+32*n+4,4)}var g=t.Gd,m=t.Hd+a,v=p.ad,b=p.Hc;if(0<o&&(r(c,h-32,g[m].y,0,16),r(u,l-32,g[m].f,0,8),r(f,d-32,g[m].ea,0,8)),p.Za){var y=c,w=h-32+16;for(0<o&&(a>=t.za-1?i(y,w,g[m].y[15],4):r(y,w,g[m+1].y,0,4)),n=0;4>n;n++)y[w+128+n]=y[w+256+n]=y[w+384+n]=y[w+0+n];for(n=0;16>n;++n,b<<=2)y=c,w=h+Ri[n],fi[p.Ob[n]](y,w),Bn(b,v,16*+n,y,w)}else if(y=jn(a,o,p.Ob[0]),li[y](c,h),0!=b)for(n=0;16>n;++n,b<<=2)Bn(b,v,16*+n,c,h+Ri[n]);for(n=p.Gc,y=jn(a,o,p.Dd),di[y](u,l),di[y](f,d),b=v,y=u,w=l,255&(p=0|n)&&(170&p?cr(b,256,y,w):ur(b,256,y,w)),p=f,b=d,255&(n>>=8)&&(170&n?cr(v,320,p,b):ur(v,320,p,b)),o<t.Ub-1&&(r(g[m].y,0,c,h+480,16),r(g[m].f,0,u,l+224,8),r(g[m].ea,0,f,d+224,8)),n=8*s*t.B,g=t.sa,m=t.ta+16*a+16*s*t.R,v=t.qa,p=t.ra+8*a+n,b=t.Ha,y=t.Ia+8*a+n,n=0;16>n;++n)r(g,m+n*t.R,c,h+32*n,16);for(n=0;8>n;++n)r(v,p+n*t.B,u,l+32*n,8),r(b,y+n*t.B,f,d+32*n,8)}}function On(t,r,i,a,o,s,c,h,u){var l=[0],f=[0],d=0,p=null!=u?u.kd:0,g=null!=u?u:new rn;if(null==t||12>i)return 7;g.data=t,g.w=r,g.ha=i,r=[r],i=[i],g.gb=[g.gb];t:{var m=r,b=i,y=g.gb;if(e(null!=t),e(null!=b),e(null!=y),y[0]=0,12<=b[0]&&!n(t,m[0],"RIFF")){if(n(t,m[0]+8,"WEBP")){y=3;break t}var w=j(t,m[0]+4);if(12>w||4294967286<w){y=3;break t}if(p&&w>b[0]-8){y=7;break t}y[0]=w,m[0]+=12,b[0]-=12}y=0}if(0!=y)return y;for(w=0<g.gb[0],i=i[0];;){t:{var L=t;b=r,y=i;var A=l,x=f,S=m=[0];if((k=d=[d])[0]=0,8>y[0])y=7;else{if(!n(L,b[0],"VP8X")){if(10!=j(L,b[0]+4)){y=3;break t}if(18>y[0]){y=7;break t}var _=j(L,b[0]+8),P=1+C(L,b[0]+12);if(2147483648<=P*(L=1+C(L,b[0]+15))){y=3;break t}null!=S&&(S[0]=_),null!=A&&(A[0]=P),null!=x&&(x[0]=L),b[0]+=18,y[0]-=18,k[0]=1}y=0}}if(d=d[0],m=m[0],0!=y)return y;if(b=!!(2&m),!w&&d)return 3;if(null!=s&&(s[0]=!!(16&m)),null!=c&&(c[0]=b),null!=h&&(h[0]=0),c=l[0],m=f[0],d&&b&&null==u){y=0;break}if(4>i){y=7;break}if(w&&d||!w&&!d&&!n(t,r[0],"ALPH")){i=[i],g.na=[g.na],g.P=[g.P],g.Sa=[g.Sa];t:{_=t,y=r,w=i;var k=g.gb;A=g.na,x=g.P,S=g.Sa,P=22,e(null!=_),e(null!=w),L=y[0];var I=w[0];for(e(null!=A),e(null!=S),A[0]=null,x[0]=null,S[0]=0;;){if(y[0]=L,w[0]=I,8>I){y=7;break t}var F=j(_,L+4);if(4294967286<F){y=3;break t}var B=8+F+1&-2;if(P+=B,0<k&&P>k){y=3;break t}if(!n(_,L,"VP8 ")||!n(_,L,"VP8L")){y=0;break t}if(I[0]<B){y=7;break t}n(_,L,"ALPH")||(A[0]=_,x[0]=L+8,S[0]=F),L+=B,I-=B}}if(i=i[0],g.na=g.na[0],g.P=g.P[0],g.Sa=g.Sa[0],0!=y)break}i=[i],g.Ja=[g.Ja],g.xa=[g.xa];t:if(k=t,y=r,w=i,A=g.gb[0],x=g.Ja,S=g.xa,_=y[0],L=!n(k,_,"VP8 "),P=!n(k,_,"VP8L"),e(null!=k),e(null!=w),e(null!=x),e(null!=S),8>w[0])y=7;else{if(L||P){if(k=j(k,_+4),12<=A&&k>A-12){y=3;break t}if(p&&k>w[0]-8){y=7;break t}x[0]=k,y[0]+=8,w[0]-=8,S[0]=P}else S[0]=5<=w[0]&&47==k[_+0]&&!(k[_+4]>>5),x[0]=w[0];y=0}if(i=i[0],g.Ja=g.Ja[0],g.xa=g.xa[0],r=r[0],0!=y)break;if(4294967286<g.Ja)return 3;if(null==h||b||(h[0]=g.xa?2:1),c=[c],m=[m],g.xa){if(5>i){y=7;break}h=c,p=m,b=s,null==t||5>i?t=0:5<=i&&47==t[r+0]&&!(t[r+4]>>5)?(w=[0],k=[0],A=[0],v(x=new N,t,r,i),gt(x,w,k,A)?(null!=h&&(h[0]=w[0]),null!=p&&(p[0]=k[0]),null!=b&&(b[0]=A[0]),t=1):t=0):t=0}else{if(10>i){y=7;break}h=m,null==t||10>i||!Jt(t,r+3,i-3)?t=0:(p=t[r+0]|t[r+1]<<8|t[r+2]<<16,b=16383&(t[r+7]<<8|t[r+6]),t=16383&(t[r+9]<<8|t[r+8]),1&p||3<(p>>1&7)||!(p>>4&1)||p>>5>=g.Ja||!b||!t?t=0:(c&&(c[0]=b),h&&(h[0]=t),t=1))}if(!t)return 3;if(c=c[0],m=m[0],d&&(l[0]!=c||f[0]!=m))return 3;null!=u&&(u[0]=g,u.offset=r-u.w,e(4294967286>r-u.w),e(u.offset==u.ha-i));break}return 0==y||7==y&&d&&null==u?(null!=s&&(s[0]|=null!=g.na&&0<g.na.length),null!=a&&(a[0]=c),null!=o&&(o[0]=m),0):y}function Mn(t,e,n){var r=e.width,i=e.height,a=0,o=0,s=r,c=i;if(e.Da=null!=t&&0<t.Da,e.Da&&(s=t.cd,c=t.bd,a=t.v,o=t.j,11>n||(a&=-2,o&=-2),0>a||0>o||0>=s||0>=c||a+s>r||o+c>i))return 0;if(e.v=a,e.j=o,e.va=a+s,e.o=o+c,e.U=s,e.T=c,e.da=null!=t&&0<t.da,e.da){if(!M(s,c,n=[t.ib],a=[t.hb]))return 0;e.ib=n[0],e.hb=a[0]}return e.ob=null!=t&&t.ob,e.Kb=null==t||!t.Sd,e.da&&(e.ob=e.ib<3*r/4&&e.hb<3*i/4,e.Kb=0),1}function qn(t){if(null==t)return 2;if(11>t.S){var e=t.f.RGBA;e.fb+=(t.height-1)*e.A,e.A=-e.A}else e=t.f.kb,t=t.height,e.O+=(t-1)*e.fa,e.fa=-e.fa,e.N+=(t-1>>1)*e.Ab,e.Ab=-e.Ab,e.W+=(t-1>>1)*e.Db,e.Db=-e.Db,null!=e.F&&(e.J+=(t-1)*e.lb,e.lb=-e.lb);return 0}function Rn(t,e,n,r){if(null==r||0>=t||0>=e)return 2;if(null!=n){if(n.Da){var i=n.cd,o=n.bd,s=-2&n.v,c=-2&n.j;if(0>s||0>c||0>=i||0>=o||s+i>t||c+o>e)return 2;t=i,e=o}if(n.da){if(!M(t,e,i=[n.ib],o=[n.hb]))return 2;t=i[0],e=o[0]}}r.width=t,r.height=e;t:{var h=r.width,u=r.height;if(t=r.S,0>=h||0>=u||!(t>=Mr&&13>t))t=2;else{if(0>=r.Rd&&null==r.sd){s=o=i=e=0;var l=(c=h*Ui[t])*u;if(11>t||(o=(u+1)/2*(e=(h+1)/2),12==t&&(s=(i=h)*u)),null==(u=a(l+2*o+s))){t=1;break t}r.sd=u,11>t?((h=r.f.RGBA).eb=u,h.fb=0,h.A=c,h.size=l):((h=r.f.kb).y=u,h.O=0,h.fa=c,h.Fd=l,h.f=u,h.N=0+l,h.Ab=e,h.Cd=o,h.ea=u,h.W=0+l+o,h.Db=e,h.Ed=o,12==t&&(h.F=u,h.J=0+l+2*o),h.Tc=s,h.lb=i)}if(e=1,i=r.S,o=r.width,s=r.height,i>=Mr&&13>i)if(11>i)t=r.f.RGBA,e&=(c=Math.abs(t.A))*(s-1)+o<=t.size,e&=c>=o*Ui[i],e&=null!=t.eb;else{t=r.f.kb,c=(o+1)/2,l=(s+1)/2,h=Math.abs(t.fa),u=Math.abs(t.Ab);var f=Math.abs(t.Db),d=Math.abs(t.lb),p=d*(s-1)+o;e&=h*(s-1)+o<=t.Fd,e&=u*(l-1)+c<=t.Cd,e=(e&=f*(l-1)+c<=t.Ed)&h>=o&u>=c&f>=c,e&=null!=t.y,e&=null!=t.f,e&=null!=t.ea,12==i&&(e&=d>=o,e&=p<=t.Tc,e&=null!=t.F)}else e=0;t=e?0:2}}return 0!=t||null!=n&&n.fd&&(t=qn(r)),t}var Dn=64,Tn=[0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535,131071,262143,524287,1048575,2097151,4194303,8388607,16777215],zn=24,Un=32,Hn=8,Wn=[0,0,1,1,2,2,2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7];D("Predictor0","PredictorAdd0"),t.Predictor0=function(){return 4278190080},t.Predictor1=function(t){return t},t.Predictor2=function(t,e,n){return e[n+0]},t.Predictor3=function(t,e,n){return e[n+1]},t.Predictor4=function(t,e,n){return e[n-1]},t.Predictor5=function(t,e,n){return z(z(t,e[n+1]),e[n+0])},t.Predictor6=function(t,e,n){return z(t,e[n-1])},t.Predictor7=function(t,e,n){return z(t,e[n+0])},t.Predictor8=function(t,e,n){return z(e[n-1],e[n+0])},t.Predictor9=function(t,e,n){return z(e[n+0],e[n+1])},t.Predictor10=function(t,e,n){return z(z(t,e[n-1]),z(e[n+0],e[n+1]))},t.Predictor11=function(t,e,n){var r=e[n+0];return 0>=W(r>>24&255,t>>24&255,(e=e[n-1])>>24&255)+W(r>>16&255,t>>16&255,e>>16&255)+W(r>>8&255,t>>8&255,e>>8&255)+W(255&r,255&t,255&e)?r:t},t.Predictor12=function(t,e,n){var r=e[n+0];return(U((t>>24&255)+(r>>24&255)-((e=e[n-1])>>24&255))<<24|U((t>>16&255)+(r>>16&255)-(e>>16&255))<<16|U((t>>8&255)+(r>>8&255)-(e>>8&255))<<8|U((255&t)+(255&r)-(255&e)))>>>0},t.Predictor13=function(t,e,n){var r=e[n-1];return(H((t=z(t,e[n+0]))>>24&255,r>>24&255)<<24|H(t>>16&255,r>>16&255)<<16|H(t>>8&255,r>>8&255)<<8|H(255&t,255&r))>>>0};var Vn=t.PredictorAdd0;t.PredictorAdd1=V,D("Predictor2","PredictorAdd2"),D("Predictor3","PredictorAdd3"),D("Predictor4","PredictorAdd4"),D("Predictor5","PredictorAdd5"),D("Predictor6","PredictorAdd6"),D("Predictor7","PredictorAdd7"),D("Predictor8","PredictorAdd8"),D("Predictor9","PredictorAdd9"),D("Predictor10","PredictorAdd10"),D("Predictor11","PredictorAdd11"),D("Predictor12","PredictorAdd12"),D("Predictor13","PredictorAdd13");var Gn=t.PredictorAdd2;J("ColorIndexInverseTransform","MapARGB","32b",(function(t){return t>>8&255}),(function(t){return t})),J("VP8LColorIndexInverseTransformAlpha","MapAlpha","8b",(function(t){return t}),(function(t){return t>>8&255}));var Yn,Xn=t.ColorIndexInverseTransform,Jn=t.MapARGB,Kn=t.VP8LColorIndexInverseTransformAlpha,Zn=t.MapAlpha,$n=t.VP8LPredictorsAdd=[];$n.length=16,(t.VP8LPredictors=[]).length=16,(t.VP8LPredictorsAdd_C=[]).length=16,(t.VP8LPredictors_C=[]).length=16;var Qn,tr,er,nr,rr,ir,ar,or,sr,cr,hr,ur,lr,fr,dr,pr,gr,mr,vr,br,yr,wr,Nr,Lr,Ar,xr,Sr,_r,Pr=a(511),kr=a(2041),Ir=a(225),Fr=a(767),Cr=0,jr=kr,Br=Ir,Er=Fr,Or=Pr,Mr=0,qr=1,Rr=2,Dr=3,Tr=4,zr=5,Ur=6,Hr=7,Wr=8,Vr=9,Gr=10,Yr=[2,3,7],Xr=[3,3,11],Jr=[280,256,256,256,40],Kr=[0,1,1,1,0],Zr=[17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15],$r=[24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112],Qr=[2954,2956,2958,2962,2970,2986,3018,3082,3212,3468,3980,5004],ti=8,ei=[4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157],ni=[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,119,122,125,128,131,134,137,140,143,146,149,152,155,158,161,164,167,170,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,234,239,245,249,254,259,264,269,274,279,284],ri=null,ii=[[173,148,140,0],[176,155,140,135,0],[180,157,141,134,130,0],[254,254,243,230,196,177,153,140,133,130,129,0]],ai=[0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15],oi=[-0,1,-1,2,-2,3,4,6,-3,5,-4,-5,-6,7,-7,8,-8,-9],si=[[[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]],[[253,136,254,255,228,219,128,128,128,128,128],[189,129,242,255,227,213,255,219,128,128,128],[106,126,227,252,214,209,255,255,128,128,128]],[[1,98,248,255,236,226,255,255,128,128,128],[181,133,238,254,221,234,255,154,128,128,128],[78,134,202,247,198,180,255,219,128,128,128]],[[1,185,249,255,243,255,128,128,128,128,128],[184,150,247,255,236,224,128,128,128,128,128],[77,110,216,255,236,230,128,128,128,128,128]],[[1,101,251,255,241,255,128,128,128,128,128],[170,139,241,252,236,209,255,255,128,128,128],[37,116,196,243,228,255,255,255,128,128,128]],[[1,204,254,255,245,255,128,128,128,128,128],[207,160,250,255,238,128,128,128,128,128,128],[102,103,231,255,211,171,128,128,128,128,128]],[[1,152,252,255,240,255,128,128,128,128,128],[177,135,243,255,234,225,128,128,128,128,128],[80,129,211,255,194,224,128,128,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[246,1,255,128,128,128,128,128,128,128,128],[255,128,128,128,128,128,128,128,128,128,128]]],[[[198,35,237,223,193,187,162,160,145,155,62],[131,45,198,221,172,176,220,157,252,221,1],[68,47,146,208,149,167,221,162,255,223,128]],[[1,149,241,255,221,224,255,255,128,128,128],[184,141,234,253,222,220,255,199,128,128,128],[81,99,181,242,176,190,249,202,255,255,128]],[[1,129,232,253,214,197,242,196,255,255,128],[99,121,210,250,201,198,255,202,128,128,128],[23,91,163,242,170,187,247,210,255,255,128]],[[1,200,246,255,234,255,128,128,128,128,128],[109,178,241,255,231,245,255,255,128,128,128],[44,130,201,253,205,192,255,255,128,128,128]],[[1,132,239,251,219,209,255,165,128,128,128],[94,136,225,251,218,190,255,255,128,128,128],[22,100,174,245,186,161,255,199,128,128,128]],[[1,182,249,255,232,235,128,128,128,128,128],[124,143,241,255,227,234,128,128,128,128,128],[35,77,181,251,193,211,255,205,128,128,128]],[[1,157,247,255,236,231,255,255,128,128,128],[121,141,235,255,225,227,255,255,128,128,128],[45,99,188,251,195,217,255,224,128,128,128]],[[1,1,251,255,213,255,128,128,128,128,128],[203,1,248,255,255,128,128,128,128,128,128],[137,1,177,255,224,255,128,128,128,128,128]]],[[[253,9,248,251,207,208,255,192,128,128,128],[175,13,224,243,193,185,249,198,255,255,128],[73,17,171,221,161,179,236,167,255,234,128]],[[1,95,247,253,212,183,255,255,128,128,128],[239,90,244,250,211,209,255,255,128,128,128],[155,77,195,248,188,195,255,255,128,128,128]],[[1,24,239,251,218,219,255,205,128,128,128],[201,51,219,255,196,186,128,128,128,128,128],[69,46,190,239,201,218,255,228,128,128,128]],[[1,191,251,255,255,128,128,128,128,128,128],[223,165,249,255,213,255,128,128,128,128,128],[141,124,248,255,255,128,128,128,128,128,128]],[[1,16,248,255,255,128,128,128,128,128,128],[190,36,230,255,236,255,128,128,128,128,128],[149,1,255,128,128,128,128,128,128,128,128]],[[1,226,255,128,128,128,128,128,128,128,128],[247,192,255,128,128,128,128,128,128,128,128],[240,128,255,128,128,128,128,128,128,128,128]],[[1,134,252,255,255,128,128,128,128,128,128],[213,62,250,255,255,128,128,128,128,128,128],[55,93,255,128,128,128,128,128,128,128,128]],[[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128],[128,128,128,128,128,128,128,128,128,128,128]]],[[[202,24,213,235,186,191,220,160,240,175,255],[126,38,182,232,169,184,228,174,255,187,128],[61,46,138,219,151,178,240,170,255,216,128]],[[1,112,230,250,199,191,247,159,255,255,128],[166,109,228,252,211,215,255,174,128,128,128],[39,77,162,232,172,180,245,178,255,255,128]],[[1,52,220,246,198,199,249,220,255,255,128],[124,74,191,243,183,193,250,221,255,255,128],[24,71,130,219,154,170,243,182,255,255,128]],[[1,182,225,249,219,240,255,224,128,128,128],[149,150,226,252,216,205,255,171,128,128,128],[28,108,170,242,183,194,254,223,255,255,128]],[[1,81,230,252,204,203,255,192,128,128,128],[123,102,209,247,188,196,255,233,128,128,128],[20,95,153,243,164,173,255,203,128,128,128]],[[1,222,248,255,216,213,128,128,128,128,128],[168,175,246,252,235,205,255,255,128,128,128],[47,116,215,255,211,212,255,255,128,128,128]],[[1,121,236,253,212,214,255,255,128,128,128],[141,84,213,252,201,202,255,219,128,128,128],[42,80,160,240,162,185,255,205,128,128,128]],[[1,1,255,128,128,128,128,128,128,128,128],[244,1,255,128,128,128,128,128,128,128,128],[238,1,255,128,128,128,128,128,128,128,128]]]],ci=[[[231,120,48,89,115,113,120,152,112],[152,179,64,126,170,118,46,70,95],[175,69,143,80,85,82,72,155,103],[56,58,10,171,218,189,17,13,152],[114,26,17,163,44,195,21,10,173],[121,24,80,195,26,62,44,64,85],[144,71,10,38,171,213,144,34,26],[170,46,55,19,136,160,33,206,71],[63,20,8,114,114,208,12,9,226],[81,40,11,96,182,84,29,16,36]],[[134,183,89,137,98,101,106,165,148],[72,187,100,130,157,111,32,75,80],[66,102,167,99,74,62,40,234,128],[41,53,9,178,241,141,26,8,107],[74,43,26,146,73,166,49,23,157],[65,38,105,160,51,52,31,115,128],[104,79,12,27,217,255,87,17,7],[87,68,71,44,114,51,15,186,23],[47,41,14,110,182,183,21,17,194],[66,45,25,102,197,189,23,18,22]],[[88,88,147,150,42,46,45,196,205],[43,97,183,117,85,38,35,179,61],[39,53,200,87,26,21,43,232,171],[56,34,51,104,114,102,29,93,77],[39,28,85,171,58,165,90,98,64],[34,22,116,206,23,34,43,166,73],[107,54,32,26,51,1,81,43,31],[68,25,106,22,64,171,36,225,114],[34,19,21,102,132,188,16,76,124],[62,18,78,95,85,57,50,48,51]],[[193,101,35,159,215,111,89,46,111],[60,148,31,172,219,228,21,18,111],[112,113,77,85,179,255,38,120,114],[40,42,1,196,245,209,10,25,109],[88,43,29,140,166,213,37,43,154],[61,63,30,155,67,45,68,1,209],[100,80,8,43,154,1,51,26,71],[142,78,78,16,255,128,34,197,171],[41,40,5,102,211,183,4,1,221],[51,50,17,168,209,192,23,25,82]],[[138,31,36,171,27,166,38,44,229],[67,87,58,169,82,115,26,59,179],[63,59,90,180,59,166,93,73,154],[40,40,21,116,143,209,34,39,175],[47,15,16,183,34,223,49,45,183],[46,17,33,183,6,98,15,32,183],[57,46,22,24,128,1,54,17,37],[65,32,73,115,28,128,23,128,205],[40,3,9,115,51,192,18,6,223],[87,37,9,115,59,77,64,21,47]],[[104,55,44,218,9,54,53,130,226],[64,90,70,205,40,41,23,26,57],[54,57,112,184,5,41,38,166,213],[30,34,26,133,152,116,10,32,134],[39,19,53,221,26,114,32,73,255],[31,9,65,234,2,15,1,118,73],[75,32,12,51,192,255,160,43,51],[88,31,35,67,102,85,55,186,85],[56,21,23,111,59,205,45,37,192],[55,38,70,124,73,102,1,34,98]],[[125,98,42,88,104,85,117,175,82],[95,84,53,89,128,100,113,101,45],[75,79,123,47,51,128,81,171,1],[57,17,5,71,102,57,53,41,49],[38,33,13,121,57,73,26,1,85],[41,10,67,138,77,110,90,47,114],[115,21,2,10,102,255,166,23,6],[101,29,16,10,85,128,101,196,26],[57,18,10,102,102,213,34,20,43],[117,20,15,36,163,128,68,1,26]],[[102,61,71,37,34,53,31,243,192],[69,60,71,38,73,119,28,222,37],[68,45,128,34,1,47,11,245,171],[62,17,19,70,146,85,55,62,70],[37,43,37,154,100,163,85,160,1],[63,9,92,136,28,64,32,201,85],[75,15,9,9,64,255,184,119,16],[86,6,28,5,64,255,25,248,1],[56,8,17,132,137,255,55,116,128],[58,15,20,82,135,57,26,121,40]],[[164,50,31,137,154,133,25,35,218],[51,103,44,131,131,123,31,6,158],[86,40,64,135,148,224,45,183,128],[22,26,17,131,240,154,14,1,209],[45,16,21,91,64,222,7,1,197],[56,21,39,155,60,138,23,102,213],[83,12,13,54,192,255,68,47,28],[85,26,85,85,128,128,32,146,171],[18,11,7,63,144,171,4,4,246],[35,27,10,146,174,171,12,26,128]],[[190,80,35,99,180,80,126,54,45],[85,126,47,87,176,51,41,20,32],[101,75,128,139,118,146,116,128,85],[56,41,15,176,236,85,37,9,62],[71,30,17,119,118,255,17,18,138],[101,38,60,138,55,70,43,26,142],[146,36,19,30,171,255,97,27,20],[138,45,61,62,219,1,81,188,64],[32,41,20,117,151,142,20,21,163],[112,19,12,61,195,128,48,4,24]]],hi=[[[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[176,246,255,255,255,255,255,255,255,255,255],[223,241,252,255,255,255,255,255,255,255,255],[249,253,253,255,255,255,255,255,255,255,255]],[[255,244,252,255,255,255,255,255,255,255,255],[234,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255]],[[255,246,254,255,255,255,255,255,255,255,255],[239,253,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[251,255,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[251,254,254,255,255,255,255,255,255,255,255],[254,255,254,255,255,255,255,255,255,255,255]],[[255,254,253,255,254,255,255,255,255,255,255],[250,255,254,255,254,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[217,255,255,255,255,255,255,255,255,255,255],[225,252,241,253,255,255,254,255,255,255,255],[234,250,241,250,253,255,253,254,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[223,254,254,255,255,255,255,255,255,255,255],[238,253,254,254,255,255,255,255,255,255,255]],[[255,248,254,255,255,255,255,255,255,255,255],[249,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,255,255,255,255,255,255,255,255,255],[247,254,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[252,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[253,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[186,251,250,255,255,255,255,255,255,255,255],[234,251,244,254,255,255,255,255,255,255,255],[251,251,243,253,254,255,254,255,255,255,255]],[[255,253,254,255,255,255,255,255,255,255,255],[236,253,254,255,255,255,255,255,255,255,255],[251,253,253,254,254,255,255,255,255,255,255]],[[255,254,254,255,255,255,255,255,255,255,255],[254,254,254,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,254,255,255,255,255,255,255,255,255,255],[254,254,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]],[[[248,255,255,255,255,255,255,255,255,255,255],[250,254,252,254,255,255,255,255,255,255,255],[248,254,249,253,255,255,255,255,255,255,255]],[[255,253,253,255,255,255,255,255,255,255,255],[246,253,253,255,255,255,255,255,255,255,255],[252,254,251,254,254,255,255,255,255,255,255]],[[255,254,252,255,255,255,255,255,255,255,255],[248,254,253,255,255,255,255,255,255,255,255],[253,255,254,254,255,255,255,255,255,255,255]],[[255,251,254,255,255,255,255,255,255,255,255],[245,251,254,255,255,255,255,255,255,255,255],[253,253,254,255,255,255,255,255,255,255,255]],[[255,251,253,255,255,255,255,255,255,255,255],[252,253,254,255,255,255,255,255,255,255,255],[255,254,255,255,255,255,255,255,255,255,255]],[[255,252,255,255,255,255,255,255,255,255,255],[249,255,254,255,255,255,255,255,255,255,255],[255,255,254,255,255,255,255,255,255,255,255]],[[255,255,253,255,255,255,255,255,255,255,255],[250,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]],[[255,255,255,255,255,255,255,255,255,255,255],[254,255,255,255,255,255,255,255,255,255,255],[255,255,255,255,255,255,255,255,255,255,255]]]],ui=[0,1,2,3,6,4,5,6,6,6,6,6,6,6,6,7,0],li=[],fi=[],di=[],pi=1,gi=2,mi=[],vi=[];bn("UpsampleRgbLinePair",xn,3),bn("UpsampleBgrLinePair",Sn,3),bn("UpsampleRgbaLinePair",Fn,4),bn("UpsampleBgraLinePair",In,4),bn("UpsampleArgbLinePair",kn,4),bn("UpsampleRgba4444LinePair",Pn,2),bn("UpsampleRgb565LinePair",_n,2);var bi=t.UpsampleRgbLinePair,yi=t.UpsampleBgrLinePair,wi=t.UpsampleRgbaLinePair,Ni=t.UpsampleBgraLinePair,Li=t.UpsampleArgbLinePair,Ai=t.UpsampleRgba4444LinePair,xi=t.UpsampleRgb565LinePair,Si=16,_i=1<<Si-1,Pi=-227,ki=482,Ii=6,Fi=(256<<Ii)-1,Ci=0,ji=a(256),Bi=a(256),Ei=a(256),Oi=a(256),Mi=a(ki-Pi),qi=a(ki-Pi);Cn("YuvToRgbRow",xn,3),Cn("YuvToBgrRow",Sn,3),Cn("YuvToRgbaRow",Fn,4),Cn("YuvToBgraRow",In,4),Cn("YuvToArgbRow",kn,4),Cn("YuvToRgba4444Row",Pn,2),Cn("YuvToRgb565Row",_n,2);var Ri=[0,4,8,12,128,132,136,140,256,260,264,268,384,388,392,396],Di=[0,2,8],Ti=[8,7,6,4,4,2,2,2,1,1,1,1],zi=1;this.WebPDecodeRGBA=function(t,n,r,i,a){var o=qr,s=new nn,c=new ot;s.ba=c,c.S=o,c.width=[c.width],c.height=[c.height];var h=c.width,u=c.height,l=new st;if(null==l||null==t)var f=2;else e(null!=l),f=On(t,n,r,l.width,l.height,l.Pd,l.Qd,l.format,null);if(0!=f?h=0:(null!=h&&(h[0]=l.width[0]),null!=u&&(u[0]=l.height[0]),h=1),h){c.width=c.width[0],c.height=c.height[0],null!=i&&(i[0]=c.width),null!=a&&(a[0]=c.height);t:{if(i=new Gt,(a=new rn).data=t,a.w=n,a.ha=r,a.kd=1,n=[0],e(null!=a),(0==(t=On(a.data,a.w,a.ha,null,null,null,n,null,a))||7==t)&&n[0]&&(t=4),0==(n=t)){if(e(null!=s),i.data=a.data,i.w=a.w+a.offset,i.ha=a.ha-a.offset,i.put=dt,i.ac=ft,i.bc=pt,i.ma=s,a.xa){if(null==(t=kt())){s=1;break t}if(function(t,n){var r=[0],i=[0],a=[0];e:for(;;){if(null==t)return 0;if(null==n)return t.a=2,0;if(t.l=n,t.a=0,v(t.m,n.data,n.w,n.ha),!gt(t.m,r,i,a)){t.a=3;break e}if(t.xb=gi,n.width=r[0],n.height=i[0],!It(r[0],i[0],1,t,null))break e;return 1}return e(0!=t.a),0}(t,i)){if(i=0==(n=Rn(i.width,i.height,s.Oa,s.ba))){e:{i=t;n:for(;;){if(null==i){i=0;break e}if(e(null!=i.s.yc),e(null!=i.s.Ya),e(0<i.s.Wb),e(null!=(r=i.l)),e(null!=(a=r.ma)),0!=i.xb){if(i.ca=a.ba,i.tb=a.tb,e(null!=i.ca),!Mn(a.Oa,r,Dr)){i.a=2;break n}if(!Ft(i,r.width))break n;if(r.da)break n;if((r.da||rt(i.ca.S))&&vn(),11>i.ca.S||(alert("todo:WebPInitConvertARGBToYUV"),null!=i.ca.f.kb.F&&vn()),i.Pb&&0<i.s.ua&&null==i.s.vb.X&&!B(i.s.vb,i.s.Wa.Xa)){i.a=1;break n}i.xb=0}if(!_t(i,i.V,i.Ba,i.c,i.i,r.o,Lt))break n;a.Dc=i.Ma,i=1;break e}e(0!=i.a),i=0}i=!i}i&&(n=t.a)}else n=t.a}else{if(null==(t=new Yt)){s=1;break t}if(t.Fa=a.na,t.P=a.P,t.qc=a.Sa,Kt(t,i)){if(0==(n=Rn(i.width,i.height,s.Oa,s.ba))){if(t.Aa=0,r=s.Oa,e(null!=(a=t)),null!=r){if(0<(h=0>(h=r.Md)?0:100<h?255:255*h/100)){for(u=l=0;4>u;++u)12>(f=a.pb[u]).lc&&(f.ia=h*Ti[0>f.lc?0:f.lc]>>3),l|=f.ia;l&&(alert("todo:VP8InitRandom"),a.ia=1)}a.Ga=r.Id,100<a.Ga?a.Ga=100:0>a.Ga&&(a.Ga=0)}Qt(t,i)||(n=t.a)}}else n=t.a}0==n&&null!=s.Oa&&s.Oa.fd&&(n=qn(s.ba))}s=n}o=0!=s?null:11>o?c.f.RGBA.eb:c.f.kb.y}else o=null;return o};var Ui=[3,4,3,4,4,2,2,4,4,4,2,1,1]};function h(t,e){for(var n="",r=0;r<4;r++)n+=String.fromCharCode(t[e++]);return n}function u(t,e){return(t[e+0]|t[e+1]<<8|t[e+2]<<16)>>>0}function l(t,e){return(t[e+0]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0}new c;var f=[0],d=[0],p=[],g=new c,m=t,v=function(t,e){var n={},r=0,i=!1,a=0,o=0;if(n.frames=[],!function(t,e){for(var n=0;n<4;n++)if(t[e+n]!="RIFF".charCodeAt(n))return!0;return!1}(t,e)){var s,c;for(l(t,e+=4),e+=8;e<t.length;){var f=h(t,e),d=l(t,e+=4);e+=4;var p=d+(1&d);switch(f){case"VP8 ":case"VP8L":void 0===n.frames[r]&&(n.frames[r]={}),(v=n.frames[r]).src_off=i?o:e-8,v.src_size=a+d+8,r++,i&&(i=!1,a=0,o=0);break;case"VP8X":(v=n.header={}).feature_flags=t[e];var g=e+4;v.canvas_width=1+u(t,g),g+=3,v.canvas_height=1+u(t,g),g+=3;break;case"ALPH":i=!0,a=p+8,o=e-8;break;case"ANIM":(v=n.header).bgcolor=l(t,e),g=e+4,v.loop_count=(s=t)[(c=g)+0]|s[c+1]<<8,g+=2;break;case"ANMF":var m,v;(v=n.frames[r]={}).offset_x=2*u(t,e),e+=3,v.offset_y=2*u(t,e),e+=3,v.width=1+u(t,e),e+=3,v.height=1+u(t,e),e+=3,v.duration=u(t,e),e+=3,m=t[e++],v.dispose=1&m,v.blend=m>>1&1}"ANMF"!=f&&(e+=p)}return n}}(m,0);v.response=m,v.rgbaoutput=!0,v.dataurl=!1;var b=v.header?v.header:null,y=v.frames?v.frames:null;if(b){b.loop_counter=b.loop_count,f=[b.canvas_height],d=[b.canvas_width];for(var w=0;w<y.length&&0!=y[w].blend;w++);}var N=y[0],L=g.WebPDecodeRGBA(m,N.src_off,N.src_size,d,f);N.rgba=L,N.imgwidth=d[0],N.imgheight=f[0];for(var A=0;A<d[0]*f[0]*4;A++)p[A]=L[A];return this.width=d,this.height=f,this.data=p,this}!function(t){var e=function(e,r,c,h){var u=4,l=a;switch(h){case t.image_compression.FAST:u=1,l=i;break;case t.image_compression.MEDIUM:u=6,l=o;break;case t.image_compression.SLOW:u=9,l=s}var f=Y(e=n(e,r,c,l),{level:u});return t.__addimage__.arrayBufferToBinaryString(f)},n=function(t,e,n,r){for(var i,a,o,s=t.length/e,c=new Uint8Array(t.length+s),l=h(),f=0;f<s;f+=1){if(o=f*e,i=t.subarray(o,o+e),r)c.set(r(i,n,a),o+f);else{for(var d,p=l.length,g=[];d<p;d+=1)g[d]=l[d](i,n,a);var m=u(g.concat());c.set(g[m],o+f)}a=i}return c},r=function(t){var e=Array.apply([],t);return e.unshift(0),e},i=function(t,e){var n,r=[],i=t.length;r[0]=1;for(var a=0;a<i;a+=1)n=t[a-e]||0,r[a+1]=t[a]-n+256&255;return r},a=function(t,e,n){var r,i=[],a=t.length;i[0]=2;for(var o=0;o<a;o+=1)r=n&&n[o]||0,i[o+1]=t[o]-r+256&255;return i},o=function(t,e,n){var r,i,a=[],o=t.length;a[0]=3;for(var s=0;s<o;s+=1)r=t[s-e]||0,i=n&&n[s]||0,a[s+1]=t[s]+256-(r+i>>>1)&255;return a},s=function(t,e,n){var r,i,a,o,s=[],h=t.length;s[0]=4;for(var u=0;u<h;u+=1)r=t[u-e]||0,i=n&&n[u]||0,a=n&&n[u-e]||0,o=c(r,i,a),s[u+1]=t[u]-o+256&255;return s},c=function(t,e,n){if(t===e&&e===n)return t;var r=Math.abs(e-n),i=Math.abs(t-n),a=Math.abs(t+e-n-n);return r<=i&&r<=a?t:i<=a?e:n},h=function(){return[r,i,a,o,s]},u=function(t){var e=t.map((function(t){return t.reduce((function(t,e){return t+Math.abs(e)}),0)}));return e.indexOf(Math.min.apply(null,e))};t.processPNG=function(n,r,i,a){var o,s,c,h,u,l,f,d,p,g,m,v,b,y,w,N=this.decode.FLATE_DECODE,L="";if(this.__addimage__.isArrayBuffer(n)&&(n=new Uint8Array(n)),this.__addimage__.isArrayBufferView(n)){if(n=(c=new ze(n)).imgData,s=c.bits,o=c.colorSpace,u=c.colors,-1!==[4,6].indexOf(c.colorType)){if(8===c.bits){p=(d=32==c.pixelBitlength?new Uint32Array(c.decodePixels().buffer):16==c.pixelBitlength?new Uint16Array(c.decodePixels().buffer):new Uint8Array(c.decodePixels().buffer)).length,m=new Uint8Array(p*c.colors),g=new Uint8Array(p);var A,x=c.pixelBitlength-c.bits;for(y=0,w=0;y<p;y++){for(b=d[y],A=0;A<x;)m[w++]=b>>>A&255,A+=c.bits;g[y]=b>>>A&255}}if(16===c.bits){p=(d=new Uint32Array(c.decodePixels().buffer)).length,m=new Uint8Array(p*(32/c.pixelBitlength)*c.colors),g=new Uint8Array(p*(32/c.pixelBitlength)),v=c.colors>1,y=0,w=0;for(var S=0;y<p;)b=d[y++],m[w++]=b>>>0&255,v&&(m[w++]=b>>>16&255,b=d[y++],m[w++]=b>>>0&255),g[S++]=b>>>16&255;s=8}a!==t.image_compression.NONE?(n=e(m,c.width*c.colors,c.colors,a),f=e(g,c.width,1,a)):(n=m,f=g,N=void 0)}if(3===c.colorType&&(o=this.color_spaces.INDEXED,l=c.palette,c.transparency.indexed)){var _=c.transparency.indexed,P=0;for(y=0,p=_.length;y<p;++y)P+=_[y];if((P/=255)==p-1&&-1!==_.indexOf(0))h=[_.indexOf(0)];else if(P!==p){for(d=c.decodePixels(),g=new Uint8Array(d.length),y=0,p=d.length;y<p;y++)g[y]=_[d[y]];f=e(g,c.width,1)}}var k=function(e){var n;switch(e){case t.image_compression.FAST:n=11;break;case t.image_compression.MEDIUM:n=13;break;case t.image_compression.SLOW:n=14;break;default:n=12}return n}(a);return N===this.decode.FLATE_DECODE&&(L="/Predictor "+k+" "),L+="/Colors "+u+" /BitsPerComponent "+s+" /Columns "+c.width,(this.__addimage__.isArrayBuffer(n)||this.__addimage__.isArrayBufferView(n))&&(n=this.__addimage__.arrayBufferToBinaryString(n)),(f&&this.__addimage__.isArrayBuffer(f)||this.__addimage__.isArrayBufferView(f))&&(f=this.__addimage__.arrayBufferToBinaryString(f)),{alias:i,data:n,index:r,filter:N,decodeParameters:L,transparency:h,palette:l,sMask:f,predictor:k,width:c.width,height:c.height,bitsPerComponent:s,colorSpace:o}}}}(It.API),function(t){t.processGIF89A=function(e,n,r,i){var a=new Ue(e),o=a.width,s=a.height,c=[];a.decodeAndBlitFrameRGBA(0,c);var h={data:c,width:o,height:s},u=new We(100).encode(h,100);return t.processJPEG.call(this,u,n,r,i)},t.processGIF87A=t.processGIF89A}(It.API),Ve.prototype.parseHeader=function(){if(this.fileSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.reserved=this.datav.getUint32(this.pos,!0),this.pos+=4,this.offset=this.datav.getUint32(this.pos,!0),this.pos+=4,this.headerSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.width=this.datav.getUint32(this.pos,!0),this.pos+=4,this.height=this.datav.getInt32(this.pos,!0),this.pos+=4,this.planes=this.datav.getUint16(this.pos,!0),this.pos+=2,this.bitPP=this.datav.getUint16(this.pos,!0),this.pos+=2,this.compress=this.datav.getUint32(this.pos,!0),this.pos+=4,this.rawSize=this.datav.getUint32(this.pos,!0),this.pos+=4,this.hr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.vr=this.datav.getUint32(this.pos,!0),this.pos+=4,this.colors=this.datav.getUint32(this.pos,!0),this.pos+=4,this.importantColors=this.datav.getUint32(this.pos,!0),this.pos+=4,16===this.bitPP&&this.is_with_alpha&&(this.bitPP=15),this.bitPP<15){var t=0===this.colors?1<<this.bitPP:this.colors;this.palette=new Array(t);for(var e=0;e<t;e++){var n=this.datav.getUint8(this.pos++,!0),r=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0);this.palette[e]={red:i,green:r,blue:n,quad:a}}}this.height<0&&(this.height*=-1,this.bottom_up=!1)},Ve.prototype.parseBGR=function(){this.pos=this.offset;try{var t="bit"+this.bitPP,e=this.width*this.height*4;this.data=new Uint8Array(e),this[t]()}catch(t){$.log("bit decode error:"+t)}},Ve.prototype.bit1=function(){var t,e=Math.ceil(this.width/8),n=e%4;for(t=this.height-1;t>=0;t--){for(var r=this.bottom_up?t:this.height-1-t,i=0;i<e;i++)for(var a=this.datav.getUint8(this.pos++,!0),o=r*this.width*4+8*i*4,s=0;s<8&&8*i+s<this.width;s++){var c=this.palette[a>>7-s&1];this.data[o+4*s]=c.blue,this.data[o+4*s+1]=c.green,this.data[o+4*s+2]=c.red,this.data[o+4*s+3]=255}0!==n&&(this.pos+=4-n)}},Ve.prototype.bit4=function(){for(var t=Math.ceil(this.width/2),e=t%4,n=this.height-1;n>=0;n--){for(var r=this.bottom_up?n:this.height-1-n,i=0;i<t;i++){var a=this.datav.getUint8(this.pos++,!0),o=r*this.width*4+2*i*4,s=a>>4,c=15&a,h=this.palette[s];if(this.data[o]=h.blue,this.data[o+1]=h.green,this.data[o+2]=h.red,this.data[o+3]=255,2*i+1>=this.width)break;h=this.palette[c],this.data[o+4]=h.blue,this.data[o+4+1]=h.green,this.data[o+4+2]=h.red,this.data[o+4+3]=255}0!==e&&(this.pos+=4-e)}},Ve.prototype.bit8=function(){for(var t=this.width%4,e=this.height-1;e>=0;e--){for(var n=this.bottom_up?e:this.height-1-e,r=0;r<this.width;r++){var i=this.datav.getUint8(this.pos++,!0),a=n*this.width*4+4*r;if(i<this.palette.length){var o=this.palette[i];this.data[a]=o.red,this.data[a+1]=o.green,this.data[a+2]=o.blue,this.data[a+3]=255}else this.data[a]=255,this.data[a+1]=255,this.data[a+2]=255,this.data[a+3]=255}0!==t&&(this.pos+=4-t)}},Ve.prototype.bit15=function(){for(var t=this.width%3,e=parseInt("11111",2),n=this.height-1;n>=0;n--){for(var r=this.bottom_up?n:this.height-1-n,i=0;i<this.width;i++){var a=this.datav.getUint16(this.pos,!0);this.pos+=2;var o=(a&e)/e*255|0,s=(a>>5&e)/e*255|0,c=(a>>10&e)/e*255|0,h=a>>15?255:0,u=r*this.width*4+4*i;this.data[u]=c,this.data[u+1]=s,this.data[u+2]=o,this.data[u+3]=h}this.pos+=t}},Ve.prototype.bit16=function(){for(var t=this.width%3,e=parseInt("11111",2),n=parseInt("111111",2),r=this.height-1;r>=0;r--){for(var i=this.bottom_up?r:this.height-1-r,a=0;a<this.width;a++){var o=this.datav.getUint16(this.pos,!0);this.pos+=2;var s=(o&e)/e*255|0,c=(o>>5&n)/n*255|0,h=(o>>11)/e*255|0,u=i*this.width*4+4*a;this.data[u]=h,this.data[u+1]=c,this.data[u+2]=s,this.data[u+3]=255}this.pos+=t}},Ve.prototype.bit24=function(){for(var t=this.height-1;t>=0;t--){for(var e=this.bottom_up?t:this.height-1-t,n=0;n<this.width;n++){var r=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=e*this.width*4+4*n;this.data[o]=a,this.data[o+1]=i,this.data[o+2]=r,this.data[o+3]=255}this.pos+=this.width%4}},Ve.prototype.bit32=function(){for(var t=this.height-1;t>=0;t--)for(var e=this.bottom_up?t:this.height-1-t,n=0;n<this.width;n++){var r=this.datav.getUint8(this.pos++,!0),i=this.datav.getUint8(this.pos++,!0),a=this.datav.getUint8(this.pos++,!0),o=this.datav.getUint8(this.pos++,!0),s=e*this.width*4+4*n;this.data[s]=a,this.data[s+1]=i,this.data[s+2]=r,this.data[s+3]=o}},Ve.prototype.getData=function(){return this.data},function(t){t.processBMP=function(e,n,r,i){var a=new Ve(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},h=new We(100).encode(c,100);return t.processJPEG.call(this,h,n,r,i)}}(It.API),Ge.prototype.getData=function(){return this.data},function(t){t.processWEBP=function(e,n,r,i){var a=new Ge(e,!1),o=a.width,s=a.height,c={data:a.getData(),width:o,height:s},h=new We(100).encode(c,100);return t.processJPEG.call(this,h,n,r,i)}}(It.API),It.API.processRGBA=function(t,e,n){for(var r=t.data,i=r.length,a=new Uint8Array(i/4*3),o=new Uint8Array(i/4),s=0,c=0,h=0;h<i;h+=4){var u=r[h],l=r[h+1],f=r[h+2],d=r[h+3];a[s++]=u,a[s++]=l,a[s++]=f,o[c++]=d}var p=this.__addimage__.arrayBufferToBinaryString(a);return{alpha:this.__addimage__.arrayBufferToBinaryString(o),data:p,index:e,alias:n,colorSpace:"DeviceRGB",bitsPerComponent:8,width:t.width,height:t.height}},It.API.setLanguage=function(t){return void 0===this.internal.languageSettings&&(this.internal.languageSettings={},this.internal.languageSettings.isSubscribed=!1),void 0!=={af:"Afrikaans",sq:"Albanian",ar:"Arabic (Standard)","ar-DZ":"Arabic (Algeria)","ar-BH":"Arabic (Bahrain)","ar-EG":"Arabic (Egypt)","ar-IQ":"Arabic (Iraq)","ar-JO":"Arabic (Jordan)","ar-KW":"Arabic (Kuwait)","ar-LB":"Arabic (Lebanon)","ar-LY":"Arabic (Libya)","ar-MA":"Arabic (Morocco)","ar-OM":"Arabic (Oman)","ar-QA":"Arabic (Qatar)","ar-SA":"Arabic (Saudi Arabia)","ar-SY":"Arabic (Syria)","ar-TN":"Arabic (Tunisia)","ar-AE":"Arabic (U.A.E.)","ar-YE":"Arabic (Yemen)",an:"Aragonese",hy:"Armenian",as:"Assamese",ast:"Asturian",az:"Azerbaijani",eu:"Basque",be:"Belarusian",bn:"Bengali",bs:"Bosnian",br:"Breton",bg:"Bulgarian",my:"Burmese",ca:"Catalan",ch:"Chamorro",ce:"Chechen",zh:"Chinese","zh-HK":"Chinese (Hong Kong)","zh-CN":"Chinese (PRC)","zh-SG":"Chinese (Singapore)","zh-TW":"Chinese (Taiwan)",cv:"Chuvash",co:"Corsican",cr:"Cree",hr:"Croatian",cs:"Czech",da:"Danish",nl:"Dutch (Standard)","nl-BE":"Dutch (Belgian)",en:"English","en-AU":"English (Australia)","en-BZ":"English (Belize)","en-CA":"English (Canada)","en-IE":"English (Ireland)","en-JM":"English (Jamaica)","en-NZ":"English (New Zealand)","en-PH":"English (Philippines)","en-ZA":"English (South Africa)","en-TT":"English (Trinidad & Tobago)","en-GB":"English (United Kingdom)","en-US":"English (United States)","en-ZW":"English (Zimbabwe)",eo:"Esperanto",et:"Estonian",fo:"Faeroese",fj:"Fijian",fi:"Finnish",fr:"French (Standard)","fr-BE":"French (Belgium)","fr-CA":"French (Canada)","fr-FR":"French (France)","fr-LU":"French (Luxembourg)","fr-MC":"French (Monaco)","fr-CH":"French (Switzerland)",fy:"Frisian",fur:"Friulian",gd:"Gaelic (Scots)","gd-IE":"Gaelic (Irish)",gl:"Galacian",ka:"Georgian",de:"German (Standard)","de-AT":"German (Austria)","de-DE":"German (Germany)","de-LI":"German (Liechtenstein)","de-LU":"German (Luxembourg)","de-CH":"German (Switzerland)",el:"Greek",gu:"Gujurati",ht:"Haitian",he:"Hebrew",hi:"Hindi",hu:"Hungarian",is:"Icelandic",id:"Indonesian",iu:"Inuktitut",ga:"Irish",it:"Italian (Standard)","it-CH":"Italian (Switzerland)",ja:"Japanese",kn:"Kannada",ks:"Kashmiri",kk:"Kazakh",km:"Khmer",ky:"Kirghiz",tlh:"Klingon",ko:"Korean","ko-KP":"Korean (North Korea)","ko-KR":"Korean (South Korea)",la:"Latin",lv:"Latvian",lt:"Lithuanian",lb:"Luxembourgish",mk:"North Macedonia",ms:"Malay",ml:"Malayalam",mt:"Maltese",mi:"Maori",mr:"Marathi",mo:"Moldavian",nv:"Navajo",ng:"Ndonga",ne:"Nepali",no:"Norwegian",nb:"Norwegian (Bokmal)",nn:"Norwegian (Nynorsk)",oc:"Occitan",or:"Oriya",om:"Oromo",fa:"Persian","fa-IR":"Persian/Iran",pl:"Polish",pt:"Portuguese","pt-BR":"Portuguese (Brazil)",pa:"Punjabi","pa-IN":"Punjabi (India)","pa-PK":"Punjabi (Pakistan)",qu:"Quechua",rm:"Rhaeto-Romanic",ro:"Romanian","ro-MO":"Romanian (Moldavia)",ru:"Russian","ru-MO":"Russian (Moldavia)",sz:"Sami (Lappish)",sg:"Sango",sa:"Sanskrit",sc:"Sardinian",sd:"Sindhi",si:"Singhalese",sr:"Serbian",sk:"Slovak",sl:"Slovenian",so:"Somani",sb:"Sorbian",es:"Spanish","es-AR":"Spanish (Argentina)","es-BO":"Spanish (Bolivia)","es-CL":"Spanish (Chile)","es-CO":"Spanish (Colombia)","es-CR":"Spanish (Costa Rica)","es-DO":"Spanish (Dominican Republic)","es-EC":"Spanish (Ecuador)","es-SV":"Spanish (El Salvador)","es-GT":"Spanish (Guatemala)","es-HN":"Spanish (Honduras)","es-MX":"Spanish (Mexico)","es-NI":"Spanish (Nicaragua)","es-PA":"Spanish (Panama)","es-PY":"Spanish (Paraguay)","es-PE":"Spanish (Peru)","es-PR":"Spanish (Puerto Rico)","es-ES":"Spanish (Spain)","es-UY":"Spanish (Uruguay)","es-VE":"Spanish (Venezuela)",sx:"Sutu",sw:"Swahili",sv:"Swedish","sv-FI":"Swedish (Finland)","sv-SV":"Swedish (Sweden)",ta:"Tamil",tt:"Tatar",te:"Teluga",th:"Thai",tig:"Tigre",ts:"Tsonga",tn:"Tswana",tr:"Turkish",tk:"Turkmen",uk:"Ukrainian",hsb:"Upper Sorbian",ur:"Urdu",ve:"Venda",vi:"Vietnamese",vo:"Volapuk",wa:"Walloon",cy:"Welsh",xh:"Xhosa",ji:"Yiddish",zu:"Zulu"}[t]&&(this.internal.languageSettings.languageCode=t,!1===this.internal.languageSettings.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){this.internal.write("/Lang ("+this.internal.languageSettings.languageCode+")")})),this.internal.languageSettings.isSubscribed=!0)),this},Me=It.API,qe=Me.getCharWidthsArray=function(t,e){var n,i,a=(e=e||{}).font||this.internal.getFont(),o=e.fontSize||this.internal.getFontSize(),s=e.charSpace||this.internal.getCharSpace(),c=e.widths?e.widths:a.metadata.Unicode.widths,h=c.fof?c.fof:1,u=e.kerning?e.kerning:a.metadata.Unicode.kerning,l=u.fof?u.fof:1,f=!1!==e.doKerning,d=0,p=t.length,g=0,m=c[0]||h,v=[];for(n=0;n<p;n++)i=t.charCodeAt(n),"function"==typeof a.metadata.widthOfString?v.push((a.metadata.widthOfGlyph(a.metadata.characterToGlyph(i))+s*(1e3/o)||0)/1e3):(d=f&&"object"===(0,r.A)(u[i])&&!isNaN(parseInt(u[i][g],10))?u[i][g]/l:0,v.push((c[i]||m)/h+d)),g=i;return v},Re=Me.getStringUnitWidth=function(t,e){var n=(e=e||{}).fontSize||this.internal.getFontSize(),r=e.font||this.internal.getFont(),i=e.charSpace||this.internal.getCharSpace();return Me.processArabic&&(t=Me.processArabic(t)),"function"==typeof r.metadata.widthOfString?r.metadata.widthOfString(t,n,i)/n:qe.apply(this,arguments).reduce((function(t,e){return t+e}),0)},De=function(t,e,n,r){for(var i=[],a=0,o=t.length,s=0;a!==o&&s+e[a]<n;)s+=e[a],a++;i.push(t.slice(0,a));var c=a;for(s=0;a!==o;)s+e[a]>r&&(i.push(t.slice(c,a)),s=0,c=a),s+=e[a],a++;return c!==a&&i.push(t.slice(c,a)),i},Te=function(t,e,n){n||(n={});var r,i,a,o,s,c,h,u=[],l=[u],f=n.textIndent||0,d=0,p=0,g=t.split(" "),m=qe.apply(this,[" ",n])[0];if(c=-1===n.lineIndent?g[0].length+2:n.lineIndent||0){var v=Array(c).join(" "),b=[];g.map((function(t){(t=t.split(/\s*\n/)).length>1?b=b.concat(t.map((function(t,e){return(e&&t.length?"\n":"")+t}))):b.push(t[0])})),g=b,c=Re.apply(this,[v,n])}for(a=0,o=g.length;a<o;a++){var y=0;if(r=g[a],c&&"\n"==r[0]&&(r=r.substr(1),y=1),f+d+(p=(i=qe.apply(this,[r,n])).reduce((function(t,e){return t+e}),0))>e||y){if(p>e){for(s=De.apply(this,[r,i,e-(f+d),e]),u.push(s.shift()),u=[s.pop()];s.length;)l.push([s.shift()]);p=i.slice(r.length-(u[0]?u[0].length:0)).reduce((function(t,e){return t+e}),0)}else u=[r];l.push(u),f=p+c,d=m}else u.push(r),f+=d+p,d=m}return h=c?function(t,e){return(e?v:"")+t.join(" ")}:function(t){return t.join(" ")},l.map(h)},Me.splitTextToSize=function(t,e,n){var r,i=(n=n||{}).fontSize||this.internal.getFontSize(),a=function(t){if(t.widths&&t.kerning)return{widths:t.widths,kerning:t.kerning};var e=this.internal.getFont(t.fontName,t.fontStyle);return e.metadata.Unicode?{widths:e.metadata.Unicode.widths||{0:1},kerning:e.metadata.Unicode.kerning||{}}:{font:e.metadata,fontSize:this.internal.getFontSize(),charSpace:this.internal.getCharSpace()}}.call(this,n);r=Array.isArray(t)?t:String(t).split(/\r?\n/);var o=1*this.internal.scaleFactor*e/i;a.textIndent=n.textIndent?1*n.textIndent*this.internal.scaleFactor/i:0,a.lineIndent=n.lineIndent;var s,c,h=[];for(s=0,c=r.length;s<c;s++)h=h.concat(Te.apply(this,[r[s],o,a]));return h},function(t){t.__fontmetrics__=t.__fontmetrics__||{};for(var e="klmnopqrstuvwxyz",n={},i={},a=0;a<16;a++)n[e[a]]="0123456789abcdef"[a],i["0123456789abcdef"[a]]=e[a];var o=function(t){return"0x"+parseInt(t,10).toString(16)},s=t.__fontmetrics__.compress=function(t){var e,n,a,c,h=["{"];for(var u in t){if(e=t[u],isNaN(parseInt(u,10))?n="'"+u+"'":(u=parseInt(u,10),n=(n=o(u).slice(2)).slice(0,-1)+i[n.slice(-1)]),"number"==typeof e)e<0?(a=o(e).slice(3),c="-"):(a=o(e).slice(2),c=""),a=c+a.slice(0,-1)+i[a.slice(-1)];else{if("object"!==(0,r.A)(e))throw new Error("Don't know what to do with value type "+(0,r.A)(e)+".");a=s(e)}h.push(n+a)}return h.push("}"),h.join("")},c=t.__fontmetrics__.uncompress=function(t){if("string"!=typeof t)throw new Error("Invalid argument passed to uncompress.");for(var e,r,i,a,o={},s=1,c=o,h=[],u="",l="",f=t.length-1,d=1;d<f;d+=1)"'"==(a=t[d])?e?(i=e.join(""),e=void 0):e=[]:e?e.push(a):"{"==a?(h.push([c,i]),c={},i=void 0):"}"==a?((r=h.pop())[0][r[1]]=c,i=void 0,c=r[0]):"-"==a?s=-1:void 0===i?n.hasOwnProperty(a)?(u+=n[a],i=parseInt(u,16)*s,s=1,u=""):u+=a:n.hasOwnProperty(a)?(l+=n[a],c[i]=parseInt(l,16)*s,s=1,i=void 0,l=""):l+=a;return o},h={codePages:["WinAnsiEncoding"],WinAnsiEncoding:c("{19m8n201n9q201o9r201s9l201t9m201u8m201w9n201x9o201y8o202k8q202l8r202m9p202q8p20aw8k203k8t203t8v203u9v2cq8s212m9t15m8w15n9w2dw9s16k8u16l9u17s9z17x8y17y9y}")},u={Unicode:{Courier:h,"Courier-Bold":h,"Courier-BoldOblique":h,"Courier-Oblique":h,Helvetica:h,"Helvetica-Bold":h,"Helvetica-BoldOblique":h,"Helvetica-Oblique":h,"Times-Roman":h,"Times-Bold":h,"Times-BoldItalic":h,"Times-Italic":h}},l={Unicode:{"Courier-Oblique":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-BoldItalic":c("{'widths'{k3o2q4ycx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2r202m2n2n3m2o3m2p5n202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5n4l4m4m4m4n4m4o4s4p4m4q4m4r4s4s4y4t2r4u3m4v4m4w3x4x5t4y4s4z4s5k3x5l4s5m4m5n3r5o3x5p4s5q4m5r5t5s4m5t3x5u3x5v2l5w1w5x2l5y3t5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q2l6r3m6s3r6t1w6u1w6v3m6w1w6x4y6y3r6z3m7k3m7l3m7m2r7n2r7o1w7p3r7q2w7r4m7s3m7t2w7u2r7v2n7w1q7x2n7y3t202l3mcl4mal2ram3man3mao3map3mar3mas2lat4uau1uav3maw3way4uaz2lbk2sbl3t'fof'6obo2lbp3tbq3mbr1tbs2lbu1ybv3mbz3mck4m202k3mcm4mcn4mco4mcp4mcq5ycr4mcs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz2w203k6o212m6o2dw2l2cq2l3t3m3u2l17s3x19m3m}'kerning'{cl{4qu5kt5qt5rs17ss5ts}201s{201ss}201t{cks4lscmscnscoscpscls2wu2yu201ts}201x{2wu2yu}2k{201ts}2w{4qx5kx5ou5qx5rs17su5tu}2x{17su5tu5ou}2y{4qx5kx5ou5qx5rs17ss5ts}'fof'-6ofn{17sw5tw5ou5qw5rs}7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qs}3v{17su5tu5os5qs}7p{17su5tu}ck{4qu5kt5qt5rs17ss5ts}4l{4qu5kt5qt5rs17ss5ts}cm{4qu5kt5qt5rs17ss5ts}cn{4qu5kt5qt5rs17ss5ts}co{4qu5kt5qt5rs17ss5ts}cp{4qu5kt5qt5rs17ss5ts}6l{4qu5ou5qw5rt17su5tu}5q{ckuclucmucnucoucpu4lu}5r{ckuclucmucnucoucpu4lu}7q{cksclscmscnscoscps4ls}6p{4qu5ou5qw5rt17sw5tw}ek{4qu5ou5qw5rt17su5tu}el{4qu5ou5qw5rt17su5tu}em{4qu5ou5qw5rt17su5tu}en{4qu5ou5qw5rt17su5tu}eo{4qu5ou5qw5rt17su5tu}ep{4qu5ou5qw5rt17su5tu}es{17ss5ts5qs4qu}et{4qu5ou5qw5rt17sw5tw}eu{4qu5ou5qw5rt17ss5ts}ev{17ss5ts5qs4qu}6z{17sw5tw5ou5qw5rs}fm{17sw5tw5ou5qw5rs}7n{201ts}fo{17sw5tw5ou5qw5rs}fp{17sw5tw5ou5qw5rs}fq{17sw5tw5ou5qw5rs}7r{cksclscmscnscoscps4ls}fs{17sw5tw5ou5qw5rs}ft{17su5tu}fu{17su5tu}fv{17su5tu}fw{17su5tu}fz{cksclscmscnscoscps4ls}}}"),"Helvetica-Bold":c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),Courier:c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-BoldOblique":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Bold":c("{'widths'{k3q2q5ncx2r201n3m201o6o201s2l201t2l201u2l201w3m201x3m201y3m2k1t2l2l202m2n2n3m2o3m2p6o202q6o2r1w2s2l2t2l2u3m2v3t2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w3t3x3t3y3t3z3m4k5x4l4s4m4m4n4s4o4s4p4m4q3x4r4y4s4y4t2r4u3m4v4y4w4m4x5y4y4s4z4y5k3x5l4y5m4s5n3r5o4m5p4s5q4s5r6o5s4s5t4s5u4m5v2l5w1w5x2l5y3u5z3m6k2l6l3m6m3r6n2w6o3r6p2w6q2l6r3m6s3r6t1w6u2l6v3r6w1w6x5n6y3r6z3m7k3r7l3r7m2w7n2r7o2l7p3r7q3m7r4s7s3m7t3m7u2w7v2r7w1q7x2r7y3o202l3mcl4sal2lam3man3mao3map3mar3mas2lat4uau1yav3maw3tay4uaz2lbk2sbl3t'fof'6obo2lbp3rbr1tbs2lbu2lbv3mbz3mck4s202k3mcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw2r2m3rcy2rcz2rdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3rek3mel3mem3men3meo3mep3meq4ser2wes2wet2weu2wev2wew1wex1wey1wez1wfl3rfm3mfn3mfo3mfp3mfq3mfr3tfs3mft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3m3u2l17s4s19m3m}'kerning'{cl{4qt5ks5ot5qy5rw17sv5tv}201t{cks4lscmscnscoscpscls4wv}2k{201ts}2w{4qu5ku7mu5os5qx5ru17su5tu}2x{17su5tu5ou5qs}2y{4qv5kv7mu5ot5qz5ru17su5tu}'fof'-6o7t{cksclscmscnscoscps4ls}3u{17su5tu5os5qu}3v{17su5tu5os5qu}fu{17su5tu5ou5qu}7p{17su5tu5ou5qu}ck{4qt5ks5ot5qy5rw17sv5tv}4l{4qt5ks5ot5qy5rw17sv5tv}cm{4qt5ks5ot5qy5rw17sv5tv}cn{4qt5ks5ot5qy5rw17sv5tv}co{4qt5ks5ot5qy5rw17sv5tv}cp{4qt5ks5ot5qy5rw17sv5tv}6l{17st5tt5ou5qu}17s{ckuclucmucnucoucpu4lu4wu}5o{ckuclucmucnucoucpu4lu4wu}5q{ckzclzcmzcnzcozcpz4lz4wu}5r{ckxclxcmxcnxcoxcpx4lx4wu}5t{ckuclucmucnucoucpu4lu4wu}7q{ckuclucmucnucoucpu4lu}6p{17sw5tw5ou5qu}ek{17st5tt5qu}el{17st5tt5ou5qu}em{17st5tt5qu}en{17st5tt5qu}eo{17st5tt5qu}ep{17st5tt5ou5qu}es{17ss5ts5qu}et{17sw5tw5ou5qu}eu{17sw5tw5ou5qu}ev{17ss5ts5qu}6z{17sw5tw5ou5qu5rs}fm{17sw5tw5ou5qu5rs}fn{17sw5tw5ou5qu5rs}fo{17sw5tw5ou5qu5rs}fp{17sw5tw5ou5qu5rs}fq{17sw5tw5ou5qu5rs}7r{cktcltcmtcntcotcpt4lt5os}fs{17sw5tw5ou5qu5rs}ft{17su5tu5ou5qu}7m{5os}fv{17su5tu5ou5qu}fw{17su5tu5ou5qu}fz{cksclscmscnscoscps4ls}}}"),Symbol:c("{'widths'{k3uaw4r19m3m2k1t2l2l202m2y2n3m2p5n202q6o3k3m2s2l2t2l2v3r2w1t3m3m2y1t2z1wbk2sbl3r'fof'6o3n3m3o3m3p3m3q3m3r3m3s3m3t3m3u1w3v1w3w3r3x3r3y3r3z2wbp3t3l3m5v2l5x2l5z3m2q4yfr3r7v3k7w1o7x3k}'kerning'{'fof'-6o}}"),Helvetica:c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}"),"Helvetica-BoldOblique":c("{'widths'{k3s2q4scx1w201n3r201o6o201s1w201t1w201u1w201w3m201x3m201y3m2k1w2l2l202m2n2n3r2o3r2p5t202q6o2r1s2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v2l3w3u3x3u3y3u3z3x4k6l4l4s4m4s4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3r4v4s4w3x4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v2l5w1w5x2l5y3u5z3r6k2l6l3r6m3x6n3r6o3x6p3r6q2l6r3x6s3x6t1w6u1w6v3r6w1w6x5t6y3x6z3x7k3x7l3x7m2r7n3r7o2l7p3x7q3r7r4y7s3r7t3r7u3m7v2r7w1w7x2r7y3u202l3rcl4sal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3xbq3rbr1wbs2lbu2obv3rbz3xck4s202k3rcm4scn4sco4scp4scq6ocr4scs4mct4mcu4mcv4mcw1w2m2zcy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3res3ret3reu3rev3rew1wex1wey1wez1wfl3xfm3xfn3xfo3xfp3xfq3xfr3ufs3xft3xfu3xfv3xfw3xfz3r203k6o212m6o2dw2l2cq2l3t3r3u2l17s4m19m3r}'kerning'{cl{4qs5ku5ot5qs17sv5tv}201t{2ww4wy2yw}201w{2ks}201x{2ww4wy2yw}2k{201ts201xs}2w{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}2x{5ow5qs}2y{7qs4qu5kw5os5qw5rs17su5tu7tsfzs}'fof'-6o7p{17su5tu5ot}ck{4qs5ku5ot5qs17sv5tv}4l{4qs5ku5ot5qs17sv5tv}cm{4qs5ku5ot5qs17sv5tv}cn{4qs5ku5ot5qs17sv5tv}co{4qs5ku5ot5qs17sv5tv}cp{4qs5ku5ot5qs17sv5tv}6l{17st5tt5os}17s{2kwclvcmvcnvcovcpv4lv4wwckv}5o{2kucltcmtcntcotcpt4lt4wtckt}5q{2ksclscmscnscoscps4ls4wvcks}5r{2ks4ws}5t{2kwclvcmvcnvcovcpv4lv4wwckv}eo{17st5tt5os}fu{17su5tu5ot}6p{17ss5ts}ek{17st5tt5os}el{17st5tt5os}em{17st5tt5os}en{17st5tt5os}6o{201ts}ep{17st5tt5os}es{17ss5ts}et{17ss5ts}eu{17ss5ts}ev{17ss5ts}6z{17su5tu5os5qt}fm{17su5tu5os5qt}fn{17su5tu5os5qt}fo{17su5tu5os5qt}fp{17su5tu5os5qt}fq{17su5tu5os5qt}fs{17su5tu5os5qt}ft{17su5tu5ot}7m{5os}fv{17su5tu5ot}fw{17su5tu5ot}}}"),ZapfDingbats:c("{'widths'{k4u2k1w'fof'6o}'kerning'{'fof'-6o}}"),"Courier-Bold":c("{'widths'{k3w'fof'6o}'kerning'{'fof'-6o}}"),"Times-Italic":c("{'widths'{k3n2q4ycx2l201n3m201o5t201s2l201t2l201u2l201w3r201x3r201y3r2k1t2l2l202m2n2n3m2o3m2p5n202q5t2r1p2s2l2t2l2u3m2v4n2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v2l3w4n3x4n3y4n3z3m4k5w4l3x4m3x4n4m4o4s4p3x4q3x4r4s4s4s4t2l4u2w4v4m4w3r4x5n4y4m4z4s5k3x5l4s5m3x5n3m5o3r5p4s5q3x5r5n5s3x5t3r5u3r5v2r5w1w5x2r5y2u5z3m6k2l6l3m6m3m6n2w6o3m6p2w6q1w6r3m6s3m6t1w6u1w6v2w6w1w6x4s6y3m6z3m7k3m7l3m7m2r7n2r7o1w7p3m7q2w7r4m7s2w7t2w7u2r7v2s7w1v7x2s7y3q202l3mcl3xal2ram3man3mao3map3mar3mas2lat4wau1vav3maw4nay4waz2lbk2sbl4n'fof'6obo2lbp3mbq3obr1tbs2lbu1zbv3mbz3mck3x202k3mcm3xcn3xco3xcp3xcq5tcr4mcs3xct3xcu3xcv3xcw2l2m2ucy2lcz2ldl4mdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek3mel3mem3men3meo3mep3meq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr4nfs3mft3mfu3mfv3mfw3mfz2w203k6o212m6m2dw2l2cq2l3t3m3u2l17s3r19m3m}'kerning'{cl{5kt4qw}201s{201sw}201t{201tw2wy2yy6q-t}201x{2wy2yy}2k{201tw}2w{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}2x{17ss5ts5os}2y{7qs4qy7rs5ky7mw5os5qx5ru17su5tu}'fof'-6o6t{17ss5ts5qs}7t{5os}3v{5qs}7p{17su5tu5qs}ck{5kt4qw}4l{5kt4qw}cm{5kt4qw}cn{5kt4qw}co{5kt4qw}cp{5kt4qw}6l{4qs5ks5ou5qw5ru17su5tu}17s{2ks}5q{ckvclvcmvcnvcovcpv4lv}5r{ckuclucmucnucoucpu4lu}5t{2ks}6p{4qs5ks5ou5qw5ru17su5tu}ek{4qs5ks5ou5qw5ru17su5tu}el{4qs5ks5ou5qw5ru17su5tu}em{4qs5ks5ou5qw5ru17su5tu}en{4qs5ks5ou5qw5ru17su5tu}eo{4qs5ks5ou5qw5ru17su5tu}ep{4qs5ks5ou5qw5ru17su5tu}es{5ks5qs4qs}et{4qs5ks5ou5qw5ru17su5tu}eu{4qs5ks5qw5ru17su5tu}ev{5ks5qs4qs}ex{17ss5ts5qs}6z{4qv5ks5ou5qw5ru17su5tu}fm{4qv5ks5ou5qw5ru17su5tu}fn{4qv5ks5ou5qw5ru17su5tu}fo{4qv5ks5ou5qw5ru17su5tu}fp{4qv5ks5ou5qw5ru17su5tu}fq{4qv5ks5ou5qw5ru17su5tu}7r{5os}fs{4qv5ks5ou5qw5ru17su5tu}ft{17su5tu5qs}fu{17su5tu5qs}fv{17su5tu5qs}fw{17su5tu5qs}}}"),"Times-Roman":c("{'widths'{k3n2q4ycx2l201n3m201o6o201s2l201t2l201u2l201w2w201x2w201y2w2k1t2l2l202m2n2n3m2o3m2p5n202q6o2r1m2s2l2t2l2u3m2v3s2w1t2x2l2y1t2z1w3k3m3l3m3m3m3n3m3o3m3p3m3q3m3r3m3s3m203t2l203u2l3v1w3w3s3x3s3y3s3z2w4k5w4l4s4m4m4n4m4o4s4p3x4q3r4r4s4s4s4t2l4u2r4v4s4w3x4x5t4y4s4z4s5k3r5l4s5m4m5n3r5o3x5p4s5q4s5r5y5s4s5t4s5u3x5v2l5w1w5x2l5y2z5z3m6k2l6l2w6m3m6n2w6o3m6p2w6q2l6r3m6s3m6t1w6u1w6v3m6w1w6x4y6y3m6z3m7k3m7l3m7m2l7n2r7o1w7p3m7q3m7r4s7s3m7t3m7u2w7v3k7w1o7x3k7y3q202l3mcl4sal2lam3man3mao3map3mar3mas2lat4wau1vav3maw3say4waz2lbk2sbl3s'fof'6obo2lbp3mbq2xbr1tbs2lbu1zbv3mbz2wck4s202k3mcm4scn4sco4scp4scq5tcr4mcs3xct3xcu3xcv3xcw2l2m2tcy2lcz2ldl4sdm4sdn4sdo4sdp4sdq4sds4sdt4sdu4sdv4sdw4sdz3mek2wel2wem2wen2weo2wep2weq4mer2wes2wet2weu2wev2wew1wex1wey1wez1wfl3mfm3mfn3mfo3mfp3mfq3mfr3sfs3mft3mfu3mfv3mfw3mfz3m203k6o212m6m2dw2l2cq2l3t3m3u1w17s4s19m3m}'kerning'{cl{4qs5ku17sw5ou5qy5rw201ss5tw201ws}201s{201ss}201t{ckw4lwcmwcnwcowcpwclw4wu201ts}2k{201ts}2w{4qs5kw5os5qx5ru17sx5tx}2x{17sw5tw5ou5qu}2y{4qs5kw5os5qx5ru17sx5tx}'fof'-6o7t{ckuclucmucnucoucpu4lu5os5rs}3u{17su5tu5qs}3v{17su5tu5qs}7p{17sw5tw5qs}ck{4qs5ku17sw5ou5qy5rw201ss5tw201ws}4l{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cm{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cn{4qs5ku17sw5ou5qy5rw201ss5tw201ws}co{4qs5ku17sw5ou5qy5rw201ss5tw201ws}cp{4qs5ku17sw5ou5qy5rw201ss5tw201ws}6l{17su5tu5os5qw5rs}17s{2ktclvcmvcnvcovcpv4lv4wuckv}5o{ckwclwcmwcnwcowcpw4lw4wu}5q{ckyclycmycnycoycpy4ly4wu5ms}5r{cktcltcmtcntcotcpt4lt4ws}5t{2ktclvcmvcnvcovcpv4lv4wuckv}7q{cksclscmscnscoscps4ls}6p{17su5tu5qw5rs}ek{5qs5rs}el{17su5tu5os5qw5rs}em{17su5tu5os5qs5rs}en{17su5qs5rs}eo{5qs5rs}ep{17su5tu5os5qw5rs}es{5qs}et{17su5tu5qw5rs}eu{17su5tu5qs5rs}ev{5qs}6z{17sv5tv5os5qx5rs}fm{5os5qt5rs}fn{17sv5tv5os5qx5rs}fo{17sv5tv5os5qx5rs}fp{5os5qt5rs}fq{5os5qt5rs}7r{ckuclucmucnucoucpu4lu5os}fs{17sv5tv5os5qx5rs}ft{17ss5ts5qs}fu{17sw5tw5qs}fv{17sw5tw5qs}fw{17ss5ts5qs}fz{ckuclucmucnucoucpu4lu5os5rs}}}"),"Helvetica-Oblique":c("{'widths'{k3p2q4mcx1w201n3r201o6o201s1q201t1q201u1q201w2l201x2l201y2l2k1w2l1w202m2n2n3r2o3r2p5t202q6o2r1n2s2l2t2l2u2r2v3u2w1w2x2l2y1w2z1w3k3r3l3r3m3r3n3r3o3r3p3r3q3r3r3r3s3r203t2l203u2l3v1w3w3u3x3u3y3u3z3r4k6p4l4m4m4m4n4s4o4s4p4m4q3x4r4y4s4s4t1w4u3m4v4m4w3r4x5n4y4s4z4y5k4m5l4y5m4s5n4m5o3x5p4s5q4m5r5y5s4m5t4m5u3x5v1w5w1w5x1w5y2z5z3r6k2l6l3r6m3r6n3m6o3r6p3r6q1w6r3r6s3r6t1q6u1q6v3m6w1q6x5n6y3r6z3r7k3r7l3r7m2l7n3m7o1w7p3r7q3m7r4s7s3m7t3m7u3m7v2l7w1u7x2l7y3u202l3rcl4mal2lam3ran3rao3rap3rar3ras2lat4tau2pav3raw3uay4taz2lbk2sbl3u'fof'6obo2lbp3rbr1wbs2lbu2obv3rbz3xck4m202k3rcm4mcn4mco4mcp4mcq6ocr4scs4mct4mcu4mcv4mcw1w2m2ncy1wcz1wdl4sdm4ydn4ydo4ydp4ydq4yds4ydt4sdu4sdv4sdw4sdz3xek3rel3rem3ren3reo3rep3req5ter3mes3ret3reu3rev3rew1wex1wey1wez1wfl3rfm3rfn3rfo3rfp3rfq3rfr3ufs3xft3rfu3rfv3rfw3rfz3m203k6o212m6o2dw2l2cq2l3t3r3u1w17s4m19m3r}'kerning'{5q{4wv}cl{4qs5kw5ow5qs17sv5tv}201t{2wu4w1k2yu}201x{2wu4wy2yu}17s{2ktclucmucnu4otcpu4lu4wycoucku}2w{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}2x{17sy5ty5oy5qs}2y{7qs4qz5k1m17sy5ow5qx5rsfsu5ty7tufzu}'fof'-6o7p{17sv5tv5ow}ck{4qs5kw5ow5qs17sv5tv}4l{4qs5kw5ow5qs17sv5tv}cm{4qs5kw5ow5qs17sv5tv}cn{4qs5kw5ow5qs17sv5tv}co{4qs5kw5ow5qs17sv5tv}cp{4qs5kw5ow5qs17sv5tv}6l{17sy5ty5ow}do{17st5tt}4z{17st5tt}7s{fst}dm{17st5tt}dn{17st5tt}5o{ckwclwcmwcnwcowcpw4lw4wv}dp{17st5tt}dq{17st5tt}7t{5ow}ds{17st5tt}5t{2ktclucmucnu4otcpu4lu4wycoucku}fu{17sv5tv5ow}6p{17sy5ty5ow5qs}ek{17sy5ty5ow}el{17sy5ty5ow}em{17sy5ty5ow}en{5ty}eo{17sy5ty5ow}ep{17sy5ty5ow}es{17sy5ty5qs}et{17sy5ty5ow5qs}eu{17sy5ty5ow5qs}ev{17sy5ty5ow5qs}6z{17sy5ty5ow5qs}fm{17sy5ty5ow5qs}fn{17sy5ty5ow5qs}fo{17sy5ty5ow5qs}fp{17sy5ty5qs}fq{17sy5ty5ow5qs}7r{5ow}fs{17sy5ty5ow5qs}ft{17sv5tv5ow}7m{5ow}fv{17sv5tv5ow}fw{17sv5tv5ow}}}")}};t.events.push(["addFont",function(t){var e=t.font,n=l.Unicode[e.postScriptName];n&&(e.metadata.Unicode={},e.metadata.Unicode.widths=n.widths,e.metadata.Unicode.kerning=n.kerning);var r=u.Unicode[e.postScriptName];r&&(e.metadata.Unicode.encoding=r,e.encoding=r.codePages[0])}])}(It.API),function(t){var e=function(t){for(var e=t.length,n=new Uint8Array(e),r=0;r<e;r++)n[r]=t.charCodeAt(r);return n};t.API.events.push(["addFont",function(n){var r=void 0,i=n.font,a=n.instance;if(!i.isStandardFont){if(void 0===a)throw new Error("Font does not exist in vFS, import fonts or remove declaration doc.addFont('"+i.postScriptName+"').");if("string"!=typeof(r=!1===a.existsFileInVFS(i.postScriptName)?a.loadFile(i.postScriptName):a.getFileFromVFS(i.postScriptName)))throw new Error("Font is not stored as string-data in vFS, import fonts or remove declaration doc.addFont('"+i.postScriptName+"').");!function(n,r){r=/^\x00\x01\x00\x00/.test(r)?e(r):e(nt(r)),n.metadata=t.API.TTFFont.open(r),n.metadata.Unicode=n.metadata.Unicode||{encoding:{},kerning:{},widths:[]},n.metadata.glyIdsUsed=[0]}(i,r)}}])}(It),function(){function t(){return(K.canvg?Promise.resolve(K.canvg):n.e(273).then(n.bind(n,1273))).catch((function(t){return Promise.reject(new Error("Could not load canvg: "+t))})).then((function(t){return t.default?t.default:t}))}It.API.addSvgAsImage=function(e,n,r,i,a,o,s,c){if(isNaN(n)||isNaN(r))throw $.error("jsPDF.addSvgAsImage: Invalid coordinates",arguments),new Error("Invalid coordinates passed to jsPDF.addSvgAsImage");if(isNaN(i)||isNaN(a))throw $.error("jsPDF.addSvgAsImage: Invalid measurements",arguments),new Error("Invalid measurements (width and/or height) passed to jsPDF.addSvgAsImage");var h=document.createElement("canvas");h.width=i,h.height=a;var u=h.getContext("2d");u.fillStyle="#fff",u.fillRect(0,0,h.width,h.height);var l={ignoreMouse:!0,ignoreAnimation:!0,ignoreDimensions:!0},f=this;return t().then((function(t){return t.fromString(u,e,l)}),(function(){return Promise.reject(new Error("Could not load canvg."))})).then((function(t){return t.render(l)})).then((function(){f.addImage(h.toDataURL("image/jpeg",1),n,r,i,a,s,c)}))}}(),It.API.putTotalPages=function(t){var e,n=0;parseInt(this.internal.getFont().id.substr(1),10)<15?(e=new RegExp(t,"g"),n=this.internal.getNumberOfPages()):(e=new RegExp(this.pdfEscape16(t,this.internal.getFont()),"g"),n=this.pdfEscape16(this.internal.getNumberOfPages()+"",this.internal.getFont()));for(var r=1;r<=this.internal.getNumberOfPages();r++)for(var i=0;i<this.internal.pages[r].length;i++)this.internal.pages[r][i]=this.internal.pages[r][i].replace(e,n);return this},It.API.viewerPreferences=function(t,e){var n;t=t||{},e=e||!1;var i,a,o,s={HideToolbar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideMenubar:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},HideWindowUI:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},FitWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},CenterWindow:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.3},DisplayDocTitle:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.4},NonFullScreenPageMode:{defaultValue:"UseNone",value:"UseNone",type:"name",explicitSet:!1,valueSet:["UseNone","UseOutlines","UseThumbs","UseOC"],pdfVersion:1.3},Direction:{defaultValue:"L2R",value:"L2R",type:"name",explicitSet:!1,valueSet:["L2R","R2L"],pdfVersion:1.3},ViewArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},ViewClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintArea:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintClip:{defaultValue:"CropBox",value:"CropBox",type:"name",explicitSet:!1,valueSet:["MediaBox","CropBox","TrimBox","BleedBox","ArtBox"],pdfVersion:1.4},PrintScaling:{defaultValue:"AppDefault",value:"AppDefault",type:"name",explicitSet:!1,valueSet:["AppDefault","None"],pdfVersion:1.6},Duplex:{defaultValue:"",value:"none",type:"name",explicitSet:!1,valueSet:["Simplex","DuplexFlipShortEdge","DuplexFlipLongEdge","none"],pdfVersion:1.7},PickTrayByPDFSize:{defaultValue:!1,value:!1,type:"boolean",explicitSet:!1,valueSet:[!0,!1],pdfVersion:1.7},PrintPageRange:{defaultValue:"",value:"",type:"array",explicitSet:!1,valueSet:null,pdfVersion:1.7},NumCopies:{defaultValue:1,value:1,type:"integer",explicitSet:!1,valueSet:null,pdfVersion:1.7}},c=Object.keys(s),h=[],u=0,l=0,f=0;function d(t,e){var n,r=!1;for(n=0;n<t.length;n+=1)t[n]===e&&(r=!0);return r}if(void 0===this.internal.viewerpreferences&&(this.internal.viewerpreferences={},this.internal.viewerpreferences.configuration=JSON.parse(JSON.stringify(s)),this.internal.viewerpreferences.isSubscribed=!1),n=this.internal.viewerpreferences.configuration,"reset"===t||!0===e){var p=c.length;for(f=0;f<p;f+=1)n[c[f]].value=n[c[f]].defaultValue,n[c[f]].explicitSet=!1}if("object"===(0,r.A)(t))for(a in t)if(o=t[a],d(c,a)&&void 0!==o){if("boolean"===n[a].type&&"boolean"==typeof o)n[a].value=o;else if("name"===n[a].type&&d(n[a].valueSet,o))n[a].value=o;else if("integer"===n[a].type&&Number.isInteger(o))n[a].value=o;else if("array"===n[a].type){for(u=0;u<o.length;u+=1)if(i=!0,1===o[u].length&&"number"==typeof o[u][0])h.push(String(o[u]-1));else if(o[u].length>1){for(l=0;l<o[u].length;l+=1)"number"!=typeof o[u][l]&&(i=!1);!0===i&&h.push([o[u][0]-1,o[u][1]-1].join(" "))}n[a].value="["+h.join(" ")+"]"}else n[a].value=n[a].defaultValue;n[a].explicitSet=!0}return!1===this.internal.viewerpreferences.isSubscribed&&(this.internal.events.subscribe("putCatalog",(function(){var t,e=[];for(t in n)!0===n[t].explicitSet&&("name"===n[t].type?e.push("/"+t+" /"+n[t].value):e.push("/"+t+" "+n[t].value));0!==e.length&&this.internal.write("/ViewerPreferences\n<<\n"+e.join("\n")+"\n>>")})),this.internal.viewerpreferences.isSubscribed=!0),this.internal.viewerpreferences.configuration=n,this},function(t){var e=function(){var t='<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"><rdf:Description rdf:about="" xmlns:jspdf="'+this.internal.__metadata__.namespaceuri+'"><jspdf:metadata>',e=unescape(encodeURIComponent('<x:xmpmeta xmlns:x="adobe:ns:meta/">')),n=unescape(encodeURIComponent(t)),r=unescape(encodeURIComponent(this.internal.__metadata__.metadata)),i=unescape(encodeURIComponent("</jspdf:metadata></rdf:Description></rdf:RDF>")),a=unescape(encodeURIComponent("</x:xmpmeta>")),o=n.length+r.length+i.length+e.length+a.length;this.internal.__metadata__.metadata_object_number=this.internal.newObject(),this.internal.write("<< /Type /Metadata /Subtype /XML /Length "+o+" >>"),this.internal.write("stream"),this.internal.write(e+n+r+i+a),this.internal.write("endstream"),this.internal.write("endobj")},n=function(){this.internal.__metadata__.metadata_object_number&&this.internal.write("/Metadata "+this.internal.__metadata__.metadata_object_number+" 0 R")};t.addMetadata=function(t,r){return void 0===this.internal.__metadata__&&(this.internal.__metadata__={metadata:t,namespaceuri:r||"http://jspdf.default.namespaceuri/"},this.internal.events.subscribe("putCatalog",n),this.internal.events.subscribe("postPutResources",e)),this}}(It.API),function(t){var e=t.API,n=e.pdfEscape16=function(t,e){for(var n,r=e.metadata.Unicode.widths,i=["","0","00","000","0000"],a=[""],o=0,s=t.length;o<s;++o){if(n=e.metadata.characterToGlyph(t.charCodeAt(o)),e.metadata.glyIdsUsed.push(n),e.metadata.toUnicode[n]=t.charCodeAt(o),-1==r.indexOf(n)&&(r.push(n),r.push([parseInt(e.metadata.widthOfGlyph(n),10)])),"0"==n)return a.join("");n=n.toString(16),a.push(i[4-n.length],n)}return a.join("")},r=function(t){var e,n,r,i,a,o,s;for(a="/CIDInit /ProcSet findresource begin\n12 dict begin\nbegincmap\n/CIDSystemInfo <<\n  /Registry (Adobe)\n  /Ordering (UCS)\n  /Supplement 0\n>> def\n/CMapName /Adobe-Identity-UCS def\n/CMapType 2 def\n1 begincodespacerange\n<0000><ffff>\nendcodespacerange",r=[],o=0,s=(n=Object.keys(t).sort((function(t,e){return t-e}))).length;o<s;o++)e=n[o],r.length>=100&&(a+="\n"+r.length+" beginbfchar\n"+r.join("\n")+"\nendbfchar",r=[]),void 0!==t[e]&&null!==t[e]&&"function"==typeof t[e].toString&&(i=("0000"+t[e].toString(16)).slice(-4),e=("0000"+(+e).toString(16)).slice(-4),r.push("<"+e+"><"+i+">"));return r.length&&(a+="\n"+r.length+" beginbfchar\n"+r.join("\n")+"\nendbfchar\n"),a+"endcmap\nCMapName currentdict /CMap defineresource pop\nend\nend"};e.events.push(["putFont",function(e){!function(e){var n=e.font,i=e.out,a=e.newObject,o=e.putStream;if(n.metadata instanceof t.API.TTFFont&&"Identity-H"===n.encoding){for(var s=n.metadata.Unicode.widths,c=n.metadata.subset.encode(n.metadata.glyIdsUsed,1),h="",u=0;u<c.length;u++)h+=String.fromCharCode(c[u]);var l=a();o({data:h,addLength1:!0,objectId:l}),i("endobj");var f=a();o({data:r(n.metadata.toUnicode),addLength1:!0,objectId:f}),i("endobj");var d=a();i("<<"),i("/Type /FontDescriptor"),i("/FontName /"+At(n.fontName)),i("/FontFile2 "+l+" 0 R"),i("/FontBBox "+t.API.PDFObject.convert(n.metadata.bbox)),i("/Flags "+n.metadata.flags),i("/StemV "+n.metadata.stemV),i("/ItalicAngle "+n.metadata.italicAngle),i("/Ascent "+n.metadata.ascender),i("/Descent "+n.metadata.decender),i("/CapHeight "+n.metadata.capHeight),i(">>"),i("endobj");var p=a();i("<<"),i("/Type /Font"),i("/BaseFont /"+At(n.fontName)),i("/FontDescriptor "+d+" 0 R"),i("/W "+t.API.PDFObject.convert(s)),i("/CIDToGIDMap /Identity"),i("/DW 1000"),i("/Subtype /CIDFontType2"),i("/CIDSystemInfo"),i("<<"),i("/Supplement 0"),i("/Registry (Adobe)"),i("/Ordering ("+n.encoding+")"),i(">>"),i(">>"),i("endobj"),n.objectNumber=a(),i("<<"),i("/Type /Font"),i("/Subtype /Type0"),i("/ToUnicode "+f+" 0 R"),i("/BaseFont /"+At(n.fontName)),i("/Encoding /"+n.encoding),i("/DescendantFonts ["+p+" 0 R]"),i(">>"),i("endobj"),n.isAlreadyPutted=!0}}(e)}]),e.events.push(["putFont",function(e){!function(e){var n=e.font,i=e.out,a=e.newObject,o=e.putStream;if(n.metadata instanceof t.API.TTFFont&&"WinAnsiEncoding"===n.encoding){for(var s=n.metadata.rawData,c="",h=0;h<s.length;h++)c+=String.fromCharCode(s[h]);var u=a();o({data:c,addLength1:!0,objectId:u}),i("endobj");var l=a();o({data:r(n.metadata.toUnicode),addLength1:!0,objectId:l}),i("endobj");var f=a();i("<<"),i("/Descent "+n.metadata.decender),i("/CapHeight "+n.metadata.capHeight),i("/StemV "+n.metadata.stemV),i("/Type /FontDescriptor"),i("/FontFile2 "+u+" 0 R"),i("/Flags 96"),i("/FontBBox "+t.API.PDFObject.convert(n.metadata.bbox)),i("/FontName /"+At(n.fontName)),i("/ItalicAngle "+n.metadata.italicAngle),i("/Ascent "+n.metadata.ascender),i(">>"),i("endobj"),n.objectNumber=a();for(var d=0;d<n.metadata.hmtx.widths.length;d++)n.metadata.hmtx.widths[d]=parseInt(n.metadata.hmtx.widths[d]*(1e3/n.metadata.head.unitsPerEm));i("<</Subtype/TrueType/Type/Font/ToUnicode "+l+" 0 R/BaseFont/"+At(n.fontName)+"/FontDescriptor "+f+" 0 R/Encoding/"+n.encoding+" /FirstChar 29 /LastChar 255 /Widths "+t.API.PDFObject.convert(n.metadata.hmtx.widths)+">>"),i("endobj"),n.isAlreadyPutted=!0}}(e)}]);var i=function(t){var e,r=t.text||"",i=t.x,a=t.y,o=t.options||{},s=t.mutex||{},c=s.pdfEscape,h=s.activeFontKey,u=s.fonts,l=h,f="",d=0,p="",g=u[l].encoding;if("Identity-H"!==u[l].encoding)return{text:r,x:i,y:a,options:o,mutex:s};for(p=r,l=h,Array.isArray(r)&&(p=r[0]),d=0;d<p.length;d+=1)u[l].metadata.hasOwnProperty("cmap")&&(e=u[l].metadata.cmap.unicode.codeMap[p[d].charCodeAt(0)]),e||p[d].charCodeAt(0)<256&&u[l].metadata.hasOwnProperty("Unicode")?f+=p[d]:f+="";var m="";return parseInt(l.slice(1))<14||"WinAnsiEncoding"===g?m=c(f,l).split("").map((function(t){return t.charCodeAt(0).toString(16)})).join(""):"Identity-H"===g&&(m=n(f,u[l])),s.isHex=!0,{text:m,x:i,y:a,options:o,mutex:s}};e.events.push(["postProcessText",function(t){var e=t.text||"",n=[],r={text:e,x:t.x,y:t.y,options:t.options,mutex:t.mutex};if(Array.isArray(e)){var a=0;for(a=0;a<e.length;a+=1)Array.isArray(e[a])&&3===e[a].length?n.push([i(Object.assign({},r,{text:e[a][0]})).text,e[a][1],e[a][2]]):n.push(i(Object.assign({},r,{text:e[a]})).text);t.text=n}else t.text=i(Object.assign({},r,{text:e})).text}])}(It),function(t){var e=function(){return void 0===this.internal.vFS&&(this.internal.vFS={}),!0};t.existsFileInVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]},t.addFileToVFS=function(t,n){return e.call(this),this.internal.vFS[t]=n,this},t.getFileFromVFS=function(t){return e.call(this),void 0!==this.internal.vFS[t]?this.internal.vFS[t]:null}}(It.API),function(t){t.__bidiEngine__=t.prototype.__bidiEngine__=function(t){var n,r,i,a,o,s,c,h=e,u=[[0,3,0,1,0,0,0],[0,3,0,1,2,2,0],[0,3,0,17,2,0,1],[0,3,5,5,4,1,0],[0,3,21,21,4,0,1],[0,3,5,5,4,2,0]],l=[[2,0,1,1,0,1,0],[2,0,1,1,0,2,0],[2,0,2,1,3,2,0],[2,0,2,33,3,1,1]],f={L:0,R:1,EN:2,AN:3,N:4,B:5,S:6},d={0:0,5:1,6:2,7:3,32:4,251:5,254:6,255:7},p=["(",")","(","<",">","<","[","]","[","{","}","{","«","»","«","‹","›","‹","⁅","⁆","⁅","⁽","⁾","⁽","₍","₎","₍","≤","≥","≤","〈","〉","〈","﹙","﹚","﹙","﹛","﹜","﹛","﹝","﹞","﹝","﹤","﹥","﹤"],g=new RegExp(/^([1-4|9]|1[0-9]|2[0-9]|3[0168]|4[04589]|5[012]|7[78]|159|16[0-9]|17[0-2]|21[569]|22[03489]|250)$/),m=!1,v=0;this.__bidiEngine__={};var b=function(t){var e=t.charCodeAt(),n=e>>8,r=d[n];return void 0!==r?h[256*r+(255&e)]:252===n||253===n?"AL":g.test(n)?"L":8===n?"R":"N"},y=function(t){for(var e,n=0;n<t.length;n++){if("L"===(e=b(t.charAt(n))))return!1;if("R"===e)return!0}return!1},w=function(t,e,o,s){var c,h,u,l,f=e[s];switch(f){case"L":case"R":case"LRE":case"RLE":case"LRO":case"RLO":case"PDF":m=!1;break;case"N":case"AN":break;case"EN":m&&(f="AN");break;case"AL":m=!0,f="R";break;case"WS":case"BN":f="N";break;case"CS":s<1||s+1>=e.length||"EN"!==(c=o[s-1])&&"AN"!==c||"EN"!==(h=e[s+1])&&"AN"!==h?f="N":m&&(h="AN"),f=h===c?h:"N";break;case"ES":f="EN"===(c=s>0?o[s-1]:"B")&&s+1<e.length&&"EN"===e[s+1]?"EN":"N";break;case"ET":if(s>0&&"EN"===o[s-1]){f="EN";break}if(m){f="N";break}for(u=s+1,l=e.length;u<l&&"ET"===e[u];)u++;f=u<l&&"EN"===e[u]?"EN":"N";break;case"NSM":if(i&&!a){for(l=e.length,u=s+1;u<l&&"NSM"===e[u];)u++;if(u<l){var d=t[s],p=d>=1425&&d<=2303||64286===d;if(c=e[u],p&&("R"===c||"AL"===c)){f="R";break}}}f=s<1||"B"===(c=e[s-1])?"N":o[s-1];break;case"B":m=!1,n=!0,f=v;break;case"S":r=!0,f="N"}return f},N=function(t,e,n){var r=t.split("");return n&&L(r,n,{hiLevel:v}),r.reverse(),e&&e.reverse(),r.join("")},L=function(t,e,i){var a,o,s,c,h,d=-1,p=t.length,g=0,y=[],N=v?l:u,L=[];for(m=!1,n=!1,r=!1,o=0;o<p;o++)L[o]=b(t[o]);for(s=0;s<p;s++){if(h=g,y[s]=w(t,L,y,s),a=240&(g=N[h][f[y[s]]]),g&=15,e[s]=c=N[g][5],a>0)if(16===a){for(o=d;o<s;o++)e[o]=1;d=-1}else d=-1;if(N[g][6])-1===d&&(d=s);else if(d>-1){for(o=d;o<s;o++)e[o]=c;d=-1}"B"===L[s]&&(e[s]=0),i.hiLevel|=c}r&&function(t,e,n){for(var r=0;r<n;r++)if("S"===t[r]){e[r]=v;for(var i=r-1;i>=0&&"WS"===t[i];i--)e[i]=v}}(L,e,p)},A=function(t,e,r,i,a){if(!(a.hiLevel<t)){if(1===t&&1===v&&!n)return e.reverse(),void(r&&r.reverse());for(var o,s,c,h,u=e.length,l=0;l<u;){if(i[l]>=t){for(c=l+1;c<u&&i[c]>=t;)c++;for(h=l,s=c-1;h<s;h++,s--)o=e[h],e[h]=e[s],e[s]=o,r&&(o=r[h],r[h]=r[s],r[s]=o);l=c}l++}}},x=function(t,e,n){var r=t.split(""),i={hiLevel:v};return n||(n=[]),L(r,n,i),function(t,e,n){if(0!==n.hiLevel&&c)for(var r,i=0;i<t.length;i++)1===e[i]&&(r=p.indexOf(t[i]))>=0&&(t[i]=p[r+1])}(r,n,i),A(2,r,e,n,i),A(1,r,e,n,i),r.join("")};return this.__bidiEngine__.doBidiReorder=function(t,e,n){if(function(t,e){if(e)for(var n=0;n<t.length;n++)e[n]=n;void 0===a&&(a=y(t)),void 0===s&&(s=y(t))}(t,e),i||!o||s)if(i&&o&&a^s)v=a?1:0,t=N(t,e,n);else if(!i&&o&&s)v=a?1:0,t=x(t,e,n),t=N(t,e);else if(!i||a||o||s){if(i&&!o&&a^s)t=N(t,e),a?(v=0,t=x(t,e,n)):(v=1,t=x(t,e,n),t=N(t,e));else if(i&&a&&!o&&s)v=1,t=x(t,e,n),t=N(t,e);else if(!i&&!o&&a^s){var r=c;a?(v=1,t=x(t,e,n),v=0,c=!1,t=x(t,e,n),c=r):(v=0,t=x(t,e,n),t=N(t,e),v=1,c=!1,t=x(t,e,n),c=r,t=N(t,e))}}else v=0,t=x(t,e,n);else v=a?1:0,t=x(t,e,n);return t},this.__bidiEngine__.setOptions=function(t){t&&(i=t.isInputVisual,o=t.isOutputVisual,a=t.isInputRtl,s=t.isOutputRtl,c=t.isSymmetricSwapping)},this.__bidiEngine__.setOptions(t),this.__bidiEngine__};var e=["BN","BN","BN","BN","BN","BN","BN","BN","BN","S","B","S","WS","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","B","B","B","S","WS","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","BN","BN","BN","BN","BN","BN","B","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","BN","CS","N","ET","ET","ET","ET","N","N","N","N","L","N","N","BN","N","N","ET","ET","EN","EN","N","L","N","N","N","EN","L","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","L","L","L","L","L","L","L","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","L","N","N","N","N","N","ET","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","NSM","R","NSM","NSM","R","NSM","NSM","R","NSM","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","N","N","N","N","N","R","R","R","R","R","N","N","N","N","N","N","N","N","N","N","N","AN","AN","AN","AN","AN","AN","N","N","AL","ET","ET","AL","CS","AL","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","AN","AN","AN","AN","AN","AN","AN","AN","AN","ET","AN","AN","AL","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AN","N","NSM","NSM","NSM","NSM","NSM","NSM","AL","AL","NSM","NSM","N","NSM","NSM","NSM","NSM","AL","AL","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","AL","AL","NSM","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","R","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","R","R","N","N","N","N","R","N","N","N","N","N","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","WS","BN","BN","BN","L","R","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","B","LRE","RLE","PDF","LRO","RLO","CS","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","WS","BN","BN","BN","BN","BN","N","LRI","RLI","FSI","PDI","BN","BN","BN","BN","BN","BN","EN","L","N","N","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","L","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","ES","ES","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","N","N","N","N","N","R","NSM","R","R","R","R","R","R","R","R","R","R","ES","R","R","R","R","R","R","R","R","R","R","R","R","R","N","R","R","R","R","R","N","R","N","R","R","N","R","R","N","R","R","R","R","R","R","R","R","R","R","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","NSM","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","CS","N","CS","N","N","CS","N","N","N","N","N","N","N","N","N","ET","N","N","ES","ES","N","N","N","N","N","ET","ET","N","N","N","N","N","AL","AL","AL","AL","AL","N","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","AL","N","N","BN","N","N","N","ET","ET","ET","N","N","N","N","N","ES","CS","ES","CS","CS","EN","EN","EN","EN","EN","EN","EN","EN","EN","EN","CS","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","N","N","N","N","N","N","N","N","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","L","N","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","L","L","L","N","N","L","L","L","N","N","N","ET","ET","N","N","N","ET","ET","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N","N"],n=new t.__bidiEngine__({isInputVisual:!0});t.API.events.push(["postProcessText",function(t){var e=t.text,r=(t.x,t.y,t.options||{}),i=(t.mutex,r.lang,[]);if(r.isInputVisual="boolean"!=typeof r.isInputVisual||r.isInputVisual,n.setOptions(r),"[object Array]"===Object.prototype.toString.call(e)){var a=0;for(i=[],a=0;a<e.length;a+=1)"[object Array]"===Object.prototype.toString.call(e[a])?i.push([n.doBidiReorder(e[a][0]),e[a][1],e[a][2]]):i.push([n.doBidiReorder(e[a])]);t.text=i}else t.text=n.doBidiReorder(e);n.setOptions({isInputVisual:!0})}])}(It),It.API.TTFFont=function(){function t(t){var e;if(this.rawData=t,e=this.contents=new Xe(t),this.contents.pos=4,"ttcf"===e.readString(4))throw new Error("TTCF not supported.");e.pos=0,this.parse(),this.subset=new pn(this),this.registerTTF()}return t.open=function(e){return new t(e)},t.prototype.parse=function(){return this.directory=new Je(this.contents),this.head=new $e(this),this.name=new on(this),this.cmap=new tn(this),this.toUnicode={},this.hhea=new en(this),this.maxp=new sn(this),this.hmtx=new cn(this),this.post=new rn(this),this.os2=new nn(this),this.loca=new dn(this),this.glyf=new un(this),this.ascender=this.os2.exists&&this.os2.ascender||this.hhea.ascender,this.decender=this.os2.exists&&this.os2.decender||this.hhea.decender,this.lineGap=this.os2.exists&&this.os2.lineGap||this.hhea.lineGap,this.bbox=[this.head.xMin,this.head.yMin,this.head.xMax,this.head.yMax]},t.prototype.registerTTF=function(){var t,e,n,r,i;if(this.scaleFactor=1e3/this.head.unitsPerEm,this.bbox=function(){var e,n,r,i;for(i=[],e=0,n=(r=this.bbox).length;e<n;e++)t=r[e],i.push(Math.round(t*this.scaleFactor));return i}.call(this),this.stemV=0,this.post.exists?(n=255&(r=this.post.italic_angle),!!(32768&(e=r>>16))&&(e=-(1+(65535^e))),this.italicAngle=+(e+"."+n)):this.italicAngle=0,this.ascender=Math.round(this.ascender*this.scaleFactor),this.decender=Math.round(this.decender*this.scaleFactor),this.lineGap=Math.round(this.lineGap*this.scaleFactor),this.capHeight=this.os2.exists&&this.os2.capHeight||this.ascender,this.xHeight=this.os2.exists&&this.os2.xHeight||0,this.familyClass=(this.os2.exists&&this.os2.familyClass||0)>>8,this.isSerif=1===(i=this.familyClass)||2===i||3===i||4===i||5===i||7===i,this.isScript=10===this.familyClass,this.flags=0,this.post.isFixedPitch&&(this.flags|=1),this.isSerif&&(this.flags|=2),this.isScript&&(this.flags|=8),0!==this.italicAngle&&(this.flags|=64),this.flags|=32,!this.cmap.unicode)throw new Error("No unicode cmap for font")},t.prototype.characterToGlyph=function(t){var e;return(null!=(e=this.cmap.unicode)?e.codeMap[t]:void 0)||0},t.prototype.widthOfGlyph=function(t){var e;return e=1e3/this.head.unitsPerEm,this.hmtx.forGlyph(t).advance*e},t.prototype.widthOfString=function(t,e,n){var r,i,a,o;for(a=0,i=0,o=(t=""+t).length;0<=o?i<o:i>o;i=0<=o?++i:--i)r=t.charCodeAt(i),a+=this.widthOfGlyph(this.characterToGlyph(r))+n*(1e3/e)||0;return a*(e/1e3)},t.prototype.lineHeight=function(t,e){var n;return null==e&&(e=!1),n=e?this.lineGap:0,(this.ascender+n-this.decender)/1e3*t},t}();var Ye,Xe=function(){function t(t){this.data=null!=t?t:[],this.pos=0,this.length=this.data.length}return t.prototype.readByte=function(){return this.data[this.pos++]},t.prototype.writeByte=function(t){return this.data[this.pos++]=t},t.prototype.readUInt32=function(){return 16777216*this.readByte()+(this.readByte()<<16)+(this.readByte()<<8)+this.readByte()},t.prototype.writeUInt32=function(t){return this.writeByte(t>>>24&255),this.writeByte(t>>16&255),this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt32=function(){var t;return(t=this.readUInt32())>=2147483648?t-4294967296:t},t.prototype.writeInt32=function(t){return t<0&&(t+=4294967296),this.writeUInt32(t)},t.prototype.readUInt16=function(){return this.readByte()<<8|this.readByte()},t.prototype.writeUInt16=function(t){return this.writeByte(t>>8&255),this.writeByte(255&t)},t.prototype.readInt16=function(){var t;return(t=this.readUInt16())>=32768?t-65536:t},t.prototype.writeInt16=function(t){return t<0&&(t+=65536),this.writeUInt16(t)},t.prototype.readString=function(t){var e,n;for(n=[],e=0;0<=t?e<t:e>t;e=0<=t?++e:--e)n[e]=String.fromCharCode(this.readByte());return n.join("")},t.prototype.writeString=function(t){var e,n,r;for(r=[],e=0,n=t.length;0<=n?e<n:e>n;e=0<=n?++e:--e)r.push(this.writeByte(t.charCodeAt(e)));return r},t.prototype.readShort=function(){return this.readInt16()},t.prototype.writeShort=function(t){return this.writeInt16(t)},t.prototype.readLongLong=function(){var t,e,n,r,i,a,o,s;return t=this.readByte(),e=this.readByte(),n=this.readByte(),r=this.readByte(),i=this.readByte(),a=this.readByte(),o=this.readByte(),s=this.readByte(),128&t?-1*(72057594037927940*(255^t)+281474976710656*(255^e)+1099511627776*(255^n)+4294967296*(255^r)+16777216*(255^i)+65536*(255^a)+256*(255^o)+(255^s)+1):72057594037927940*t+281474976710656*e+1099511627776*n+4294967296*r+16777216*i+65536*a+256*o+s},t.prototype.writeLongLong=function(t){var e,n;return e=Math.floor(t/4294967296),n=4294967295&t,this.writeByte(e>>24&255),this.writeByte(e>>16&255),this.writeByte(e>>8&255),this.writeByte(255&e),this.writeByte(n>>24&255),this.writeByte(n>>16&255),this.writeByte(n>>8&255),this.writeByte(255&n)},t.prototype.readInt=function(){return this.readInt32()},t.prototype.writeInt=function(t){return this.writeInt32(t)},t.prototype.read=function(t){var e,n;for(e=[],n=0;0<=t?n<t:n>t;n=0<=t?++n:--n)e.push(this.readByte());return e},t.prototype.write=function(t){var e,n,r,i;for(i=[],n=0,r=t.length;n<r;n++)e=t[n],i.push(this.writeByte(e));return i},t}(),Je=function(){var t;function e(t){var e,n,r;for(this.scalarType=t.readInt(),this.tableCount=t.readShort(),this.searchRange=t.readShort(),this.entrySelector=t.readShort(),this.rangeShift=t.readShort(),this.tables={},n=0,r=this.tableCount;0<=r?n<r:n>r;n=0<=r?++n:--n)e={tag:t.readString(4),checksum:t.readInt(),offset:t.readInt(),length:t.readInt()},this.tables[e.tag]=e}return e.prototype.encode=function(e){var n,r,i,a,o,s,c,h,u,l,f,d,p;for(p in f=Object.keys(e).length,s=Math.log(2),u=16*Math.floor(Math.log(f)/s),a=Math.floor(u/s),h=16*f-u,(r=new Xe).writeInt(this.scalarType),r.writeShort(f),r.writeShort(u),r.writeShort(a),r.writeShort(h),i=16*f,c=r.pos+i,o=null,d=[],e)for(l=e[p],r.writeString(p),r.writeInt(t(l)),r.writeInt(c),r.writeInt(l.length),d=d.concat(l),"head"===p&&(o=c),c+=l.length;c%4;)d.push(0),c++;return r.write(d),n=2981146554-t(r.data),r.pos=o+8,r.writeUInt32(n),r.data},t=function(t){var e,n,r,i;for(t=hn.call(t);t.length%4;)t.push(0);for(r=new Xe(t),n=0,e=0,i=t.length;e<i;e=e+=4)n+=r.readUInt32();return 4294967295&n},e}(),Ke={}.hasOwnProperty,Ze=function(t,e){for(var n in e)Ke.call(e,n)&&(t[n]=e[n]);function r(){this.constructor=t}return r.prototype=e.prototype,t.prototype=new r,t.__super__=e.prototype,t};Ye=function(){function t(t){var e;this.file=t,e=this.file.directory.tables[this.tag],this.exists=!!e,e&&(this.offset=e.offset,this.length=e.length,this.parse(this.file.contents))}return t.prototype.parse=function(){},t.prototype.encode=function(){},t.prototype.raw=function(){return this.exists?(this.file.contents.pos=this.offset,this.file.contents.read(this.length)):null},t}();var $e=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="head",t.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.revision=t.readInt(),this.checkSumAdjustment=t.readInt(),this.magicNumber=t.readInt(),this.flags=t.readShort(),this.unitsPerEm=t.readShort(),this.created=t.readLongLong(),this.modified=t.readLongLong(),this.xMin=t.readShort(),this.yMin=t.readShort(),this.xMax=t.readShort(),this.yMax=t.readShort(),this.macStyle=t.readShort(),this.lowestRecPPEM=t.readShort(),this.fontDirectionHint=t.readShort(),this.indexToLocFormat=t.readShort(),this.glyphDataFormat=t.readShort()},t.prototype.encode=function(t){var e;return(e=new Xe).writeInt(this.version),e.writeInt(this.revision),e.writeInt(this.checkSumAdjustment),e.writeInt(this.magicNumber),e.writeShort(this.flags),e.writeShort(this.unitsPerEm),e.writeLongLong(this.created),e.writeLongLong(this.modified),e.writeShort(this.xMin),e.writeShort(this.yMin),e.writeShort(this.xMax),e.writeShort(this.yMax),e.writeShort(this.macStyle),e.writeShort(this.lowestRecPPEM),e.writeShort(this.fontDirectionHint),e.writeShort(t),e.writeShort(this.glyphDataFormat),e.data},t}(),Qe=function(){function t(t,e){var n,r,i,a,o,s,c,h,u,l,f,d,p,g,m,v,b;switch(this.platformID=t.readUInt16(),this.encodingID=t.readShort(),this.offset=e+t.readInt(),u=t.pos,t.pos=this.offset,this.format=t.readUInt16(),this.length=t.readUInt16(),this.language=t.readUInt16(),this.isUnicode=3===this.platformID&&1===this.encodingID&&4===this.format||0===this.platformID&&4===this.format,this.codeMap={},this.format){case 0:for(s=0;s<256;++s)this.codeMap[s]=t.readByte();break;case 4:for(f=t.readUInt16(),l=f/2,t.pos+=6,i=function(){var e,n;for(n=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)n.push(t.readUInt16());return n}(),t.pos+=2,p=function(){var e,n;for(n=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)n.push(t.readUInt16());return n}(),c=function(){var e,n;for(n=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)n.push(t.readUInt16());return n}(),h=function(){var e,n;for(n=[],s=e=0;0<=l?e<l:e>l;s=0<=l?++e:--e)n.push(t.readUInt16());return n}(),r=(this.length-t.pos+this.offset)/2,o=function(){var e,n;for(n=[],s=e=0;0<=r?e<r:e>r;s=0<=r?++e:--e)n.push(t.readUInt16());return n}(),s=m=0,b=i.length;m<b;s=++m)for(g=i[s],n=v=d=p[s];d<=g?v<=g:v>=g;n=d<=g?++v:--v)0===h[s]?a=n+c[s]:0!==(a=o[h[s]/2+(n-d)-(l-s)]||0)&&(a+=c[s]),this.codeMap[n]=65535&a}t.pos=u}return t.encode=function(t,e){var n,r,i,a,o,s,c,h,u,l,f,d,p,g,m,v,b,y,w,N,L,A,x,S,_,P,k,I,F,C,j,B,E,O,M,q,R,D,T,z,U,H,W,V,G,Y;switch(I=new Xe,a=Object.keys(t).sort((function(t,e){return t-e})),e){case"macroman":for(p=0,g=function(){var t=[];for(d=0;d<256;++d)t.push(0);return t}(),v={0:0},i={},F=0,E=a.length;F<E;F++)null==v[W=t[r=a[F]]]&&(v[W]=++p),i[r]={old:t[r],new:v[t[r]]},g[r]=v[t[r]];return I.writeUInt16(1),I.writeUInt16(0),I.writeUInt32(12),I.writeUInt16(0),I.writeUInt16(262),I.writeUInt16(0),I.write(g),{charMap:i,subtable:I.data,maxGlyphID:p+1};case"unicode":for(P=[],u=[],b=0,v={},n={},m=c=null,C=0,O=a.length;C<O;C++)null==v[w=t[r=a[C]]]&&(v[w]=++b),n[r]={old:w,new:v[w]},o=v[w]-r,null!=m&&o===c||(m&&u.push(m),P.push(r),c=o),m=r;for(m&&u.push(m),u.push(65535),P.push(65535),S=2*(x=P.length),A=2*Math.pow(Math.log(x)/Math.LN2,2),l=Math.log(A/2)/Math.LN2,L=2*x-A,s=[],N=[],f=[],d=j=0,M=P.length;j<M;d=++j){if(_=P[d],h=u[d],65535===_){s.push(0),N.push(0);break}if(_-(k=n[_].new)>=32768)for(s.push(0),N.push(2*(f.length+x-d)),r=B=_;_<=h?B<=h:B>=h;r=_<=h?++B:--B)f.push(n[r].new);else s.push(k-_),N.push(0)}for(I.writeUInt16(3),I.writeUInt16(1),I.writeUInt32(12),I.writeUInt16(4),I.writeUInt16(16+8*x+2*f.length),I.writeUInt16(0),I.writeUInt16(S),I.writeUInt16(A),I.writeUInt16(l),I.writeUInt16(L),U=0,q=u.length;U<q;U++)r=u[U],I.writeUInt16(r);for(I.writeUInt16(0),H=0,R=P.length;H<R;H++)r=P[H],I.writeUInt16(r);for(V=0,D=s.length;V<D;V++)o=s[V],I.writeUInt16(o);for(G=0,T=N.length;G<T;G++)y=N[G],I.writeUInt16(y);for(Y=0,z=f.length;Y<z;Y++)p=f[Y],I.writeUInt16(p);return{charMap:n,subtable:I.data,maxGlyphID:b+1}}},t}(),tn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="cmap",t.prototype.parse=function(t){var e,n,r;for(t.pos=this.offset,this.version=t.readUInt16(),r=t.readUInt16(),this.tables=[],this.unicode=null,n=0;0<=r?n<r:n>r;n=0<=r?++n:--n)e=new Qe(t,this.offset),this.tables.push(e),e.isUnicode&&null==this.unicode&&(this.unicode=e);return!0},t.encode=function(t,e){var n,r;return null==e&&(e="macroman"),n=Qe.encode(t,e),(r=new Xe).writeUInt16(0),r.writeUInt16(1),n.table=r.data.concat(n.subtable),n},t}(),en=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="hhea",t.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.ascender=t.readShort(),this.decender=t.readShort(),this.lineGap=t.readShort(),this.advanceWidthMax=t.readShort(),this.minLeftSideBearing=t.readShort(),this.minRightSideBearing=t.readShort(),this.xMaxExtent=t.readShort(),this.caretSlopeRise=t.readShort(),this.caretSlopeRun=t.readShort(),this.caretOffset=t.readShort(),t.pos+=8,this.metricDataFormat=t.readShort(),this.numberOfMetrics=t.readUInt16()},t}(),nn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="OS/2",t.prototype.parse=function(t){if(t.pos=this.offset,this.version=t.readUInt16(),this.averageCharWidth=t.readShort(),this.weightClass=t.readUInt16(),this.widthClass=t.readUInt16(),this.type=t.readShort(),this.ySubscriptXSize=t.readShort(),this.ySubscriptYSize=t.readShort(),this.ySubscriptXOffset=t.readShort(),this.ySubscriptYOffset=t.readShort(),this.ySuperscriptXSize=t.readShort(),this.ySuperscriptYSize=t.readShort(),this.ySuperscriptXOffset=t.readShort(),this.ySuperscriptYOffset=t.readShort(),this.yStrikeoutSize=t.readShort(),this.yStrikeoutPosition=t.readShort(),this.familyClass=t.readShort(),this.panose=function(){var e,n;for(n=[],e=0;e<10;++e)n.push(t.readByte());return n}(),this.charRange=function(){var e,n;for(n=[],e=0;e<4;++e)n.push(t.readInt());return n}(),this.vendorID=t.readString(4),this.selection=t.readShort(),this.firstCharIndex=t.readShort(),this.lastCharIndex=t.readShort(),this.version>0&&(this.ascent=t.readShort(),this.descent=t.readShort(),this.lineGap=t.readShort(),this.winAscent=t.readShort(),this.winDescent=t.readShort(),this.codePageRange=function(){var e,n;for(n=[],e=0;e<2;e=++e)n.push(t.readInt());return n}(),this.version>1))return this.xHeight=t.readShort(),this.capHeight=t.readShort(),this.defaultChar=t.readShort(),this.breakChar=t.readShort(),this.maxContext=t.readShort()},t}(),rn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="post",t.prototype.parse=function(t){var e,n,r;switch(t.pos=this.offset,this.format=t.readInt(),this.italicAngle=t.readInt(),this.underlinePosition=t.readShort(),this.underlineThickness=t.readShort(),this.isFixedPitch=t.readInt(),this.minMemType42=t.readInt(),this.maxMemType42=t.readInt(),this.minMemType1=t.readInt(),this.maxMemType1=t.readInt(),this.format){case 65536:case 196608:break;case 131072:var i;for(n=t.readUInt16(),this.glyphNameIndex=[],i=0;0<=n?i<n:i>n;i=0<=n?++i:--i)this.glyphNameIndex.push(t.readUInt16());for(this.names=[],r=[];t.pos<this.offset+this.length;)e=t.readByte(),r.push(this.names.push(t.readString(e)));return r;case 151552:return n=t.readUInt16(),this.offsets=t.read(n);case 262144:return this.map=function(){var e,n,r;for(r=[],i=e=0,n=this.file.maxp.numGlyphs;0<=n?e<n:e>n;i=0<=n?++e:--e)r.push(t.readUInt32());return r}.call(this)}},t}(),an=function(t,e){this.raw=t,this.length=t.length,this.platformID=e.platformID,this.encodingID=e.encodingID,this.languageID=e.languageID},on=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="name",t.prototype.parse=function(t){var e,n,r,i,a,o,s,c,h,u,l;for(t.pos=this.offset,t.readShort(),e=t.readShort(),o=t.readShort(),n=[],i=0;0<=e?i<e:i>e;i=0<=e?++i:--i)n.push({platformID:t.readShort(),encodingID:t.readShort(),languageID:t.readShort(),nameID:t.readShort(),length:t.readShort(),offset:this.offset+o+t.readShort()});for(s={},i=h=0,u=n.length;h<u;i=++h)r=n[i],t.pos=r.offset,c=t.readString(r.length),a=new an(c,r),null==s[l=r.nameID]&&(s[l]=[]),s[r.nameID].push(a);this.strings=s,this.copyright=s[0],this.fontFamily=s[1],this.fontSubfamily=s[2],this.uniqueSubfamily=s[3],this.fontName=s[4],this.version=s[5];try{this.postscriptName=s[6][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}catch(t){this.postscriptName=s[4][0].raw.replace(/[\x00-\x19\x80-\xff]/g,"")}return this.trademark=s[7],this.manufacturer=s[8],this.designer=s[9],this.description=s[10],this.vendorUrl=s[11],this.designerUrl=s[12],this.license=s[13],this.licenseUrl=s[14],this.preferredFamily=s[15],this.preferredSubfamily=s[17],this.compatibleFull=s[18],this.sampleText=s[19]},t}(),sn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="maxp",t.prototype.parse=function(t){return t.pos=this.offset,this.version=t.readInt(),this.numGlyphs=t.readUInt16(),this.maxPoints=t.readUInt16(),this.maxContours=t.readUInt16(),this.maxCompositePoints=t.readUInt16(),this.maxComponentContours=t.readUInt16(),this.maxZones=t.readUInt16(),this.maxTwilightPoints=t.readUInt16(),this.maxStorage=t.readUInt16(),this.maxFunctionDefs=t.readUInt16(),this.maxInstructionDefs=t.readUInt16(),this.maxStackElements=t.readUInt16(),this.maxSizeOfInstructions=t.readUInt16(),this.maxComponentElements=t.readUInt16(),this.maxComponentDepth=t.readUInt16()},t}(),cn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="hmtx",t.prototype.parse=function(t){var e,n,r,i,a,o,s;for(t.pos=this.offset,this.metrics=[],e=0,o=this.file.hhea.numberOfMetrics;0<=o?e<o:e>o;e=0<=o?++e:--e)this.metrics.push({advance:t.readUInt16(),lsb:t.readInt16()});for(r=this.file.maxp.numGlyphs-this.file.hhea.numberOfMetrics,this.leftSideBearings=function(){var n,i;for(i=[],e=n=0;0<=r?n<r:n>r;e=0<=r?++n:--n)i.push(t.readInt16());return i}(),this.widths=function(){var t,e,n,r;for(r=[],t=0,e=(n=this.metrics).length;t<e;t++)i=n[t],r.push(i.advance);return r}.call(this),n=this.widths[this.widths.length-1],s=[],e=a=0;0<=r?a<r:a>r;e=0<=r?++a:--a)s.push(this.widths.push(n));return s},t.prototype.forGlyph=function(t){return t in this.metrics?this.metrics[t]:{advance:this.metrics[this.metrics.length-1].advance,lsb:this.leftSideBearings[t-this.metrics.length]}},t}(),hn=[].slice,un=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="glyf",t.prototype.parse=function(){return this.cache={}},t.prototype.glyphFor=function(t){var e,n,r,i,a,o,s,c,h,u;return t in this.cache?this.cache[t]:(i=this.file.loca,e=this.file.contents,n=i.indexOf(t),0===(r=i.lengthOf(t))?this.cache[t]=null:(e.pos=this.offset+n,a=(o=new Xe(e.read(r))).readShort(),c=o.readShort(),u=o.readShort(),s=o.readShort(),h=o.readShort(),this.cache[t]=-1===a?new fn(o,c,u,s,h):new ln(o,a,c,u,s,h),this.cache[t]))},t.prototype.encode=function(t,e,n){var r,i,a,o,s;for(a=[],i=[],o=0,s=e.length;o<s;o++)r=t[e[o]],i.push(a.length),r&&(a=a.concat(r.encode(n)));return i.push(a.length),{table:a,offsets:i}},t}(),ln=function(){function t(t,e,n,r,i,a){this.raw=t,this.numberOfContours=e,this.xMin=n,this.yMin=r,this.xMax=i,this.yMax=a,this.compound=!1}return t.prototype.encode=function(){return this.raw.data},t}(),fn=function(){function t(t,e,n,r,i){var a,o;for(this.raw=t,this.xMin=e,this.yMin=n,this.xMax=r,this.yMax=i,this.compound=!0,this.glyphIDs=[],this.glyphOffsets=[],a=this.raw;o=a.readShort(),this.glyphOffsets.push(a.pos),this.glyphIDs.push(a.readUInt16()),32&o;)a.pos+=1&o?4:2,128&o?a.pos+=8:64&o?a.pos+=4:8&o&&(a.pos+=2)}return t.prototype.encode=function(){var t,e,n;for(e=new Xe(hn.call(this.raw.data)),t=0,n=this.glyphIDs.length;t<n;++t)e.pos=this.glyphOffsets[t];return e.data},t}(),dn=function(){function t(){return t.__super__.constructor.apply(this,arguments)}return Ze(t,Ye),t.prototype.tag="loca",t.prototype.parse=function(t){var e,n;return t.pos=this.offset,e=this.file.head.indexToLocFormat,this.offsets=0===e?function(){var e,r;for(r=[],n=0,e=this.length;n<e;n+=2)r.push(2*t.readUInt16());return r}.call(this):function(){var e,r;for(r=[],n=0,e=this.length;n<e;n+=4)r.push(t.readUInt32());return r}.call(this)},t.prototype.indexOf=function(t){return this.offsets[t]},t.prototype.lengthOf=function(t){return this.offsets[t+1]-this.offsets[t]},t.prototype.encode=function(t,e){for(var n=new Uint32Array(this.offsets.length),r=0,i=0,a=0;a<n.length;++a)if(n[a]=r,i<e.length&&e[i]==a){++i,n[a]=r;var o=this.offsets[a],s=this.offsets[a+1]-o;s>0&&(r+=s)}for(var c=new Array(4*n.length),h=0;h<n.length;++h)c[4*h+3]=255&n[h],c[4*h+2]=(65280&n[h])>>8,c[4*h+1]=(16711680&n[h])>>16,c[4*h]=(4278190080&n[h])>>24;return c},t}(),pn=function(){function t(t){this.font=t,this.subset={},this.unicodes={},this.next=33}return t.prototype.generateCmap=function(){var t,e,n,r,i;for(e in r=this.font.cmap.tables[0].codeMap,t={},i=this.subset)n=i[e],t[e]=r[n];return t},t.prototype.glyphsFor=function(t){var e,n,r,i,a,o,s;for(r={},a=0,o=t.length;a<o;a++)r[i=t[a]]=this.font.glyf.glyphFor(i);for(i in e=[],r)(null!=(n=r[i])?n.compound:void 0)&&e.push.apply(e,n.glyphIDs);if(e.length>0)for(i in s=this.glyphsFor(e))n=s[i],r[i]=n;return r},t.prototype.encode=function(t,e){var n,r,i,a,o,s,c,h,u,l,f,d,p,g,m;for(r in n=tn.encode(this.generateCmap(),"unicode"),a=this.glyphsFor(t),f={0:0},m=n.charMap)f[(s=m[r]).old]=s.new;for(d in l=n.maxGlyphID,a)d in f||(f[d]=l++);return h=function(t){var e,n;for(e in n={},t)n[t[e]]=e;return n}(f),u=Object.keys(h).sort((function(t,e){return t-e})),p=function(){var t,e,n;for(n=[],t=0,e=u.length;t<e;t++)o=u[t],n.push(h[o]);return n}(),i=this.font.glyf.encode(a,p,f),c=this.font.loca.encode(i.offsets,p),g={cmap:this.font.cmap.raw(),glyf:i.table,loca:c,hmtx:this.font.hmtx.raw(),hhea:this.font.hhea.raw(),maxp:this.font.maxp.raw(),post:this.font.post.raw(),name:this.font.name.raw(),head:this.font.head.encode(e)},this.font.os2.exists&&(g["OS/2"]=this.font.os2.raw()),this.font.directory.encode(g)},t}();It.API.PDFObject=function(){var t;function e(){}return t=function(t,e){return(Array(e+1).join("0")+t).slice(-e)},e.convert=function(n){var r,i,a,o;if(Array.isArray(n))return"["+function(){var t,i,a;for(a=[],t=0,i=n.length;t<i;t++)r=n[t],a.push(e.convert(r));return a}().join(" ")+"]";if("string"==typeof n)return"/"+n;if(null!=n?n.isString:void 0)return"("+n+")";if(n instanceof Date)return"(D:"+t(n.getUTCFullYear(),4)+t(n.getUTCMonth(),2)+t(n.getUTCDate(),2)+t(n.getUTCHours(),2)+t(n.getUTCMinutes(),2)+t(n.getUTCSeconds(),2)+"Z)";if("[object Object]"==={}.toString.call(n)){for(i in a=["<<"],n)o=n[i],a.push("/"+i+" "+e.convert(o));return a.push(">>"),a.join("\n")}return""+n},e}();const gn=It,mn=n.p+"assets/fonts/Roboto-Regular.5dd918926d41224c8142de95996eaebc.ttf",vn=n.p+"assets/fonts/Roboto-Bold.cb02a42f24299e95adb534dd151f9af5.ttf",bn=n.p+"assets/images/logo.c21f739acedde1a98845dd55b5f3f99b.jpg",yn=n.p+"assets/images/inside.967ac6c96695dd608f3cb257bf982c4c.png",wn=n.p+"assets/images/outside.293a8bcb014188f9e469ad7b456ed030.png";function Nn(t){return Nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Nn(t)}function Ln(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,_n(r.key),r)}}function An(t,e,n){xn(t,e),e.set(t,n)}function xn(t,e){if(e.has(t))throw new TypeError("Cannot initialize the same private elements twice on an object")}function Sn(t,e,n){return(e=_n(e))in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function _n(t){var e=function(t){if("object"!=Nn(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var n=e.call(t,"string");if("object"!=Nn(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"==Nn(e)?e:e+""}function Pn(t,e){return t.get(kn(t,e))}function kn(t,e,n){if("function"==typeof t?t===e:t.has(e))return arguments.length<3?e:n;throw new TypeError("Private element is not present on this object")}var In=new WeakMap,Fn=new WeakMap,Cn=new WeakMap,jn=new WeakSet,Bn=function(){return function(t,e){return e&&Ln(t.prototype,e),Object.defineProperty(t,"prototype",{writable:!1}),t}((function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1.15,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:16;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),function(t,e){xn(t,e),e.add(t)}(this,jn),Sn(this,"lineHeight",void 0),Sn(this,"gap",void 0),An(this,In,void 0),An(this,Fn,1.333),An(this,Cn,{top:16,right:16,bottom:16,left:16}),this.gap=n,this.lineHeight=e,function(t,e,n){t.set(kn(t,e),n)}(In,this,new gn({orientation:"p",unit:"px",format:"a4"}).setProperties({author:"8 CYLINDERS DETAILING"})),Pn(In,this).addFont(mn,"Roboto","normal",400,void 0,!0),Pn(In,this).addFont(vn,"Roboto","normal",700)}),[{key:"generatePDF",value:function(t){var e=this;Pn(In,this).setProperties({title:"".concat(t.car," ").concat(t.plate)});var n=Pn(In,this).internal.pageSize.getWidth(),r=Pn(In,this).internal.pageSize.getHeight(),i=Pn(Cn,this).top,a=Pn(Cn,this).bottom;Pn(In,this).setFontSize(16),kn(jn,this,On).call(this,bn,n-Pn(Cn,this).right,i+.25*this.gap,80,80,"before","after"),kn(jn,this,En).call(this,"Detailing".toUpperCase(),n-Pn(Cn,this).right-80+(80-Pn(In,this).getTextWidth("Detailing".toUpperCase()))/2,i,80,16,700),i+=80,kn(jn,this,En).call(this,"Лист осмотра автомобиля".toUpperCase(),Pn(Cn,this).left,i/2,n-80-Pn(Cn,this).left-Pn(Cn,this).right-this.gap,24,700),i+=.5*this.gap+kn(jn,this,qn).call(this,"Заказчик (контакт тел.)",t.customer,Pn(Cn,this).left,i,n-Pn(Cn,this).left-Pn(Cn,this).right);var o=kn(jn,this,qn).call(this,"Автомобиль",t.car,Pn(Cn,this).left,i,n-Pn(Cn,this).left-Pn(Cn,this).right-.5*this.gap-140),s=kn(jn,this,qn).call(this,"Гос. номер",t.plate,n-Pn(Cn,this).right-140,i,140);i+=.75*this.gap+(o>s?o:s),i+=.75*this.gap+kn(jn,this,En).call(this,"Салон автомобиля нуждается в чистке (химчистке):",Pn(Cn,this).left,i,n-Pn(Cn,this).left-Pn(Cn,this).right,14),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Кузов автомобиля нуждается в чистке от битума и металлических вкраплений.","Рекомендуется после чистки кузова авто защитить ЛКП воском либо защитным агентом.",t.bitumenCleaning.checked,t.bitumenCleaning.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Кожаная обивка салона автомобиля (сиденья; карты дверей; руль; ручка АКПП; центральная консоль; торпедо) нуждается в пропитке и защите кондиционером.","Кондиционер наноситстя исключительно на чистые поверхности.",t.leatherConditioner.checked,t.leatherConditioner.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0);var c=kn(jn,this,On).call(this,yn,Pn(Cn,this).left,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2,r-i-a);t.insideCleaning.partial.elements.forEach((function(t){var n=t.posX,r=t.posY;Pn(In,e).setLineWidth(.5),Pn(In,e).roundedRect(Pn(Cn,e).left+n,i+r,12,12,4,4,"S"),t.checked&&Pn(In,e).setFillColor("#000000").roundedRect(Pn(Cn,e).left+n+1.5,i+r+1.5,9,9,2,2,"F")}));var h=0;h+=.75*this.gap+kn(jn,this,En).call(this,"Рекомендуется чистить автомобильную обивку не реже двух раз в год.",(n+.5*this.gap)/2,i+c.height,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2,12,void 0,void 0,"before"),this.gap,kn(jn,this,En).call(this,"Для кожаных поверхностей после чистки (химчистки) рекомендуется пропитать их защитным составом, кондиционером либо кварцевым покрытием.",(n+.5*this.gap)/2,i+c.height-h,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2,12,void 0,void 0,"before"),i+=.75*this.gap+kn(jn,this,Mn).call(this,"частичной","(элементы требющие уход обозначены на картинке)",t.insideCleaning.partial.checked,t.insideCleaning.partial.price,(n+.5*this.gap)/2,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2),i+=.75*this.gap+kn(jn,this,Mn).call(this,"полной","без разборки салона",t.insideCleaning.full.checked,t.insideCleaning.full.price,(n+.5*this.gap)/2,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2),i+=.75*this.gap+kn(jn,this,Mn).call(this,"полной","с частичным разбором салона",t.insideCleaning.fullWithDisassembly.checked,t.insideCleaning.fullWithDisassembly.price,(n+.5*this.gap)/2,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2),Pn(In,this).addPage(),i=Pn(Cn,this).top,a=Pn(Cn,this).bottom,i+=.75*this.gap+kn(jn,this,En).call(this,"Кузов автомобиля нуждается в полировке:",Pn(Cn,this).left,i,n-Pn(Cn,this).left-Pn(Cn,this).right,14);var u=kn(jn,this,qn).call(this,"Дата",t.date,Pn(Cn,this).left,r-a,(n-Pn(Cn,this).left-Pn(Cn,this).right-.5*this.gap)/2,!0),l=kn(jn,this,qn).call(this,"Менеджер",t.manager,Pn(Cn,this).left+.5*this.gap+(n-Pn(Cn,this).left-Pn(Cn,this).right-.5*this.gap)/2,r-a,(n-Pn(Cn,this).left-Pn(Cn,this).right-.5*this.gap)/2,!0);a+=u>l?u:l,a+=.75*this.gap+kn(jn,this,En).call(this,t.comments,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,12,void 0,void 0,"before"),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Подкапотное пространство (мотор) нуждается в мойке.","Рекомендуется мыть подкапотное пространство один раз в год.",t.underHoodCleaning.checked,t.underHoodCleaning.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Диски автомобиля нуждаются в чистке.","(чистка производится безкислотным очистителем)",t.wheelsCleaning.checked,t.wheelsCleaning.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Декоративная насадка на выхлопной системе нуждается в чистке.",void 0,t.decorativeTipCleaning.checked,t.decorativeTipCleaning.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0),a+=.75*this.gap+kn(jn,this,Mn).call(this,"Хромированные (алюминиевые) декоративные элементы автомобиля нуждаются в чистке.",void 0,t.detailsCleaning.checked,t.detailsCleaning.price,Pn(Cn,this).left,r-a,n-Pn(Cn,this).left-Pn(Cn,this).right,!0);var f=kn(jn,this,On).call(this,wn,Pn(Cn,this).left,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2,r-i-a);t.outsidePolish.partial.elements.forEach((function(t){var n=t.posX,r=t.posY;Pn(In,e).setLineWidth(.5),Pn(In,e).roundedRect(Pn(Cn,e).left+n,i+r,12,12,4,4,"S"),t.checked&&Pn(In,e).setFillColor("#000000").roundedRect(Pn(Cn,e).left+n+1.5,i+r+1.5,9,9,2,2,"F")})),kn(jn,this,En).call(this,"Рекомендуется после полировки кузова защитить ЛКП автомобиля: воском, защитным агентом, кварцевым покрытием.",(n+.5*this.gap)/2,i+f.height,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2,12,void 0,void 0,"before"),i+=.75*this.gap+kn(jn,this,Mn).call(this,"частичной","(элементы требющие уход обозначены на картинке)",t.outsidePolish.partial.checked,t.outsidePolish.partial.price,(n+.5*this.gap)/2,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2),i+=.75*this.gap+kn(jn,this,Mn).call(this,"полной",void 0,t.outsidePolish.full.checked,t.outsidePolish.full.price,(n+.5*this.gap)/2,i,(n-Pn(Cn,this).right-Pn(Cn,this).left-.5*this.gap)/2),Pn(In,this).save("".concat(t.car," ").concat(t.plate," - ").concat(t.date,".pdf"))}}])}();function En(t,e,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:400,o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"left",s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"after",c=Pn(In,this).setFont("Roboto","normal",a).setFontSize(i).setTextColor("#000000").splitTextToSize(t,r),h=kn(jn,this,Rn).call(this,c.length,i);return"before"===s&&(n-=h),Pn(In,this).text(c,e,n,{align:o,baseline:"top"}),h}function On(t,e,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"after",o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"after",s=Pn(In,this).getImageProperties(t),c=Math.min(r/s.width,i/s.height),h=s.width*c,u=s.height*c;return"before"===a&&(e-=h),"center"===a&&(e+=(r-h)/2),n="before"===o?n-u:n,Pn(In,this).addImage({imageData:t,x:e,y:n,width:h,height:u}),{width:h,height:u}}function Mn(t,e,n,r,i,a,o){var s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],c=20,h=17,u=45,l=0;return s?(e&&(l-=kn(jn,this,En).call(this,e,i,a,o-1.5*this.gap-c-u-h,12,void 0,void 0,"before"),l-=.25*this.gap),l-=kn(jn,this,En).call(this,t,i,a+l,o-1.5*this.gap-c-u-h,14,void 0,void 0,"before"),l=Math.abs(l)):(l+=kn(jn,this,En).call(this,t,i,a,o-1.5*this.gap-c-u-h,14),e&&(l+=.25*this.gap,l+=kn(jn,this,En).call(this,e,i,a+l,o-1.5*this.gap-c-u-h,12))),s&&(a-=l),kn(jn,this,En).call(this,"грн",i+o-h,a+c,h,14,400,void 0,"before"),kn(jn,this,En).call(this,r,i+o-u-.5*this.gap-h,a+c,u,14,400,void 0,"before"),Pn(In,this).setLineWidth(.5),Pn(In,this).line(i+o-u-.5*this.gap-h,a+c,i+o-.5*this.gap-h,a+c),Pn(In,this).roundedRect(i+o-c-u-this.gap-h,a,c,c,4,4,"S"),n&&Pn(In,this).setFillColor("#000000").roundedRect(i+o-c-u-this.gap-h+2.5,a+2.5,15,15,2,2,"F"),c>l?c:l}function qn(t,e,n,r,i){var a=arguments.length>5&&void 0!==arguments[5]&&arguments[5];t="".concat(t.trim(),":"),kn(jn,this,En).call(this,t,n,r,i,12,void 0,void 0,a?"before":"after");var o=.25*this.gap,s=Pn(In,this).getTextWidth(t)+o,c=kn(jn,this,En).call(this,e,n+s+o,r,i-s-o,12,void 0,void 0,a?"before":"after"),h=a?r:r+c;return Pn(In,this).setLineWidth(.5),Pn(In,this).line(n+s,h,n+i,h),c}function Rn(t,e){return t*e*this.lineHeight/Pn(Fn,this)}document.addEventListener("DOMContentLoaded",(function(){document.getElementById("date").valueAsDate=new Date,document.getElementById("logo-image").src=bn,document.getElementById("inside-image").src=yn,document.getElementById("outside-image").src=wn})),document.getElementById("saveBtn").addEventListener("click",(function(){var t=new Bn,e={customer:document.getElementById("customer").value,car:document.getElementById("car").value,plate:document.getElementById("plate").value,insideCleaning:{partial:{checked:document.getElementById("ins-partial-check").checked,price:document.getElementById("ins-partial-price").value,elements:[{name:"roof",posX:96,posY:33,checked:document.getElementById("ins-roof").checked},{name:"trunk",posX:96,posY:109,checked:document.getElementById("ins-trunk").checked},{name:"rightRearDoor",posX:161,posY:165,checked:document.getElementById("ins-right-rear-door").checked},{name:"leftRearDoor",posX:31,posY:165,checked:document.getElementById("ins-left-rear-door").checked},{name:"rearSeats",posX:96,posY:165,checked:document.getElementById("ins-rear-seats").checked},{name:"gloveCompartment",posX:96,posY:209,checked:document.getElementById("ins-glove-compartment").checked},{name:"leftFrontSeat",posX:71,posY:223,checked:document.getElementById("ins-left-front-seat").checked},{name:"rightFrontSeat",posX:122,posY:223,checked:document.getElementById("ins-right-front-seat").checked},{name:"rightFrontDoor",posX:161,posY:212,checked:document.getElementById("ins-right-front-door").checked},{name:"leftFrontDoor",posX:31,posY:212,checked:document.getElementById("ins-left-front-door").checked},{name:"dashboard",posX:71,posY:260,checked:document.getElementById("ins-dashboard").checked},{name:"steeringWheel",posX:122,posY:265,checked:document.getElementById("ins-steering-wheel").checked}]},full:{checked:document.getElementById("ins-full-check").checked,price:document.getElementById("ins-full-price").value},fullWithDisassembly:{checked:document.getElementById("ins-full-with-disassembly-check").checked,price:document.getElementById("ins-full-with-disassembly-price").value}},leatherConditioner:{checked:document.getElementById("leather-conditioner-check").checked,price:document.getElementById("leather-conditioner-price").value},bitumenCleaning:{checked:document.getElementById("bitumen-cleaning-check").checked,price:document.getElementById("bitumen-cleaning-price").value},outsidePolish:{partial:{checked:document.getElementById("out-partial-check").checked,price:document.getElementById("out-partial-price").value,elements:[{name:"frontBumper",posX:96,posY:6,checked:document.getElementById("out-front-bumper").checked},{name:"hood",posX:96,posY:53,checked:document.getElementById("out-hood").checked},{name:"roof",posX:96,posY:152,checked:document.getElementById("out-roof").checked},{name:"trunk",posX:96,posY:238,checked:document.getElementById("out-trunk").checked},{name:"rearBumper",posX:96,posY:273,checked:document.getElementById("out-rear-bumper").checked},{name:"leftFrontWing",posX:35,posY:75,checked:document.getElementById("out-left-front-wing").checked},{name:"rightFrontWing",posX:156,posY:75,checked:document.getElementById("out-right-front-wing").checked},{name:"leftRearWing",posX:37,posY:215,checked:document.getElementById("out-left-rear-wing").checked},{name:"rightRearWing",posX:154,posY:215,checked:document.getElementById("out-right-rear-wing").checked},{name:"rightRearDoor",posX:159,posY:162,checked:document.getElementById("out-right-rear-door").checked},{name:"rightFrontDoor",posX:159,posY:122,checked:document.getElementById("out-right-front-door").checked},{name:"leftFrontDoor",posX:31,posY:122,checked:document.getElementById("out-left-front-door").checked},{name:"leftRearDoor",posX:31,posY:162,checked:document.getElementById("out-left-rear-door").checked}]},full:{checked:document.getElementById("out-full-check").checked,price:document.getElementById("out-full-price").value}},detailsCleaning:{checked:document.getElementById("out-elements-check").checked,price:document.getElementById("out-elements-price").value},decorativeTipCleaning:{checked:document.getElementById("out-decorative-tip-check").checked,price:document.getElementById("out-decorative-tip-price").value},wheelsCleaning:{checked:document.getElementById("out-wheels-check").checked,price:document.getElementById("out-wheels-price").value},underHoodCleaning:{checked:document.getElementById("out-under-hood-check").checked,price:document.getElementById("out-under-hood-price").value},comments:document.getElementById("comments").value,date:document.getElementById("date").value,manager:document.getElementById("manager").value};t.generatePDF(e)}))},901:(t,e,n)=>{function r(t){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},r(t)}n.d(e,{A:()=>r})}},t=>{t(t.s=6908)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,